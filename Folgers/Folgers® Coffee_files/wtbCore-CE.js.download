// Google Map API Standard Code
var map = undefined;
var markers = [];
var markerCluster;

var mapLoaded = false;
var variantDropdownLoaded = false;
var categoryDropdownLoaded = false;

var loggingEnabled = false;

// Set up for directions
var directionsStore = {};
var directionsUpdate = false;

var directionsDisplay = null;
var directionsService = null;
//

var geocoder;
var autocomplete;
var directionsAutocomplete;

var markers = new Array();
var distancenode = '';
var distancecode = 1;
var themiles = '';
var thekm = '';
var arr = new Array();
var d = new Date();
var totalrec = 0;
var default_distance = 100;
var default_location = "";

var productModels = [];
var productLabels = {};
var productSizes  = {};
var productRetailers = [];
var extraVariantLookup = [];
var extraVariantAttrLookup = [];

var localRetailers = {};

var onlineRetailerHTML = [];

var retailerNumber = 0;
var onlineRetailers = 0;

var carouselData = [];
var carouselDisplayed = false;
var carouselObj = null;
var activeCarouselBtn = null;
var carouselDefaultProductImage = '';

var currVariantModel = 0;
var currGroupProduct = 0;
var maxVariantModels = 0;
var modelCountSet = false;
var allVariantsLookupComplete = false;

var onlineData = {};
var localData = {};

var localResults = {};

var version = 'latest';

var attrVariantAdded = false;
var currExtraAttr = '';
var extraAttrLookup = '';
var extraAttrDropDown = '';

var currOfferData = {};

var currPostCode = '';
var currState = '';
var locLat = '';
var locLong = '';

var currMapZoom = 10;

var mapInitialised = false;
var requestingLocalData = false;

/* ==== OnDemand Settings ==== */
var onDemandStores = [];
var onDemandStartTime;
var onDemandCallTimings = [0,3,8,15];

var onDemandAvailabilityUrl = '';
var onDemandCallCount = 0;

/* AvailabilityStatus */
var ODCallForAvailability = "CallForAvailability";
var ODAssumeAvailability = 1;
var ODAvailable = "Available";
var ODUnavailable = "NotAvailable";
var ODNotFound = 4;

/* OnDemandStatus */
var ODSUnknown = 0;
var ODSProcessing = "Processing";
var ODSComplete = "Complete";
var ODSFailed = "Error";

var onlineContainer = "onlineList";
var onlineRetailerContainer = "retailers-online";


var widgetConfig = {};

var trackEvents = true;
var vnextTrackingEnabled = true;

var model = "" ;
var initialModel = "";
var productName = "";
var profileId = 0;
var lang = "";

var env = "prod";

var CaProductId = "";

var distanceUnits = "Miles";
var maxRange = 250;

var show12Hour = true;

var initialSearch = true;
var localResultsApplied = false;

var multiModel = false;
var productGroup = false;

var productGroupList = null;
var groupProductList = [];

var initialCategoryProduct = {};

var groupDropdownLoading = false;

var lastMultiModelProduct = false;

var productDataDisplayed = false;

var userAgent = navigator.userAgent;
var referrerUrl = document.referrer;

var isMobile = false; //initiate as false
// device detection
if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent) 
    || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0,4))) { 
    isMobile = true;
}

var postCode = "";
var tag = "brandsite";

var currRange = 5;
var geo = {};

var currentStore = {};

var impressionEvent =[];
var widgetImpressionGuid;
var userTrackingGuid;
var deviceTypeId;

var guidParam = '';

var authorizationToken = 'Z58QH8nvuxDQlHRDCC7M4fQtLZ4W+uKP+hd8WiMSPffIqQACkhKHckB+0NFCDuFsQ6P0YfUMVN8BTDRkW8xDCy9jG+rgsXsoYUae2wSy1Lg=';
var petsOAuth = "https://locations.where-to-buy.co/api/token/pets?profileId={0}";
var configUrl = "../config/{0}/{1}-config.json";
var petsCall  = "https://pets.channeladvisor.com/api/v1/event";
var pcatOffersCall = "https://productcatalog.channeladvisor.com/api/v1/offers/models/{0}?maxLocationsPerRetailer={1}&maxResultsPerRetailer={2}";

var catalogMetadataCall = "https://productcatalog.channeladvisor.com/api/v1/multibrand/metadata";
var catalogBrandDetailsCall = "https://productcatalog.channeladvisor.com/api/v1/multibrand/{0}/details?countryCode={1}&languageCode={2}";
var catalogBrandProductsDetailsCall = "https://productcatalog.channeladvisor.com/api/v1/multibrand/{0}/products?countryCode={1}&languageCode={2}&categories={3}";

var petsV2Call = 'https://pets.channeladvisor.com/api/v2/event';
var petsV2Auth = 'PuyrHVT82Wf-iobfPicU_p_AqlHRy13UwXtTmJJF7CKdg_1vbrGbqVZGlEdQFrZwzW7MFwxIBUN3yqDnuQ8RhSOrmzuJ66uOG6Agb2le8rmYoGUXPTH5opF1HPtNMxEXba5Y1m7kOfK1gkOD3b3GNCYO3bguIFhwkWTo0JNlwrsY6vMxMt5q6wMJ9Z0HXhOL9Laq5KtIxhbVOi3Buf5O8m8qWf3hIwclo3KKzXL7hcpDv9zTfTJ2mc3lCL9KB4oFLOpnJCfhglOIkKtmArTHuSQXtitzPUHpFSav3Rw09tLSoSCeVUGCHLCgAtPABiEOMZH6UYg3koeHqF8rGqZehC5DA4IHVQsY--vHXmaNVcsThYEK_hCRRkxqmADfrzVTWqgSryqutv4TRnLBI_OAjSeczcy_KaAJAVxw8R1fwdd7ZYrGWixaXDf7Wx7sZMAJQPJ-OXf54K2V3T61kBaRBZyQWO8-qF9uk8mIhMQcxPdu1T1FlOvpDBzQB1kjl1t4_xVQZsD4eTSRS4WDx0DPMh-4414';

var typeaheadUrl = "https://plrss-data.where-to-buy.co/v1/customersupportportal/typeaheadproducts?brandId={0}&countryId={1}&languageId={2}&type=json";
var typeaheadLookupRunning = false;

var productImage = "";
var productDescription = "";

var startLatitude = 40.1451;
var startLongitude = -99.6680;
var startZoom = 3;

var region = 'us';

var currPlace = '';
var currPlaceDetails = undefined;

var customerLocation = '';
var customerPlace;

var attempt = 0;
var inProgress = false;

var countrySwitch = false;

var countryLookupFound = false;

var externalTrigger = false;

var runningCategoryLookup = false;

var widgetImpressed = false;
var searchFormTemplate = 
'<form class="map-search form-inline">' +
 	'<div id="searchBoxParent" class="input-group">' +
 	    '<input id="searchLocation" type="{0}" tabindex="3" onfocus="this.value = \'\';"' +
            'class="form-control" placeholder="Search Locations">' +
        '<div class="input-group-append" tabindex="4">' +
            '<i class="material-icons" id="search-icon">' +
                'search' +
            '</i>' +
        '</div>' +
        '<select class="distance form-control" name="rangeSelect" id="rangeSelect">' +
        '</select>' +
    '</div>' +
'</form>';
/*
var buyOnlineTemplate =
'<div id="buy-online-retailer-block" class="row retailer-block align-items-center">'+
	'<div class="logo">' +
		'<img class="model-logo" src="{wtb_logo_url}" alt="{wtb_display_name}">' +
	'</div>' +
    '{wtb_onlineStockDetails}' +	
			'{wtb_add_to_cart}' +
	'<div class="buy" >' +
		'<span id="{wtb_display_name}BuyNow">' +
			'<a href="{store_deeplink_url}" target="_blank" class="btn btn-buynow " aria-label="Buy Now from {wtb_display_name}">' +
				'<i class="material-icons valign-center">open_in_new</i>' +
				'{wtb_buybuttontext}' +
			'</a>' +
		'</span>' +
	'</div>' +		
	'</div>';
*/

var buyOnlineTemplate =
'<div  class="retailers-online">'+
  '<div id="buy-online-retailer-block" class="row retailer-block {wtb_display_name} {wtb_stock} align-items-center">'+
	'<div class="logo">' +
		'{wtb_logo_str}' +
	'</div>' +
	'{wtb_onlineRatingDetails}' +
    '{wtb_onlineStockDetails}' +	
	'{wtb_onlinePromotions}' +
	'<div class="nearby">' +
		'{wtb_onlineCheckNearby}' +
	'</div>' +
	'<div class="buy" >' +
		'{wtb_onlineBuyNow}' +
		'{wtb_onlineAddToCart}' +
	'</div>' +
  '</div>' +
'</div>';

var categoryDisplayTemplate =
'<div  class="category-online">'+
  '<div id="buy-online-category-block" class="row category-block {wtb_display_name} {wtb_stock} align-items-center">'+
	'<div class="logo">' +
		'<img src="{wtb_logo_str}"/>' +
	'</div>' +
	'<div class="categoryLabel">'+
		'{wtb_cat_str}' +
	'</div>' +
	'<div class="show" attr-category="{wtb_cat_code}">' +
		'{wtb_cat_show}' +
	'</div>' +
  '</div>' +
'</div>';

var categoryProductTemplate = '<div  class="category-online {wtb_product_name}">'+
'<div id="buy-online-category-product" class="row category-product {wtb_product_name} {wtb_stock} align-items-center">'+
  '<div class="logo">' +
	  '<img src="{wtb_prodImage_str}"/>' +
  '</div>' +
  '<div class="productLabel">' +
	  '{wtb_product_str}' +
  '</div>' +
  '<div class="show" attr-model="{wtb_product_model}">' +
	  '{wtb_cat_product_label}' +
  '</div>' +
'</div>' +
'</div>';

var buyOnlineDescriptiveTemplate =
	'<div class="retailer-block {wtb_display_name} {wtb_stock}">'+
		'<div class="logo">' +
			'<a aria-label="Buy Now on {wtb_display_name}" target="_blank" href="{store_deeplink_url}">' +
				'{wtb_logo_str}' +
			'</a>' +
   		'</div>' +
		'<div class="productname">' +
			'<p>{wtb_productname}</p>' +
		'</div>'+
		/*
		'<div class="productsize">' +
			'<p>{wtb_productsize}</p>' +
		'</div>'+
		*/
		'<div class="price">' +
			'<p>{wtb_onlinePrice}</p>' +
		'</div>'+
		'<div class="buy">' +
			'<a aria-label="Buy Now on {wtb_display_name}" class="btn btn-{wtb_stock}" target="_blank" href="{store_deeplink_url}">{wtb_buybuttontext}</a>' +
		'</div>'+
	'</div>';

var buyOnlineSimpleTemplate =
	'<div class="retailer-block {wtb_display_name} {wtb_stock}">'+
		'<div class="logo">' +
			'<a aria-label="Buy Now on {wtb_display_name}" target="_blank" href="{store_deeplink_url}">' +
				'{wtb_logo_str}' +
			'</a>' +
   		'</div>' +
		'<div class="price">' +
			'<a aria-label="Buy Now on {wtb_display_name}" href="{store_deeplink_url}" target="_blank">{wtb_onlinePrice}</a>' +
		'</div>'+
		'<div class="stock">' +
			'<p>{wtb_stock}</p>' +
		'</div>'+
		'<div class="buy">' +
			'<a aria-label="Buy Now on {wtb_display_name}" class="btn btn-{wtb_stock}" target="_blank" href="{store_deeplink_url}">{wtb_buybuttontext}</a>' +
		'</div>'+
	'</div>';

var buyLocalTemplate =
    '<div id="retailer_{wtb_retailerNameAndLocation}" class="retailer-block {wtb_attributeClass}" >' +
		'<div class="distance">' +
			'<div class="box" >' +
			'<div class="pin">'+
			    //'<i class="fa fa-map-marker" aria-hidden="true"></i>'+
				'<span id="{wtb_retailerNameAndLocation}_stock_pin" class="badge {wtb_titleTrim}_pin pin-no">' +
								
					'{wtb_counter}' +
				'</span></div>' +
				'<p>{wtb_distance} {wtb_distanceUnits}</p>' +
			'</div>' +
    	'</div>' +

		'<div class="details">' +
			'<img class="storeLogo" src="{wtb_logo}" alt=""/>' +
			'<h3 class="title" {wtb_titleStyle}><span class="counter">{wtb_counter} </span>{wtb_retailerName}</h3>' +
			'<p class="address">' +
				'{wtb_streetline1}, {wtb_city}, {wtb_state}, {wtb_postcode}' +
			'</p>' +
			'<p class="phone" {wtb_phoneStyle}>' +
				'<a aria-label="Call {wtb_retailerName} {wtb_streetline1} {wtb_city} {wtb_formatted_phone}" target="_top" href="tel://{wtb_phone}">{wtb_formatted_phone}</a>' +
			'</p>' +
			'<p class="directions">' +
				'<a href="{wtb_directions}" target="_blank" aria-label="Get Directions to {wtb_retailerName} {wtb_streetline1}, {wtb_city}, {wtb_state}, {wtb_postcode}">' +
					'{wtb_directionsLabel}' +
				'</a>' +
			'</p>' +			
		'</div>' +

		'<div class="options">' +
			'<div class="stock {wtb_stockType}" id="{wtb_retailerNameAndLocation}_stock">' +
				'<p class="price" >{wtb_onlinePrice}<br /></p>' +				
				'{wtb_statusDirect}' +
				'{wtb_statusOnDemand}' +
			'</div>' +
			'<p class="clickandcollect">' +
				'{wtb_clickandcollect}' +
			'</p>' +
			'<p class="hours">' +
				'{wtb_hours}' +
			'</p>' +	
			'{wtb_LocalPromotions}' +		
			'{wtb_BuyOnline}' +
			'{wtb_OnlineInfo}' +
		'</div>' +
    '</div>';

var buyLocalFullTemplate = 
	'<div class="row retailer-block no-gutters" >' +
		'<div class="col-sm-2 d-none d-sm-block">' +
			'<div class="box" >' + 
				'<span id="{wtb_retailerName}_stock_pin" class="badge {wtb_titleTrim}_pin">' +
				'<i class="material-icons">place</i>'+
					'{wtb_counter}' +
				'</span><br/>' +
			'</div>' +
		'</div>' +
		'<div class="col-6 details">' +
			'<h5 class="title" >' + 
				'{wtb_retailerName}' + 
			'</h5>' +
			'<p class="address">' +
				'{wtb_streetline1}, {wtb_city}<br />{wtb_state}, {wtb_postcode}' +
			'</p>' +
				'{wtb_phoneDisplay}' +
		'</div>' +
		'<div class="col-6 col-sm-4 options">' +
			'<div class="class="btn btn-showOnMap "" >' +
				'<b>Show On Map</b>' +
			'</div>' +
			'<div class="distance" id="{wtb_retailerName}_stock">' +
				'<b>{wtb_distance} mi</b>' +
			'</div>' +
			'<p class="directions">' +
				'<a href="{wtb_directions}" target="_blank" aria-label="Get Directions to {wtb_index} {wtb_title}">' + 
					'<i class="material-icons valign-center">' +
						'directions_car' +
					'</i>' +
					'<b>Directions</b>' +
				'</a>' +
			'</p>' +
		'</div>' +
	'</div>';

var featureCollapseTemplate = 
	'<div class="collapse" id="wtb-collapse" aria-expanded="false">' +
    	'<div class="card card-body">' +
			'{wtb_collapseContents}' +
        '</div>' +
    '</div>' +
  	'<a id="wtb-collapse-btn" role="button" class="collapsed btn btn-collapse" data-toggle="collapse" href="#wtb-collapse" aria-expanded="false" aria-controls="wtb-collapse">' +
    	'{wtb_collapseText}' +
	'</a>';

var featureCarouselTemplate = 
	'<div id="carouselSurround" class="splide">' +
		'<div class="splide__track">' +
			'<div class="splide__list">' +
			'</div>' +
        '</div>' +
    '</div>';
	
cachesearch = '';


$(document).ready(function(){

	// Build up config
	model = GetURLParameter("model");

	if ( model == '' ) model = GetURLParameter("modelname");

	initialModel = model;

	profileId = GetURLParameter("pid");

	productName = GetURLParameter("product");

	version = GetURLParameter("version");

	guidParam = GetURLParameter("guid");

	if ( GetURLParameter('WTBLogging') == 'on' )
		loggingEnabled = true;

	getProfileConfig();
});

function callPetsEvents(){
		//If we have the new PCAT parameters to skipLocal we do not send those events
		if(vnextTrackingEnabled == false){

			postPetsV2Event('ImpressionWidget', function(data){
				widgetImpressed = true;
				parsedData = JSON.parse(data)[0].PayloadData;
				userTrackingGuid = parsedData.UserTrackingId;
				widgetImpressionGuid = parsedData.WidgetImpressionId;
			});
		}
}

function initWidget() {

	WTBLogging('reached initWidget');

	setEnvironment();

    getProfileCSS();

	//getUTMParameters();
    
	setConfiguredCSS();

	addExternalJS();

	showHideParts();

	if ( ( widgetConfig.displayCategories != undefined && widgetConfig.displayCategories ) )
	{
		getCategoryDetails();
	}
	else if ( widgetConfig.displayCategoryProducts != undefined && widgetConfig.displayCategoryProducts )
	{
		displayCategoryProducts();
	}
	else
	{
		getOfferDetails();
	}

	addProfileLogo();

	processExtraParams();

	//showHideParts();

	customiseTextEntries();

	//getOfferDetails();

	addExternalPixels();

	addEventHandlers();
	
	if ( !widgetConfig.lateLoadMap && !mapLoaded ) 
	{
		WTBLogging('Loading GMaps from getProfileConfig');
		addGoogleMapsJS();	
	}
	else
	{
		$('.nav-tabs a[href="#offline"]').click(function(){
	
			//WTBLogging("Caught navTab click: " + widgetConfig.lateLoadMap + "|" + mapLoaded);
	
			if ( widgetConfig.lateLoadMap && !mapLoaded )
			{
				$('.wtb-local').show();
				$('#localSplashCover').hide();
	
				addGoogleMapsJS();
			}
		});

		//WTBLogging('Hiding the local animation');
		$('.localList-loading').hide();
		// clear list
		$('#localList').empty();
		$('#localList').append('<div class="oosmessage">' + widgetConfig.localInstructions + '</div>');
	}

	if ( widgetConfig.lateLoadMap )
	{
		widgetConfig.getCustomerLocation = false;
		widgetConfig.autoLocalSearch = false;
	}

	WTBLogging('leaving initWidget');
};


//**Map 
function initMap() {

	WTBLogging('Entered InitMap: ' + widgetConfig.startLatitude +', '+ widgetConfig.startLongitude);

	var mapOptions = {
	  center: {lat: widgetConfig.startLatitude, lng: widgetConfig.startLongitude},
	  zoom: widgetConfig.startZoom,
	  controlSize: 24
	}

	if ( widgetConfig.customMapStyle != undefined && widgetConfig.customMapStyle != '' )
	{
		var customStyles = [
			{
				'featureType': 'all',
				'elementType': 'geometry',
				'stylers': [
					{
						'color': widgetConfig.customMapStyle
					}
				]
			},
			{
				'featureType': 'all',
				'elementType': 'labels.text.fill',
				'stylers': [
					{
						'gamma': 0.01
					},
					{
						'lightness': 20
					}
				]
			},
			{
				'featureType': 'all',
				'elementType': 'labels.text.stroke',
				'stylers': [
					{
						'saturation': -31
					},
					{
						'lightness': -33
					},
					{
						'weight': 2
					},
					{
						'gamma': 0.8
					}
				]
			},
			{
				'featureType': 'all',
				'elementType': 'labels.icon',
				'stylers': [
					{
						'visibility': 'off'
					}
				]
			},
			{
				'featureType': 'landscape',
				'elementType': 'geometry',
				'stylers': [
					{
						'lightness': 30
					},
					{
						'saturation': 30
					}
				]
			},
			{
				'featureType': 'poi',
				'elementType': 'geometry',
				'stylers': [
					{
						'saturation': 20
					}
				]
			},
			{
				'featureType': 'poi.park',
				'elementType': 'geometry',
				'stylers': [
					{
						'lightness': 20
					},
					{
						'saturation': -20
					}
				]
			},
			{
				'featureType': 'road',
				'elementType': 'geometry',
				'stylers': [
					{
						'lightness': 10
					},
					{
						'saturation': -30
					}
				]
			},
			{
				'featureType': 'road',
				'elementType': 'geometry.stroke',
				'stylers': [
					{
						'saturation': 25
					},
					{
						'lightness': 25
					}
				]
			},
			{
				'featureType': 'water',
				'elementType': 'all',
				'stylers': [
					{
						'lightness': -20
					}
				]
			}
		];

		mapOptions.styles = customStyles;
	}

	if ( widgetConfig.customMapStyleJson != undefined && widgetConfig.customMapStyleJson != '' )
	{
		var customStyles = widgetConfig.customMapStyleJson;
		
		mapOptions.styles = customStyles;
	}

	if ( widgetConfig.showMapControls != undefined && widgetConfig.showMapControls != null)
	{
		if ( !widgetConfig.showMapControls )
		{
			mapOptions.disableDefaultUI = true;
		}
	}
	else
	{
		mapOptions.disableDefaultUI = true;
	}

	if ( widgetConfig.zoomControls != undefined && widgetConfig.zoomControls != null && widgetConfig.zoomControls != '' )
	{			
		mapOptions.zoomControl = true;

		if ( widgetConfig.zoomControls == "TOP_RIGHT" )
		{
			mapOptions.zoomControlOptions = { position: google.maps.ControlPosition.TOP_RIGHT }
		}
		else if ( widgetConfig.zoomControls == "TOP_LEFT" )
		{
			mapOptions.zoomControlOptions = { position: google.maps.ControlPosition.TOP_LEFT }
		}
		else if ( widgetConfig.zoomControls == "RIGHT_BOTTOM" )
		{
			mapOptions.zoomControlOptions = { position: google.maps.ControlPosition.RIGHT_BOTTOM }
		}
	}

	map = new google.maps.Map(document.getElementById('map'), mapOptions);

	if ( trackEvents ) { postPetsV2Event('MapLoad') };
	
	//var card = document.getElementById('pac-card');
	var textInput = document.getElementById('searchLocation');
	var searchInput = document.getElementById('search-icon');
	
	$('#rangeSelect').change(function(){

		var firstResult = $(".pac-container .pac-item:first").text();
        var searchInputBox = $("#searchBoxParent > input").val();

		WTBLogging('RangeSelect change: ' + firstResult + '|' + searchInputBox );

        if ( firstResult != "" ||  searchInputBox != "" )
			place_changed();
	});

	if ( widgetConfig.ignoreAutocomplete == undefined )
		widgetConfig.ignoreAutocomplete = false;

	if ( !widgetConfig.ignoreAutocomplete )
	{	
		if(textInput != null){
			selectFirstOnEnter(textInput);
		}
		
		var configWithoutRegions = { componentRestrictions: {country: widgetConfig.region} };
		var configWithRegions = { types: ['(regions)'], componentRestrictions: {country: widgetConfig.region} };

		var autoCompleteConfig = configWithoutRegions;

		if ( widgetConfig.autoCompleteRegions != undefined && widgetConfig.autoCompleteRegions != null && 
			 widgetConfig.autoCompleteRegions == true )
			autoCompleteConfig = configWithRegions;

		autoComplete = null;

		//WTBLogging('setting AutoComplete: ', autoCompleteConfig);
		//WTBLogging('setting AutoComplete textInput: ', textInput);

		autocomplete = new google.maps.places.Autocomplete(textInput, autoCompleteConfig);

		if ( trackEvents ) { postPetsV2Event("Autocomplete"); }

		// Bind the map's bounds (viewport) property to the autocomplete object,
		// so that the autocomplete requests use the current map bounds for the
		// bounds option in the request.
		//autocomplete.bindTo('bounds', map);

		// Set the data fields to return when the user selects a place.
		autocomplete.setFields(
			['address_components', 'geometry', 'icon', 'name']);

		autocomplete.addListener('place_changed', function() {
			//WTBLogging("AutoComplete listener - place_changed : " + inProgress);
			place_changed();
		});		
	}
	else
	{
		$('#searchLocation').on("keydown", function(event){ 

			WTBLogging('searchLocation keydown');

			if (event.which == 13) {

				currPostCode = $('#searchLocation').val();

				WTBLogging('searchLocation value: ', currPostCode);

				getOfferDetails();

				event.preventDefault();
			}
		});
	}

	google.maps.event.addListenerOnce(map, 'tilesloaded', function(){
    	// do something only the first time the map is loaded
    	//WTBLogging('Google Map fully loaded for the first time: ' + currMapZoom);
    	if ( widgetConfig.usePostcodeFiltering != undefined && widgetConfig.usePostcodeFiltering )
    	{
    		// Check if a search has happened
    		if ( currPostCode != '' ) currMapZoom = 12; 
    	}

		if ( $('.retailers-local .retailer-block').length != 0 ) {
			zoomMaptoMarkersBounds();
		} else {
			map.setZoom(widgetConfig.startZoom);
		}
	});

	// Sets a listener on a radio button to change the filter type on Places
	// Autocomplete.
	function setupClickListener(id, types) {
	  var radioButton = document.getElementById(id);
	  radioButton.addEventListener('click', function() {
		autocomplete.setTypes(types);
	  });
	}

	// initialise for directions if needed
	if ( widgetConfig.mapDirections != undefined && widgetConfig.mapDirections != null && widgetConfig.mapDirections )
	{
		directionsDisplay = new google.maps.DirectionsRenderer;
		directionsService = new google.maps.DirectionsService;

		postPetsV2Event("DirectionsLookup");

		var directionsInput = document.getElementById('startInput');

		directionsAutocomplete = new google.maps.places.Autocomplete(directionsInput,
						{		
        					componentRestrictions: {country: widgetConfig.region}
    					});

		// Set the data fields to return when the user selects a place.
		directionsAutocomplete.setFields(
			['address_components', 'geometry', 'icon', 'name']);

		directionsAutocomplete.addListener('place_changed', function() {
			if ( !inProgress ) generateDirections();
		});
	}

	if ( widgetConfig.getCustomerLocation != undefined && widgetConfig.getCustomerLocation != null && widgetConfig.getCustomerLocation )
	{
		WTBLogging('Calling getCustomerLocation');
		getCustomerLocation();	
	}

	$(document).trigger("WTBMapLoaded");
}

function zoomMaptoMarkersBounds () 
{
	var bounds = new google.maps.LatLngBounds();
	for (var i = 0; i < markers.length; i++) {
		bounds.extend(markers[i].getPosition());
	}
	map.fitBounds(bounds);
}

function addAutoComplete ()
{
	//var card = document.getElementById('pac-card');
	var textInput = document.getElementById('searchLocation');
	var searchInput = document.getElementById('search-icon');

	if(textInput != null){
		selectFirstOnEnter(textInput);
	}	
	$('#rangeSelect').change(function(){

		var firstResult = $(".pac-container .pac-item:first").text();
        var searchInputBox = $("#searchBoxParent > input").val();

        if ( firstResult != "" ||  searchInputBox != "" )
			place_changed();
	});

	var configWithoutRegions = { componentRestrictions: {country: widgetConfig.region} };
	var configWithRegions = { types: ['(regions)'], componentRestrictions: {country: widgetConfig.region} };

	var autoCompleteConfig = configWithoutRegions;

	if ( widgetConfig.autoCompleteRegions != undefined && widgetConfig.autoCompleteRegions != null && 
		 widgetConfig.autoCompleteRegions == true )
		autoCompleteConfig = configWithRegions;

	WTBLogging('setting AutoComplete: ', autoCompleteConfig);

	autocomplete = new google.maps.places.Autocomplete(textInput, autoCompleteConfig);

	if ( trackEvents ) { postPetsV2Event("Autocomplete"); }

	// Bind the map's bounds (viewport) property to the autocomplete object,
	// so that the autocomplete requests use the current map bounds for the
	// bounds option in the request.
	//autocomplete.bindTo('bounds', map);

	// Set the data fields to return when the user selects a place.
	autocomplete.setFields(
		['address_components', 'geometry', 'icon', 'name']);

	autocomplete.addListener('place_changed', function() {
		//WTBLogging("AutoComplete listener - place_changed : " + inProgress);
		place_changed();
	});

	// Sets a listener on a radio button to change the filter type on Places
	// Autocomplete.
	function setupClickListener(id, types) {
	  var radioButton = document.getElementById(id);
	  radioButton.addEventListener('click', function() {
		autocomplete.setTypes(types);
	  });
	}
}

function initialiseMap (currLat, currLong) 
{
	if ( mapInitialised ) return;

	var zoomLevel = 12;

	if ( currRange == 50 )
	{
		zoomLevel = 9;
	}
	else if ( currRange == 20 )
	{
		zoomLevel = 10;
	}
	else if ( currRange == 10 )
	{
		zoomLevel = 11;
	}

	if ( currLat == "" || currLong == "" || initialSearch ) {
		currLat = widgetConfig.startLatitude;
		currLong = widgetConfig.startLongitude;
		zoomLevel = widgetConfig.startZoom;
	}
	
	if ( map != undefined ) 
	{
		map.setZoom(zoomLevel);
		currMapZoom = zoomLevel;

		WTBLogging('Map SetCenter (1): ' + currLat +', '+  currLong);

		map.setCenter(new google.maps.LatLng( currLat,  currLong ));
		map.setMapTypeId(google.maps.MapTypeId.ROADMAP);
	
		var image = new google.maps.MarkerImage(
			'img/image.png',
			new google.maps.Size(34,46),
			new google.maps.Point(0,0),
			new google.maps.Point(17,46)
		);

		var shadow = new google.maps.MarkerImage(
			'img/shadow.png',
			new google.maps.Size(60,46),
			new google.maps.Point(0,0),
			new google.maps.Point(17,46)
		);
		  
		// clear all markers
		jQuery.each(markers,function(k,v){
			v.setMap(null);
		});	

		mapInitialised = true;
	}

	// clear list
	$('#localList').empty();
};

function getCustomerLocation () {
	navigator.geolocation.getCurrentPosition(
        function (position) {

        	WTBLogging('getCustomerLocation: checking lateLoadMap');
        	if ( widgetConfig.lateLoadMap && !mapLoaded )
        	{
        		widgetConfig.startLatitude = position.coords.latitude; 
        		widgetConfig.startLongitude = position.coords.longitude;
        		return;
        	}

            //GET USER CURRENT LOCATION                
            var locCurrent = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
            var geocoder = new google.maps.Geocoder();

			postPetsV2Event("Geocode");

            geocoder.geocode({'latLng': locCurrent}, function (results, status) {

            	WTBLogging('Place details: ', results);
            	var place = results[0];

            	if ( widgetConfig.showCountrySelect != undefined && widgetConfig.showCountrySelect )
            	{
            		if (place.address_components) {

            			var country = '';

            			// find country
            			for ( var i in place.address_components)
            			{
            				var component = place.address_components[i];

            				for ( var j in component.types )
            				{
            					var type = component.types[j];

            					if ( type == "country" ) country = component.long_name;
            				}
            			}
            			
            			var firstOpt = true;

            			for ( var i in widgetConfig.countrySelectOptions)
            			{
            				var opt = widgetConfig.countrySelectOptions[i];
            				
							WTBLogging('Place testing: ' + country + '|' + opt.Name);
            				if ( country.localeCompare(opt.Name, undefined, {sensitivity: 'base'}) == 0 && !firstOpt )
            				{
            					WTBLogging('Place switch to: ' + country);

								countryLookupFound = true;
            					
								var currentURL = window.location.href;
								var parameters = window.location.search.substring(1);

								if ( profileId != opt.PID )
								{
									var newURL = currentURL.replace(profileId, opt.PID);
									window.location.href = newURL;
								}

								break;
            				}

            				firstOpt = false;
            			}
            		}
            	}

            	/*
				  "showCountrySelect": true,
				  "countrySelectOptions": [
				      { "PID": "12033825", "Name": "United States" },
				      { "PID": "12033826", "Name": "Canada" }
				  ],
            	*/

                customerLocation = place.formatted_address;
                $("#searchLocation").val(customerLocation);

                var address = '';
				  	if (place.address_components) {
						address = [
					  		(place.address_components[0] && place.address_components[0].short_name || ''),
					  		(place.address_components[1] && place.address_components[1].short_name || ''),
					  		(place.address_components[2] && place.address_components[2].short_name || '')
						].join(' ');
				  	}

				currPlace = address;
				customerPlace = place;
				currPlaceDetails = place;

				if ( widgetConfig.autoLocalSearch )
				{
					if ( widgetConfig.usePostcodeFiltering != undefined && widgetConfig.usePostcodeFiltering )
					{
						for ( var i in place.address_components)
						{
							var component = place.address_components[i];
			
							for ( var j in component.types )
							{
								var type = component.types[j];
			
								if ( type == "postal_code" ) currPostCode = component.long_name;
							}
						}
			
						WTBLogging('place_changed PostCodeLookup: ' + currPostCode);
			
						if ( currPostCode == '' )
						{
							lookupZipCodeViaGoogle(currPlaceDetails.geometry.location.lat(), currPlaceDetails.geometry.location.lng());
						}
						else
						{
							var postCodeFilteringValid = true;
							if ( widgetConfig.usePostcodeFiltering != undefined && widgetConfig.usePostcodeFiltering && model == '' )
							{
								postCodeFilteringValid = false;
							}
							
							if ( postCodeFilteringValid )
							{
								$('#localList').hide();
									getOfferDetails();
							}
						}
					}
					else
					{
						WTBLogging('getCustomerLocation - running autoLocalSearch: ' + currPlace, place);
						$('#localList').hide();
						getOfferDetails();
					}
				}
            });

			WTBLogging('Map SetCenter (2): ', locCurrent);

			map.setCenter(locCurrent);
			
			map.setZoom(10);
			currMapZoom = 10;
            
        }, defaultGeo()
    );
};

function defaultGeo () {

	WTBLogging('DefaultGeo running');

	if ( !widgetConfig.lateLoadMap && mapLoaded )
    {
		WTBLogging('Map SetCenter (3): ' + widgetConfig.startLatitude +', '+  widgetConfig.startLongitude);
		if ( map != undefined)
		{
			map.setCenter(new google.maps.LatLng( widgetConfig.startLatitude,  widgetConfig.startLongitude));
			
			if ( $('.retailers-local .retailer-block').length != 0 ) {
				zoomMaptoMarkersBounds();
			} else {
				map.setZoom(widgetConfig.startZoom);
			}

			//map.setZoom(widgetConfig.startZoom);
			currMapZoom = widgetConfig.startZoom;
		}
	}
	
	if ( widgetConfig.autoLocalSearch != undefined && widgetConfig.autoLocalSearch )
		getOfferDetails();

	$(document).trigger("WTBCustomerLocationLoaded");
};

function selectFirstOnEnter(input){

	// store the original event binding function
	var _addEventListener = (input.addEventListener) ? input.addEventListener : input.attachEvent;

	// Simulate a 'down arrow' keypress on hitting 'return' when no pac suggestion is selected, and then trigger the original listener.
	function addEventListenerWrapper(type, listener) {

		if (type == "keydown") { 
	  		var orig_listener = listener;
	  		listener = function (event) {

				WTBLogging('Caught event listener: ', event);

	  			var suggestion_selected = $(".pac-item-selected").length > 0;

	  			//WTBLogging("Suggestion Count: " + suggestionCount);
	  			
	  			if (event.which == 13 && !suggestion_selected) {
		        	event.preventDefault();
					var simulated_downarrow = $.Event("keydown", { keyCode:40, which:40 });
	          		orig_listener.apply(input, [simulated_downarrow]);
	    		} else if (event.which == 13) {
	        		event.preventDefault();	
	    		}
	    		orig_listener.apply(input, [event]);
			};
		}

		// add the modified listener
		_addEventListener.apply(input, [type, listener]);
	}

	if (input.addEventListener) {
		input.addEventListener = addEventListenerWrapper;
	} else if (input.attachEvent) {
		    input.attachEvent = addEventListenerWrapper;
	}
} 

function place_changed() {

	if ( inProgress ) return;
	//WTBLogging("place_changed inProgress - true");
	inProgress = true;

	currPostCode = '';
	currState = '';

	if ( trackEvents ) { postPetsV2Event("Autocomplete"); };

	var firstResult = $(".pac-container .pac-item:first").text();
    var searchInputBox = $("#searchBoxParent > input").val();
	
    var lookupAddress = firstResult;

    if ( firstResult == "" ) lookupAddress = searchInputBox;

  	var place = autocomplete.getPlace();

  	var placeAddr = '';

  	if ( place != undefined && place.address_components != undefined ) {
  		placeAddr = place.address_components[0].short_name.toLowerCase();
  	}
	  
	var searchInputBox2 = $("#searchBoxParent > input").val();

    WTBLogging('place_changed: ' + firstResult + "|" + searchInputBox + "|" + placeAddr + '|' + searchInputBox2);

    if ( place == undefined || place.geometry == undefined )
    {
    	try {
			if ( $(".pac-container").css('display') == 'none' )
			{
				$('#localList').hide();
				getOfferDetails();
			}
			else
			{
				//WTBLogging('Caught - no place selected - triggering keydown move');
				var input = document.getElementById('searchLocation');

				google.maps.event.trigger(input, 'keydown', {keyCode:40});
				google.maps.event.trigger(input, 'keydown', {keyCode:13});

				$(".pac-container .pac-item:first").focus();
				$(".pac-container .pac-item:first").click();
			}
		
	        return false;
    	} catch (e) {

			var searchInputBox2 = $("#searchBoxParent > input").val();
			WTBLogging('place_changed - Caught error, calling getOfferDetails ', searchInputBox2);
			$('#localList').hide();
			getOfferDetails();
    	}
	}
  	else
  	{
  		place = autocomplete.getPlace();
		//WTBLogging('Found place: ', place);

		customerPlace = place;

	  	var address = '';
	  	if (place.address_components) {
			address = [
		  		(place.address_components[0] && place.address_components[0].short_name || ''),
		  		(place.address_components[1] && place.address_components[1].short_name || ''),
		  		(place.address_components[2] && place.address_components[2].short_name || '')
			].join(' ');
	  	}

	  	currPlace = address;
      	currPlaceDetails = place;
      	if ( widgetConfig.usePostcodeFiltering != undefined && widgetConfig.usePostcodeFiltering )
      	{
      		for ( var i in place.address_components)
			{
				var component = place.address_components[i];

				for ( var j in component.types )
				{
					var type = component.types[j];

					if ( type == "postal_code" ) currPostCode = component.long_name;
					if ( type == "administrative_area_level_1" ) currState = component.short_name;
				}
			}

			WTBLogging('place_changed PostCodeLookup: ' + currPostCode);

			if ( currPostCode == '' )
			{
				lookupZipCodeViaGoogle(currPlaceDetails.geometry.location.lat(), currPlaceDetails.geometry.location.lng());
			}
			else
			{
				var postCodeFilteringValid = true;
				if ( widgetConfig.usePostcodeFiltering != undefined && widgetConfig.usePostcodeFiltering && model == '' )
				{
					postCodeFilteringValid = false;
				}
				
				if ( postCodeFilteringValid )
				{
					$('#localList').hide();
      				getOfferDetails();
				}
			}
      	}
      	else
      	{
	  		//WTBLogging('found - lookup place: ', place);
			//WTBLogging('found - lookup currPalce: ', currPlace);

      		$('#localList').hide();
      		getOfferDetails();
      	} 	  		
  	}
};

function showMarkers() {
	setMapOnAll(map);
}

function clearMarkers() {
	setMapOnAll(null);
}

function deleteMarkers() {
	clearMarkers();
	
	// clear all markers
	var markerCount = markers.length
	for ( var i = 0; i < markerCount; i++ )
	{
		markers.pop();
	}

    if  ( widgetConfig.groupMapMarkers && markerCluster != undefined)
    {
    	markerCluster.clearMarkers();	
    }
}

function setMapOnAll(map) {

	for (var i = 0; i < markers.length; i++) {
		markers[i].setMap(map);
		markers[i].setVisible(false);
	}
}

function get_coordinate(address) {

	if( region == null || region == '' || region == 'undefined' ) {
		region = 'us';
	}

	if(address != '') {
		$('#ajax_msg').html('<p>Loading location</p>');

		postPetsV2Event("Geocode");

		geocoder.geocode( {'address':address, 'region':region}, function(results, status) {
		
			if(status == google.maps.GeocoderStatus.OK) {
				$('#ajax_msg').html('<p></p>');
			
				$('#latitude').val( results[0].geometry.location.lat() );
				$('#longitude').val( results[0].geometry.location.lng() );

				map.setZoom(10);

				WTBLogging('Map SetCenter (4): ', results[0].geometry.location);

				map.setCenter(results[0].geometry.location);

				var marker = new google.maps.Marker({
					map: map,
					position: results[0].geometry.location
				});
			} else {
				$('#ajax_msg').html('<p>Google map geocoder failed: '+status+'</p>');
			}
		});
	}
};

//**Libraries & Config
function loadJS (url, implementationCode, location) {
    //url is URL of external file, implementationCode is the code
    //to be called from the file, location is the location to 
    //insert the <script> element

    var scriptTag = document.createElement('script');
    scriptTag.src = url;

    scriptTag.onload = implementationCode;
    scriptTag.onreadystatechange = implementationCode;

    location.appendChild(scriptTag);
};

function loadMapJS (url, location) {
    //url is URL of external file, implementationCode is the code
    //to be called from the file, location is the location to 
    //insert the <script> element

    var scriptTag = document.createElement('script');
    scriptTag.src = url;
	/*
    scriptTag.onload = implementationCode;
    scriptTag.onreadystatechange = implementationCode;
	*/
    location.appendChild(scriptTag);
};

function jsLoadCallback(){
	WTBLogging("JS Code Loaded");
}

function addGoogleMapsJS () {
	var googleApiKeyDefault = 'AIzaSyBB7yYGz6-vbfmwf_hpeHY-GrWfi1eOXn0';

    if ( widgetConfig.googleApiKey == undefined || widgetConfig.googleApiKey == null || 
    	 widgetConfig.googleApiKey == '' ) 
    	widgetConfig.googleApiKey = googleApiKeyDefault;

    // handle working with maps locally
	if ( window.location.href.toLowerCase().indexOf('where-to-buy') == -1 ) 
	{
		widgetConfig.googleApiKey = 'AIzaSyDVFeALjwNnfYcB2dGM-1YSF5TJZXCaOus';
	}

	mapLoaded = true;

	var langConfig = '';

	if ( widgetConfig.googleLanguage != undefined && widgetConfig.googleLanguage != null )
	{
		langConfig = '&language=' + widgetConfig.googleLanguage;
	}

    loadMapJS('https://maps.googleapis.com/maps/api/js?key='+ widgetConfig.googleApiKey +'&libraries=geometry,places&callback=initMap' + langConfig, document.body);

    if  ( widgetConfig.groupMapMarkers )
    {
    	loadJS('https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js',
            jsLoadCallback, document.body);	
    }
}

function getProfileConfig () {

    lang = GetURLParameter("lang");
    if ( lang == "" ) lang = GetURLParameter("type");

    var dir = profileId;
    if ( lang != "" )
    {
        dir = profileId + "/" + lang;
	}
	
	var fullConfigUrl = configUrl.replace('{0}', dir);
    fullConfigUrl = fullConfigUrl.replace('{1}', profileId);

	$.ajax({
		url: fullConfigUrl,
		type: 'GET',
		success: function (data) { 
			widgetConfig = data;

			WTBLogging('getProfileConfig: ', widgetConfig);

			if ( widgetConfig.widgetType == undefined || widgetConfig.widgetType == null )
			{
				var sPageURL = window.location;

				if ( sPageURL.href.toLowerCase().indexOf("buyonlinebuylocalsingletab") != -1 )
				{
					widgetConfig.widgetType = "BuyOnlineBuyLocalSingleTab";
				}
				else
				{
					widgetConfig.widgetType = "BuyOnlineBuyLocal";
				}
			}

			if ( widgetConfig.region == undefined || widgetConfig.region == null ) widgetConfig.region = '';

			if ( widgetConfig.groupMapMarkers == undefined ) widgetConfig.groupMapMarkers = true;
			/*
			if ( widgetConfig.localFullRange == undefined || widgetConfig.localFullRange == null ) widgetConfig.localFullRange = false;
			*/
			if ( widgetConfig.distanceUnits != undefined && widgetConfig.distanceUnits != null ) 
			{
				distanceUnits = widgetConfig.distanceUnits;
				//if ( distanceUnits == "Kilometers" ) maxRange = maxRange * 1.6;
			}

			if ( widgetConfig.show24Hour != undefined && widgetConfig.show24Hour != null )
				show12Hour = !widgetConfig.show24Hour;

			if ( widgetConfig.campaignTag != undefined && widgetConfig.campaignTag != null && widgetConfig.campaignTag != '' )
				tag = widgetConfig.campaignTag;

			if ( widgetConfig.localInstructions == undefined || widgetConfig.localInstructions == "undefined" )
				widgetConfig.localInstructions = '';

			if ( widgetConfig.noLocalStock == undefined || widgetConfig.noLocalStock == "undefined" )
				widgetConfig.noLocalStock = '';

			var validOnlineRetailers = GetURLParameter("validOnlineRetailers");

			if (validOnlineRetailers != '') 
			{
				widgetConfig.onlineFiltering = true;
				widgetConfig.validOnlineRetailers = decodeURIComponent(validOnlineRetailers);
			}

			var paramTag = GetURLParameter("campaignTag");

			if ( paramTag != "" )
				tag = paramTag;

			var parentLookup = GetURLParameter("useParentLookup");
			
			if ( parentLookup != "" && parentLookup == "true" )
			{
				widgetConfig.useParentLookup = true;
			}

			if ( !widgetConfig.lateLoadMap && !mapLoaded ) 
			{
				WTBLogging('Loading GMaps from getProfileConfig');
				addGoogleMapsJS();	
			}
			/*
			else if ( countrySwitch )
			{
				WTBLogging('calling initMap from getProfileConfig');
				initMap();
			}
			*/
			else
			{
				//WTBLogging('Hiding the local animation');
				$('.localList-loading').hide();
				// clear list
				$('#localList').empty();
				$('#localList').append('<div class="oosmessage">' + widgetConfig.localInstructions + '</div>');
				/*
				WTBLogging('custerLocation: ' + widgetConfig.getCustomerLocation);

				if ( widgetConfig.getCustomerLocation != undefined && widgetConfig.getCustomerLocation != null && widgetConfig.getCustomerLocation )
				{
					WTBLogging('Calling getCustomerLocation');
					getCustomerLocation();	
				}
				*/
			}

			if ( widgetConfig.lateLoadMap )
			{
				widgetConfig.getCustomerLocation = false;
				widgetConfig.autoLocalSearch = false;
			}

			// Tracking should be off by default in the lower environments
			if ( window.location.href.toLowerCase().indexOf('https://where-to-buy.co') == -1 ) {
				WTBLogging('Setting trackEvents to false: ' + window.location.href.toLowerCase());
				trackEvents = false;
			}

			if (widgetConfig.trackEvents != undefined) trackEvents = widgetConfig.trackEvents;

			var trackParam = GetURLParameter("track");

			if ( trackParam != '' ) {
				if (trackParam == 'true') trackEvents = true;
				if (trackParam == 'false') trackEvents = false;
			}

			var inputType = 'text';

			//if ( widgetConfig.usePostcodeFiltering != undefined && widgetConfig.usePostcodeFiltering )
			//	inputType = 'number';

			searchFormTemplate = searchFormTemplate.replace('{0}', inputType);
			
			initWidget();
		}
	});
};

function getProfileCSS () {

    lang = GetURLParameter("lang");
    if ( lang == "" ) lang = GetURLParameter("type");

    var dir = profileId;
    if ( lang != "" )
    {
        dir = profileId + "/" + lang;
	}
	
	var fullConfigUrl = configUrl.replace('{0}', dir);

	$('head').append('<link rel="stylesheet" href="../config/'+dir+'/'+profileId+'-widget-style.css" type="text/css" />');
};

function setEnvironment () {

	var tempEnv = '';

	if ( widgetConfig.environment != undefined )
		tempEnv = widgetConfig.environment;

	if ( GetURLParameter("env") != '' )
		tempEnv = GetURLParameter("env");

	if ( tempEnv != "" && tempEnv.toLowerCase() != "prod" )
	{
		env = tempEnv;
		petsCall = petsCall.replace("pets", "pets-"+env);
		petsV2Call = petsV2Call.replace("pets", "pets-"+env);
		pcatOffersCall = pcatOffersCall.replace("productcatalog", "productcatalog-"+env);
		petsOAuth = petsOAuth.replace("locations", "locations-"+env);
		
		typeaheadUrl = typeaheadUrl.replace("plrss-data", "plrss-"+env);
	}
}

function GetURLParameter (sParam) {
	var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == sParam)
        {
            return sParameterName[1];
        }
    }
    return "";
};

function getUTMParameters () {
	var utmList = [];

	// Default paramStr
	var sPageURL = window.location.search.substring(1);

	WTBLogging('getUTMParameters (0) - ' + document.baseURI);

	// Work out if page is in an iFrame

	//document.referrer
	if ( inIframe() )
	{
		WTBLogging('getUTMParameters (1) - ' + getOriginUrl());
		var originURL = document.referrer;
		sPageURL = originURL.split('?')[1];
	}

	// handle not in an iFrame
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=');

		if ( sParameterName[0].indexOf('utm_') != -1 )
		{
			utmList[sParameterName[0]] = sParameterName[1];
		}
	}

	WTBLogging("getUTMParameters - utmList: ", utmList);
}

function inIframe () {
    try {
        return window.self !== window.top;
    } catch (e) {
        return true;
    }
}

function getOriginUrl() {
    var href = document.location.href;
    var referrer = document.referrer;
    // Check if window.frameElement not null
    if(window.frameElement) {
        href = window.frameElement.ownerDocument.location.href;
        // This one will be origin
        if(window.frameElement.ownerDocument.referrer != "") {
            referrer = window.frameElement.ownerDocument.referrer;
        }
    }
    // Compare if href not equal to referrer
    if(href != referrer) {
        // Take referrer as origin
        return referrer;
    } else {
        // Take href
        return href
    }
}

function GetPCATURLParameters () {
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');

    var pcatStr = '';

    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=')[0];
        sParameterName = sParameterName.toLowerCase();
		value = sURLVariables[i].split('=')[1];
        if (sParameterName.indexOf('pcat_') != -1)
        {
			if(sParameterName == 'pcat_vnexttracking_localwidget' || sParameterName =='pcat_vnexttracking_all'){
				vnextTrackingEnabled = true;
				if(value == "false"){
					vnextTrackingEnabled = false;
				}
				
			}else{
				pcatStr += '&' + sURLVariables[i];
			}
            

			
        }
    }
    return pcatStr;
};

function GetUTMParameters () {
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');

    var pcatStr = '';

    for (var i = 0; i < sURLVariables.length; i++)
    {
        var sParameterName = sURLVariables[i].split('=')[0];
        sParameterName = sParameterName.toLowerCase();

        if (sParameterName.indexOf('utm_') != -1)
        {
            pcatStr += '&' + sURLVariables[i];
        }
    }
    return pcatStr;
};

function addExternalJS () {
	if ( widgetConfig.addExternalJS != undefined && widgetConfig.addExternalJS != null && widgetConfig.addExternalJS )
	{
		lang = GetURLParameter("lang");
    	if ( lang == "" ) lang = GetURLParameter("type");

    	var dir = profileId;
    	if ( lang != "" )
    	{
	        dir = profileId + "/" + lang;
		}

		$.getScript( '../config/'+dir+'/'+profileId+'-extra.js', function () { 
			WTBLogging("External JS loaded") 
			$(document).trigger("ExternalJsLoaded");

			if ( typeof addExternalClickHandlers === "function")
			{
				addExternalClickHandlers();
			}
		});
	}
}

function addProfileLogo () {

	if ( widgetConfig.hideBrandLogo != undefined && widgetConfig.hideBrandLogo != null && widgetConfig.hideBrandLogo )
	{
		$('#brand_logo').hide();
	}
	else
	{
		lang = GetURLParameter("lang");
	    if ( lang == "" ) lang = GetURLParameter("type");

	    var dir = profileId;
	    if ( lang != "" )
	    {
	        dir = profileId + "/" + lang;
		}
		
		var fullConfigUrl = configUrl.replace('{0}', dir);

		$('#brand_logo').attr("src", "../config/"+dir+"/"+profileId+"-logo.png");	
	}
	
};

function processExtraParams() {
	if ( widgetConfig.extraParams != undefined && widgetConfig.extraParams != null )
	{
		var extras = widgetConfig.extraParams.split(',');

		for ( var i in extras )
		{
			var extra = extras[i];

			if ( extra == "style" )
			{
				var style = GetURLParameter("style");
				$('#wtb-container').addClass(style);
			}
		}
	}
}

function customiseTextEntries () {

	if ( widgetConfig.mapInput != undefined && widgetConfig.mapInput != null ) {
		$("#searchLocation").attr("placeholder", widgetConfig.mapInput).blur();
		$('#startInput').attr("placeholder", widgetConfig.mapInput).blur();
	}

	if  ( widgetConfig.localInstructions == undefined || widgetConfig.localInstructions == '' )
		widgetConfig.localInstructions = widgetConfig.noLocalStock;

	$('#localList').empty();
	$('#localList').append('<div class="oosmessage">' + widgetConfig.localInstructions + '</div>');	

	//WTBLogging('customiseTextEntries - noOnlineStock: ' + widgetConfig.noOnlineStock );

	if ( widgetConfig.noOnlineStock != undefined && widgetConfig.noOnlineStock != null )
		$('#' + onlineContainer + ' .oosmessage').html(widgetConfig.noOnlineStock);

	if ( widgetConfig.onlineTabName == undefined || widgetConfig.onlineTabName == null || widgetConfig.onlineTabName == '' )
		widgetConfig.onlineTabName = "Buy Online";

	if ( widgetConfig.localTabName == undefined || widgetConfig.localTabName == null || widgetConfig.localTabName == '' )
		widgetConfig.localTabName = "Find Locally";

	if ( widgetConfig.locationsTabName == undefined || widgetConfig.locationsTabName == null || widgetConfig.locationsTabName == '' )
		widgetConfig.locationsTabName = "Locations";

	if ( widgetConfig.directionsTabName == undefined || widgetConfig.directionsTabName == null || widgetConfig.directionsTabName == '' )
		widgetConfig.directionsTabName = "Directions";

	if ( widgetConfig.widgetType != "BuyOnlineBuyLocalSingleTab" )
	{
		$("#online-tab").text(widgetConfig.onlineTabName);
		document.getElementById("offline-tab").text = widgetConfig.localTabName;

		if ( document.getElementById("locations-tab") != null )
			document.getElementById("locations-tab").text = widgetConfig.locationsTabName;

		if ( document.getElementById("directions-tab") != null )
			document.getElementById("directions-tab").text = widgetConfig.directionsTabName;
	}

	if ( widgetConfig.localResultTemplate != undefined && widgetConfig.localResultTemplate != null && widgetConfig.localResultTemplate != '' )
	{
		buyLocalTemplate = widgetConfig.localResultTemplate;
	}

	if ( widgetConfig.onlineResultTemplate != undefined && widgetConfig.onlineResultTemplate != null && widgetConfig.onlineResultTemplate != '' )
	{
		//WTBLogging("buyOnlineTemplate set: " + widgetConfig.onlineResultTemplate);
		buyOnlineTemplate = widgetConfig.onlineResultTemplate;
	}

	if ( widgetConfig.disclaimerText != undefined && widgetConfig.disclaimerText != null )
	{
		$('.disclaimer').html(widgetConfig.disclaimerText);
	}

	if ( widgetConfig.distanceOptions == undefined && widgetConfig.distanceOptions == null )
	{
		widgetConfig.distanceOptions = [5,10,20,50];
	}

	if ( widgetConfig.buyNowLabel == undefined && widgetConfig.buyNowLabel == null )
	{
		widgetConfig.buyNowLabel = "Buy Now";
	}

	if ( widgetConfig.unavailableLabel == undefined && widgetConfig.unavailableLabel == null )
	{
		widgetConfig.unavailableLabel = "Unavailable";
	}

	if ( widgetConfig.startAddressLabel != undefined && widgetConfig.startAddressLabel != '' )
	{
		WTBLogging('setting startAddress to ' + widgetConfig.startAddressLabel);
		$('#startLabel').html(widgetConfig.startAddressLabel);
	}

	if ( widgetConfig.startInstruction != undefined && widgetConfig.startInstruction != '' )
	{
		WTBLogging('setting startStoreInstruction to ' + widgetConfig.startInstruction);
		$('#startStoreInstruction').html(widgetConfig.startInstruction);
	}

	var dropdownStr = '<select id="rangeSelect" name="rangeSelect" class="distance form-control">'; 

	var unitStr = "Miles";
	if ( widgetConfig.distanceUnits == "Kilometers" ) unitStr = "Km";

	if ( widgetConfig.distanceLabel != undefined && widgetConfig.distanceLabel != '' )
	{
		unitStr = widgetConfig.distanceLabel;
	}

	var optionBaseStr = '<option value="{distVal}">{distVal} ' + unitStr + '</option>';
	var optionSelectedBaseStr = '<option value="{distVal}" selected>{distVal} ' + unitStr + '</option>';

	for ( var i in widgetConfig.distanceOptions )
	{
		var distance = widgetConfig.distanceOptions[i];

		var distStr = optionBaseStr.replaceAll('{distVal}', distance);

		// Check if this should be marked as selected
		if ( widgetConfig.distanceDefault != undefined && widgetConfig.distanceDefault != null && 
			 widgetConfig.distanceDefault == distance)
		{
			distStr = optionSelectedBaseStr.replaceAll('{distVal}', distance);
		}

		dropdownStr += distStr;

		validDropdown = true;
	}

	dropdownStr += '</select>';

	$('#rangeSelect').remove();
	$('#searchBoxParent').append(dropdownStr);
	
}

function showHideParts () {
	var dropdownPlacement = "#wtbMapContainer";
	var defaultPlacement = true;

	var pageTitle = "Shoppable Media - Where To Buy";

	if ( widgetConfig.pageTitle != undefined && widgetConfig.pageTitle != null && widgetConfig.pageTitle != '' )
	{
		pageTitle = widgetConfig.pageTitle;
	}

	document.title = pageTitle;

	if ( widgetConfig.hideTitle != undefined && widgetConfig.hideTitle != null && widgetConfig.hideTitle )
	{
		$('.wtb-title').hide();
	}

	if ( widgetConfig.titleOverride != undefined && widgetConfig.titleOverride != null && widgetConfig.titleOverride != '' )
	{
		WTBLogging('titleOverride - adding detail: ' + widgetConfig.titleOverride);
		$('.wtb-title').html(widgetConfig.titleOverride);
		$('.wtb-title').show();
	}

	if ( widgetConfig.lateLoadMap != undefined && widgetConfig.lateLoadMap != null && widgetConfig.lateLoadMap )
	{
		$('.wtb-local').hide();
		$('#localSplashCover').show();
	}

	if ( widgetConfig.mapDirections == undefined || 
		(widgetConfig.mapDirections != undefined && widgetConfig.mapDirections != null && !widgetConfig.mapDirections) )
	{
		$('#localTabs').css('display','none');
	}

	if ( widgetConfig.variantDropdown != undefined && widgetConfig.variantDropdown != null && 
		 widgetConfig.variantDropdown == "swap" )
	{	
		//$('#searchBoxParent').remove();
		WTBLogging('searchFormTemplate added to .group');
		$('.group').append(searchFormTemplate);
		$('.map-search').hide();

		dropdownPlacement = '.group';
	}
	else if ( widgetConfig.variantDropdown != undefined && widgetConfig.variantDropdown != null && 
		 	  widgetConfig.variantDropdown == "localsearch" )
	{	
		//$('#searchBoxParent').remove();
		$('#wtbLocalResultsContainer').prepend(searchFormTemplate);
		//$('#wtbLocalResultsContainer').widgetConfig.variantLocation;
		$('.map-search').show();
		WTBLogging('Local Search Location (1): ' + dropdownPlacement);
		//dropdownPlacement = '#wtbLocalResultsContainer';
		defaultPlacement = true;
	}
	else
	{
		if ( widgetConfig.variantLocation != undefined && widgetConfig.variantLocation != null && widgetConfig.variantLocation != ''  )
		{
			dropdownPlacement = '#' + widgetConfig.variantLocation;
			defaultPlacement = true;
		}

		if ( widgetConfig.localSearchLocation != undefined && widgetConfig.localSearchLocation != null && widgetConfig.localSearchLocation != '' )
		{
			dropdownPlacement = widgetConfig.localSearchLocation;
			defaultPlacement = false;
		}

		WTBLogging('Local Search Location (2): ' + dropdownPlacement + '|' + defaultPlacement);

		//$('#searchBoxParent').remove();

		if ( defaultPlacement )
		{
			$(dropdownPlacement).prepend(searchFormTemplate);
		}
		else
		{
			$(dropdownPlacement).append(searchFormTemplate);
		}
	}

	if ( widgetConfig.localSearchFilters != undefined && widgetConfig.localSearchFilters != null )
	{
		//dropdownPlacement.append(widgetConfig.localSerachFilters);
		$('#location').prepend(widgetConfig.localSearchFilters);
	}

	if ( widgetConfig.localResultsExtra != undefined && widgetConfig.localResultsExtra != null && widgetConfig.localResultsExtra != '' )
	{
		//WTBLogging('applying localResultsExtra: ' + widgetConfig.localResultsExtra );
		$('#location').prepend(widgetConfig.localResultsExtra);
	}
/*
	if ( widgetConfig.localSearchLocation != undefined && widgetConfig.localSearchLocation != null )
	{
		WTBLogging('Adding locla search to: ' + widgetConfig.localSearchLocation);
		$(widgetConfig.localSearchLocation).append(searchFormTemplate);	
	}
*/
	if ( widgetConfig.hideTabs != undefined && widgetConfig.hideTabs != null && widgetConfig.hideTabs )
		$('.wtb-nav').css('display','none');

	var singleTabOpt = GetURLParameter("singleTab");

	if ( singleTabOpt != '' ) widgetConfig.singleTab = singleTabOpt;

	if ( widgetConfig.singleTab != undefined )
	{
		if ( widgetConfig.singleTab == 'local' )
		{
			$('.nav-tabs a[href="#online"]').hide();
		}
		else if ( widgetConfig.singleTab == 'online' )
		{
			$('.nav-tabs a[href="#offline"]').hide();
			widgetConfig.lateLoadMap = true;
		}
	}

	if ( widgetConfig.resultsSideBySide != undefined && widgetConfig.resultsSideBySide != null && widgetConfig.resultsSideBySide )
	{
		$('#myTabContent').removeClass();
		$('#myTabContent').addClass("tab-content col wtb-col-sm-6");

		$('#externalOnlineContent').removeClass();
		$('#externalOnlineContent').addClass("wtb-online wtb-col-sm-6");
		$('#externalOnlineContent').css('display', 'block');
        
		onlineContainer = "externalOnlineList";
		$('.nav-tabs a[href="#offline"]').tab('show');
		$('.wtb-nav').css('display','none');

		$('#searchLocation').on('click', function () {

			$('#myTabContent').removeClass();
			$('#myTabContent').addClass("tab-content col wtb-col-sm-12");
			$('#externalOnlineContent').removeClass();
			$('#externalOnlineContent').addClass("wtb-online wtb-col-sm-0");
        });
        
	}

	$('#searchLocation').on('click', function() {

		WTBLogging('Caught searchLocation click');

		$('#directionsSelect').show();
		$('#directionsLocations').hide();

		$('#directionRoute').html('');

		$( "#locations-tab" ).click();
	});

	var startTab = GetURLParameter("startTab");

	if ( (widgetConfig.startTab != undefined && widgetConfig.startTab != null && widgetConfig.startTab == "local" && startTab != "online") || startTab == "local" )
	{
		widgetConfig.startTab = "local";
		$('.nav-tabs a[href="#offline"]').tab('show');
    }
    else if ( (widgetConfig.startTab != undefined && widgetConfig.startTab != null && widgetConfig.startTab == "online") || startTab == "online" )
    {
    	widgetConfig.startTab = "online";
		$('.nav-tabs a[href="#online"]').tab('show');
    }

    if (  widgetConfig.footerHTML != undefined && widgetConfig.footerHTML != '' )
    {
    	$('.wtb-footer').html(widgetConfig.footerHTML);
    }

/*
    if (widgetConfig.startTab == "online")
    {
    	var localTab1 = $('.wtb-nav .nav .nav-item:last-child');
    	WTBLogging('localtab - jquery: ', localTab1);

    	var localTab = document.querySelector('.wtb-nav .nav .nav-item:last-child');
    	WTBLogging('localtab: ', localTab);

    	var displayStyle = localTab.currentStyle ? localTab.currentStyle.display :
                              getComputedStyle(localTab, null).getPropertyValue("display");

    	WTBLogging('displayStyle: ' + displayStyle);

        if ( displayStyle == 'none' ) widgetConfig.singleTab = "online";
    }
*/
    if ( widgetConfig.singleTab == "online" )
    {
    	widgetConfig.startLongitude = '';
    	widgetConfig.startLatitude = '';
    }

	if ( widgetConfig.featureCollapse != undefined && widgetConfig.featureCollapse != null && widgetConfig.featureCollapse)
	{
		if (widgetConfig.featureCollapseDiv != undefined && widgetConfig.featureCollapseDiv != null && 
			widgetConfig.featureCollapseText != undefined && widgetConfig.featureCollapseText != null )
		{
			var collapseContents = $('#'+widgetConfig.featureCollapseDiv).html();
			featureCollapseTemplate = featureCollapseTemplate.replace('{wtb_collapseContents}', collapseContents);
			featureCollapseTemplate = featureCollapseTemplate.replace('{wtb_collapseText}', widgetConfig.featureCollapseText);
			$('#'+widgetConfig.featureCollapseDiv).html(featureCollapseTemplate);
		}
	}

	if ( widgetConfig.useChildCarousel != undefined && widgetConfig.useChildCarousel )
	{
		$('.wtb-box').append(featureCarouselTemplate);
		$('#carouselSurround').hide();
	}

	if ( widgetConfig.tiktokEmbed != undefined && widgetConfig.tiktokEmbed != '' )
	{
		$('#location').html(widgetConfig.tiktokEmbed);
		$('#location').show();
		$('#wtbMapContainer').hide();
		$('.wtb-local').show();
	}

	if ( widgetConfig.CABranding != undefined && widgetConfig.CABranding != null && !widgetConfig.CABranding )
	{
		$('#CABranding').html('');
	}

	WTBLogging('showHideParts: ' + widgetConfig.showCountrySelect + '|' + widgetConfig.countrySelectOptions );

	if ( widgetConfig.showCountrySelect != undefined && widgetConfig.showCountrySelect )
	{
		var dropdownStr = '<select id="countrySelect" name="countrySelect" class="distance form-control">'; 

		var optionBaseStr = '<option value="{countryPID}">{countryName}</option>';
		var optionSelectedBaseStr = '<option value="{countryPID}" selected>{countryName}</option>';

		for ( var i in widgetConfig.countrySelectOptions )
		{
			var tempCountry = widgetConfig.countrySelectOptions[i];
			var countryStr = optionBaseStr.replace('{countryPID}', tempCountry.PID);

			if ( profileId == tempCountry.PID )
			{
				countryStr = optionSelectedBaseStr.replace('{countryPID}', tempCountry.PID);
			}

			countryStr = countryStr.replace('{countryName}', tempCountry.Name);

			dropdownStr += countryStr;
		}

		dropdownStr += '</select>';

		$('#countrySelect').remove();
		$('#countryOptions').append(dropdownStr);

		WTBLogging('CountrySelect dropdownStr: ' + dropdownStr);

		$('#countrySelect').change(function(){
			var newPID = $('#countrySelect').val();

			var currentURL = window.location.href;
			var parameters = window.location.search.substring(1);

			var newURL = currentURL.replace(profileId, newPID);

			if ( newURL.indexOf('&type=') != -1 )
			{
				var urlParts = newURL.split('&type=');

				newURL = urlParts[0];

				if (urlParts[1].indexOf('&') != -1 )
				{
					var extraParts = urlParts[1].split('&');
					
					for ( var i = 1; i < extraParts.length; i++)
					{
						newURL += '&'+extraParts[i];
					}
				}
			}
			else if ( newURL.indexOf('&lang=') != -1 )
			{
				var urlParts = newURL.split('&lang=');

				newURL = urlParts[0];

				if (urlParts[1].indexOf('&') != -1 )
				{
					var extraParts = urlParts[1].split('&');
					
					for ( var i = 1; i < extraParts.length; i++)
					{
						newURL += '&'+extraParts[i];
					}
				}
			}

			if ( newPID.trim() != '' && newPID.trim() != '-' )
				window.location.href = newURL;
		});
	}
}

function setConfiguredCSS () {
	if ( widgetConfig.mapContainerClass != undefined && widgetConfig.mapContainerClass != null )
	{
		WTBLogging('updating wtbMapContainer: ' + widgetConfig.mapContainerClass);

		$('#wtbMapContainer').removeClass();
		$('#wtbMapContainer').addClass(widgetConfig.mapContainerClass);
	}
	
	if ( widgetConfig.localResultsContainerClass != undefined && widgetConfig.localResultsContainerClass != null )
	{
		WTBLogging('updating wtbLocalResultsContainer: ' + widgetConfig.localResultsContainerClass);

		$('#wtbLocalResultsContainer').removeClass();
		$('#wtbLocalResultsContainer').addClass(widgetConfig.localResultsContainerClass);
	}
}

function addDropdownHandlers () {
	if ( ( widgetConfig.variantDropdown != undefined && widgetConfig.variantDropdown != null && 
		 widgetConfig.variantDropdown != "none" ) ||
		 ( widgetConfig.useCategoryDropdowns != undefined && widgetConfig.useCategoryDropdowns ) )
	{
		$( "#variantSelect" ).unbind();
		$( "#variantSelect" ).on('change', function () {
	  		model = $('#variantSelect').val();

	  		if ( attrVariantAdded )
			{
				var variantLabel = $("#variantSelect :selected").text();

				extraAttrDropDown = buildAttrVariantDropdown(extraVariantAttrLookup[variantLabel]);

				WTBLogging('attrVariantDropdown Update: ', extraAttrDropDown);

				$('#attrSelect').remove();
				$('.attrVariantText').remove();

				$(widgetConfig.extraVariantLocation).append(extraAttrDropDown);

				//currExtraAttr = $('#attrSelect').val();
				//extraAttrLookup = variantLabel +'-'+ currExtraAttr;
				//WTBLogging('Dropdown setting: ' + variantLabel +'-'+ currExtraAttr);
			}

			$('#localList').hide();

			WTBLogging('variantSelect - externalTrigger: ' + widgetConfig.useExternalTrigger + '|' + externalTrigger);

			var postCodeFilteringValid = true;

			WTBLogging('variantSelect - postCodeFiltering: '  + widgetConfig.usePostcodeFiltering + '|' + widgetConfig.postalCodeDefaults + '|' + currPostCode);

			if ( widgetConfig.usePostcodeFiltering != undefined && widgetConfig.usePostcodeFiltering && currPostCode == '' && 
			     widgetConfig.postalCodeDefaults != undefined && widgetConfig.postalCodeDefaults == 'none' )
			{
				postCodeFilteringValid = false;
			}

			// if useExternalTrigger and externalTrigger || !useExternalTrigger
			var useExternal = false;
			if ( widgetConfig.useExternalTrigger != undefined && widgetConfig.useExternalTrigger ) useExternal = true;
		
			if ( ( useExternal && externalTrigger ) || !useExternal ) {
				//if  ( postCodeFilteringValid )
				//{
					callPetsEvents();
					getOfferDetails();
				//}
	  		} 
		});
	}

	if ( attrVariantAdded )
	{
		WTBLogging('Adding attrSelect change event');

		$( "#attrSelect" ).off('change');
		$( "#attrSelect" ).on('change', function () {
	 		
	 		var variantLabel = $("#variantSelect :selected").text();
			currExtraAttr = $('#attrSelect').val();

			extraAttrLookup = cleanString(variantLabel +'-'+ currExtraAttr);

			WTBLogging('2 Dropdown setting: ' + variantLabel +'-'+ currExtraAttr);
	 		
	 		//buildVariantDropdown(currOfferData);
	 		//$(widgetConfig.extraVariantLocation).append(extraAttrDropDown);

	 		$('#attrSelect').val(currExtraAttr);

			WTBLogging('externalTrigger lookup ' + extraAttrLookup, extraVariantLookup);
			model = extraVariantLookup[extraAttrLookup];
			WTBLogging('externalTrigger model found: ' +  model);
		 
			getOfferDetails();

			return false;
		});
	}

	if ( widgetConfig.addCategoryListDropdown != undefined && widgetConfig.addCategoryListDropdown )
	{
		$( "#categorySelect" ).unbind();
		$( "#categorySelect" ).on('change', function () {
	  		var category = $('#categorySelect').val();

	  		WTBLogging('categorySelect change - selected category: ' + category);

			$('#onlineList').hide();
			$('.onlineList-loading').show();

			$('#localList').hide();
			$('.localList-loading').show();

			updateCategoryProductDropdown (category);
			
			$(document).on("WTBCategoryProductsLoaded", function() { 
				// Load the first product
				model = initialCategoryProduct.ModelIdentifier;
				getOfferDetails();
			});
			
		});
	}

    if (widgetConfig.startTab == "local" && widgetConfig.variantDropdown == "online")
    {
        $('#variantSelect').hide();
    }
    else if (widgetConfig.startTab == "local" && widgetConfig.variantDropdown == "swap")
    {
        $('.map-search').show();
        $('#variantSelect').hide();
    }
}

function addEventHandlers() {
	$( "#online-tab" ).on('click', function () {
		if ( widgetConfig.variantDropdown != undefined && widgetConfig.variantDropdown != null &&
			  (widgetConfig.variantDropdown == "online" || widgetConfig.variantDropdown == "both" ) )
		{
			$('#variantSelect').show();
		}
		else if ( widgetConfig.variantDropdown != undefined && widgetConfig.variantDropdown != null && 
			      widgetConfig.variantDropdown == "swap" )
		{
			$('#variantSelect').show();
			$('.map-search').hide();
		}
		else
		{
			$('#variantSelect').hide();
		}
	});

	$( "#offline-tab" ).on('click', function () {
		if ( widgetConfig.variantDropdown != undefined && widgetConfig.variantDropdown != null && 
			  (widgetConfig.variantDropdown == "local" || widgetConfig.variantDropdown == "both" ) )
		{
			$('#variantSelect').show();
		}
		else if ( widgetConfig.variantDropdown != undefined && widgetConfig.variantDropdown != null && 
			      widgetConfig.variantDropdown == "swap" )
		{
			$('#variantSelect').hide();
			$('.map-search').show();
		}
		else
		{
			$('#variantSelect').hide();
		}
	});

	$("#showLocal").on('click', function() {

		addGoogleMapsJS();

		if ( typeof localDisplayUpdate === "function" ) {
			WTBLogging('Calling: localDisplayUpdate');
			localDisplayUpdate();
		}
		
		$('#localSplashCover').hide();
		$('.wtb-local').show();
	});
	
	$('#search-icon').on('click', function(e){
		//place_changed();
		WTBLogging('triggering keyPress: ' + initialSearch, e);

		//if ( initialSearch ) return;

		var textInput = document.getElementById('searchLocation');
		var suggestionCount = $(".pac-container .pac-item").length;

		WTBLogging('currentLocation: ' + textInput.value);

		if ( suggestionCount > 0 )
		{
			// build "keydown" event
	    	var e = new KeyboardEvent( "keydown", { 
	    		bubbles:true, cancelable:true, 
	    		char:String.fromCharCode(13), 
	    		key:String.fromCharCode(13), 
	    		shiftKey:false, ctrlKey:false, altKey:false,
	    		keyCode: 13, key: "Enter", code: "Enter", which: "13" } );
	    	Object.defineProperty(e, 'keyCode', {get : function() { return this.keyCodeVal; } });     
	    	e.keyCodeVal = 13;
	    	textInput.dispatchEvent(e);
	    }
	    else
	    {
	    	place_changed();
	    }
	});

	$(document).on('externalTrigger', function() {
		WTBLogging('Setting externalTrigger to true');
		externalTrigger = true;

		if ( attrVariantAdded )
		{

	 		var variantLabel = $("#variantSelect :selected").text();
			currExtraAttr = $('#attrSelect').val();

			extraAttrLookup = cleanString(variantLabel +'-'+ currExtraAttr);

			WTBLogging('externalTrigger lookup ' + extraAttrLookup, extraVariantLookup);
			model = extraVariantLookup[extraAttrLookup];
			WTBLogging('externalTrigger model found: ' +  model);
		}

		getOfferDetails();
	});

	$(document).on('refreshLocalResults', function(){
		getOfferDetails();
	});
	
}

function addCategoryListDropdown() {

	var categoryURL = catalogBrandDetailsCall.replace('{0}', widgetConfig.brandID);
	categoryURL = categoryURL.replace('{1}', widgetConfig.brandLocale);
	categoryURL = categoryURL.replace('{2}', widgetConfig.brandLanguage);

	WTBLogging('addCategoryListDropdown - calling catalogMetadataCall');

	$.ajax({
		url: catalogMetadataCall,
		type: 'GET',
		beforeSend: function (xhr) {
			/* Authorization header */
			xhr.setRequestHeader("Authorization", 'api-key ' + widgetConfig.brandAuth);
		},
		success: function (data) {
			WTBLogging('brandMetdata lookup', data);
		
			$.ajax({
				url: categoryURL,
				type: 'GET',
				beforeSend: function (xhr) {
					/* Authorization header */
					xhr.setRequestHeader("Authorization", 'api-key ' + widgetConfig.brandAuth);
				},
				success: function (data) {
					WTBLogging('buildCategoryDropdown (1) - Category Data: ', data);

					buildCategoryListDropdown(data);
				}
			});
		}
	});
}

function getCategoryDetails() {

	//var catalogMetadataCall = "https://productcatalog.channeladvisor.com/api/v1/multibrand/metadata";
	//var catalogBrandDetailsCall = "https://productcatalog.channeladvisor.com/api/v1/multibrand/{0}/details?countryCode={1}&languageCode={2}";
	//var catalogBrandProductsDetailsCall = "https://productcatalog.channeladvisor.com/api/v1/multibrand/{0}}/products?countryCode={1}&languageCode={2}&categories={3}";

	var categoryURL = catalogBrandDetailsCall.replace('{0}', widgetConfig.brandID);
	categoryURL = categoryURL.replace('{1}', widgetConfig.brandLocale);
	categoryURL = categoryURL.replace('{2}', widgetConfig.brandLanguage);

	var previousButton = undefined;

	WTBLogging('getCategoryDetails - calling catalogMetadataCall');

	$.ajax({
		url: catalogMetadataCall,
		type: 'GET',
		beforeSend: function (xhr) {
			/* Authorization header */
			xhr.setRequestHeader("Authorization", 'api-key ' + widgetConfig.brandAuth);
		},
		success: function (data) {
			WTBLogging('brandMetdata lookup', data);
		
			$.ajax({
				url: categoryURL,
				type: 'GET',
				beforeSend: function (xhr) {
					/* Authorization header */
					xhr.setRequestHeader("Authorization", 'api-key ' + widgetConfig.brandAuth);
				},
				success: function (data) {
					WTBLogging('buildCategoryDropdown (2) - Category Data: (' + data.CategoryCode +')' , data);

					for(var catData of data.Categories){

						var catStr = categoryDisplayTemplate;

						catStr = catStr.replace('{wtb_logo_str}', '../../config/12036061/catalog/images/'+catData.Code+'.png');
						catStr = catStr.replace('{wtb_cat_str}', catData.Name);
						catStr = catStr.replace('{wtb_cat_code}', catData.Code);
						catStr = catStr.replace('{wtb_cat_show}', 'Show More');

						$('#onlineList').append(catStr);
					}

					$('.category-block .show').on('click', function(){
						var catAttr = $(this).attr('attr-category');

						var categoryProductURL = catalogBrandProductsDetailsCall.replace('{0}', widgetConfig.brandID);
						categoryProductURL = categoryProductURL.replace('{1}', widgetConfig.brandLocale);
						categoryProductURL = categoryProductURL.replace('{2}', widgetConfig.brandLanguage);
						categoryProductURL = categoryProductURL.replace('{3}', catAttr);

						if ( $('#catViewer').html() != undefined ) {
							$('#catViewer').remove();
						}

						if ( previousButton != undefined )
						{
							$('#catViewer').hide();
							$(previousButton).css('margin-bottom', '0px');
						}
 
						var positionDetail = $(this).position();
						var parentOffset = $(this).parent().parent().offset();
						var parentScroll = $(this).parent().parent().scrollTop();
						var parentPostion = $(this).parent().parent().position();
						var parentHeight = $(this).parent().parent().innerHeight();

						WTBLogging('postioningDetail: ' + parentScroll + '|' + parentOffset.top +'|'+ parentPostion.top +'|'+ positionDetail.top + '|' + parentHeight);

						$(this).css('margin-bottom', '220px');
						previousButton = this;
						
						$.ajax({
							url: categoryProductURL,
							type: 'GET',
							beforeSend: function (xhr) {
								/* Authorization header */
								xhr.setRequestHeader("Authorization", 'api-key ' + widgetConfig.brandAuth);
							},
							success: function (data) {
								WTBLogging('categoryProductsLookup (click)', data);
					
								if ( widgetConfig.useExternalCategoryProductFiltering != undefined && widgetConfig.useExternalCategoryProductFiltering != null && 
									widgetConfig.useExternalCategoryProductFiltering && typeof filterCategoryProducts === "function" )
								{
									data.Products = filterCategoryProducts(data.Products);
									WTBLogging('getCategoryDetails filtered products: ', data.Products);
								}

								//{wtb_prodImage_str}, {wtb_cat_model}, {wtb_cat_product_label}
								
								WTBLogging('catViewer setup (click)', $('#catViewer').html());
									
								$('#onlineList').append('<div id="catViewer"></div>');
								$('#catViewer').show();
			
								for(var catProduct of data.Products){

									var productStr = categoryProductTemplate;
			
									productStr = productStr.replace('{wtb_prodImage_str}', catProduct.ImageUrl);
									productStr = productStr.replace('{wtb_cat_str}', catProduct.Name);
									productStr = productStr.replace('{wtb_cat_model}', catProduct.ModelIdentifier);
									productStr = productStr.replace('{wtb_cat_product_label}', 'Buy Now');
			
									$('#catViewer').append(productStr);

									$('#catViewer').css('top', (parentOffset.top + parentHeight + 100) + 'px');

									$('.category-product .show').on('click', function() {
										var modelStr = $(this).attr('attr-model');
										var iFrameURL = "https://where-to-buy.co/widgets/core/BuyOnlineBuyLocalV2/index.html?pid=12036061&type=redesign&model="+modelStr;
										
										var modalStr = 
										    '<div class="modal" id="myModal"><div class="modal-dialog">' +
    											'<div class="modal-content">' +
      												'<div class="modal-header">' +
        												'<h4 class="modal-title">Modal Heading</h4>' +
        													'<button type="button" class="close" data-dismiss="modal">&times;</button>' +
      												'</div>' +
      												'<div class="modal-body">' +
        												'<iframe style="width: 100%; height: 600px; border: 0px" src="'+iFrameURL+'"></iframe>' +
      												'</div>' +
    											'</div>' +
  											'</div>';

										$('#myModal').remove();
										$('body').append(modalStr);
										$('#myModal').modal('show'); 
									});
								}
							}
						});
					});
				}
			});
		}
	});
};

function displayCategoryProducts () {
	var categoryProductURL = catalogBrandProductsDetailsCall.replace('{0}', widgetConfig.brandID);
	categoryProductURL = categoryProductURL.replace('{1}', widgetConfig.brandLocale);
	categoryProductURL = categoryProductURL.replace('{2}', widgetConfig.brandLanguage);
	categoryProductURL = categoryProductURL.replace('{3}', widgetConfig.brandDropdownCategory);

	WTBLogging('displayCategoryProducts - calling catalogMetadataCall');

	$.ajax({
		url: catalogMetadataCall,
		type: 'GET',
		beforeSend: function (xhr) {
			/* Authorization header */
			xhr.setRequestHeader("Authorization", 'api-key ' + widgetConfig.brandAuth);
		},
		success: function (data) {
			WTBLogging('brandMetdata lookup', data);

			var categoryDetailsURL = catalogBrandDetailsCall.replace('{0}', widgetConfig.brandID);
			categoryDetailsURL = categoryDetailsURL.replace('{1}', widgetConfig.brandLocale);
			categoryDetailsURL = categoryDetailsURL.replace('{2}', widgetConfig.brandLanguage);

			$.ajax({
				url: categoryDetailsURL,
				type: 'GET',
				beforeSend: function (xhr) {
					/* Authorization header */
					xhr.setRequestHeader("Authorization", 'api-key ' + widgetConfig.brandAuth);
				},
				success: function (data) {  
		
				$.ajax({
					url: categoryProductURL,
					type: 'GET',
					beforeSend: function (xhr) {
						/* Authorization header */
						xhr.setRequestHeader("Authorization", 'api-key ' + widgetConfig.brandAuth);
					},
					success: function (data) {
						WTBLogging('Category Products Data: ' , data);

						if ( widgetConfig.useExternalCategoryProductFiltering != undefined && widgetConfig.useExternalCategoryProductFiltering != null && 
							widgetConfig.useExternalCategoryProductFiltering && typeof filterCategoryProducts === "function" )
						{
							data.Products = filterCategoryProducts(data.Products);
							WTBLogging('displayCategoryProducts filtered products: ', data.Products);
						}

						var modelStr = '';
						modelCount = 0;
						offerCallCount = 0;

						for(var catProduct of data.Products) {
							
							if ( modelStr != '' ) modelStr += ',';
							modelStr += catProduct.ModelIdentifier;
							modelCount++;
							
							// Check if multiples of 10
							if ( modelCount % 10 == 0 )
							{
								console.log('Category products - modelStr: ' + modelStr);
								makeMultiProductCall(modelStr);

								modelStr = '';
								modelCount = 0;
								offerCallCount++;
							}
						}

						if ( modelCount > 0 )
						{
							console.log('Category products - modelStr: ' + modelStr);
							makeMultiProductCall(modelStr);

							modelCount = 0;
							offerCallCount++;
						}

						var timeoutVal = (150 * offerCallCount);
						console.log('Category products - timeoutVal: ' + timeoutVal);

						setTimeout(function() {
							$(document).trigger("WTBOnlineLoaded");
										
							// Set Visibility
							$('.wtb-box-loading').hide();
							$('.wtb-box').show();
							$('.disclaimer').show();
						}, 300);
					}
				});
				
			  }
		    });
		}
	});
}

function makeMultiProductCall(modelStr) {

	model = modelStr;
						
	if ( model.indexOf(',') != -1 ) 
	{
		pcatOffersCall = pcatOffersCall.replace('models', 'modellist');
	}

	pcatOfferUrl = pcatOffersCall.replace('{0}', model);

	var maxLocationsPerRetailer = 25;
	var maxResultsPerRetailer = 25;
	
	pcatOfferUrl = pcatOfferUrl.replace('{1}', maxLocationsPerRetailer);
	pcatOfferUrl = pcatOfferUrl.replace('{2}', maxResultsPerRetailer);

	if ( tag != "brandsite" )
	{
		pcatOfferUrl += "&tag=" + tag;
	}

	// need productImnages to be pulled in
	pcatOfferUrl += '&IncludeVariations=true';

	var widgetParams = GetWidgetParams();

	$.ajax({
		url: pcatOfferUrl,
		type: 'GET',
		beforeSend: function (xhr) {
			/* Authorization header */
			xhr.setRequestHeader("Authorization", 'api-key ' + widgetConfig.WTBAuthToken);
			xhr.setRequestHeader("CA-RequestSource", widgetParams);
		},
		success: function (data) { 

			WTBLogging('CategoryProducts data: ', data);

			for(var i = 0; i < data.Products.length; i++){

				var prodData = data.Products[i];

				WTBLogging('CategoryProducts prodData: ' + 1, prodData);

				var productStr = categoryProductTemplate;

				var productImg = prodData.ProductImage != null ? prodData.ProductImage : "";

				WTBLogging('categoryProducts - productIamge setting: ' +  widgetConfig.productImageAttribute);

				if ( widgetConfig.productImageAttribute != undefined && widgetConfig.productImageAttribute != '' )
				{
					var attrVal = getProductAttributeValue(prodData, widgetConfig.productImageAttribute);
					if ( attrVal != '' ) productImg = attrVal;

					WTBLogging('ProductImage Src: ' + productImg +'|'+ widgetConfig.productImageAttribute);
				}

				productStr = productStr.replace('{wtb_prodImage_str}', productImg);
				productStr = productStr.replace('{wtb_product_str}', prodData.Description);
				productStr = productStr.replace('{wtb_product_model}', prodData.ModelName);
				productStr = productStr.replace('{wtb_product_name}', prodData.ModelName);
				productStr = productStr.replace('{wtb_stock}', "inStock");

				var buyNowStr =  '<span id="{wtb_display_name}BuyNow">' +
					'<a href="{store_deeplink_url}" target="_blank" class="btn btn-buynow {wtb_availability}" data-retailer="{wtb_display_name}" aria-label="Buy Now from {wtb_display_name}">' +
						'{wtb_buybuttontext}' +
					'</a>' +
				'</span>';

				if ( prodData.OnlineRetailers != undefined && prodData.OnlineRetailers.length > 0 )
				{
					var retailer = prodData.OnlineRetailers[0];

					buyNowStr = buyNowStr.replaceAll('{wtb_display_name}', retailer.DisplayName);
					buyNowStr = buyNowStr.replace('{store_deeplink_url}', retailer.ProductLink);
					buyNowStr = buyNowStr.replace('{wtb_availability}', "inStock");
					buyNowStr = buyNowStr.replace('{wtb_buybuttontext}', "Buy Now");

					productStr = productStr.replace('{wtb_cat_product_label}', buyNowStr);
					
					$('#onlineList').append(productStr);
				}
			}
			
			$(document).trigger("WTBOnlineLoaded");
						
			// Set Visibility
			$('.wtb-box-loading').hide();
			$('.wtb-box').show();
			$('.disclaimer').show();
		}
	});
};

function getCategoryProducts () {
	
	//var catalogMetadataCall = "https://productcatalog.channeladvisor.com/api/v1/multibrand/metadata";
	//var catalogBrandDetailsCall = "https://productcatalog.channeladvisor.com/api/v1/multibrand/{0}/details?countryCode={1}&languageCode={2}";
	//var catalogBrandProductsDetailsCall = "https://productcatalog.channeladvisor.com/api/v1/multibrand/{0}/products?countryCode={1}&languageCode={2}&categories={3}";

	var categoryURL = catalogBrandDetailsCall.replace('{0}', widgetConfig.brandID);
	categoryURL = categoryURL.replace('{1}', widgetConfig.brandLocale);
	categoryURL = categoryURL.replace('{2}', widgetConfig.brandLanguage);

	WTBLogging('getCategoryProducts - calling catalogMetadataCall');

	//console.trace('getCategoryProducts trace');

	if ( runningCategoryLookup ) {
		WTBLogging('getCategoryProducts - blocked attempt to make product call');
		return;
	}

	runningCategoryLookup = true;
	
	$.ajax({
		url: catalogMetadataCall,
		type: 'GET',
		beforeSend: function (xhr) {
			/* Authorization header */
			xhr.setRequestHeader("Authorization", 'api-key ' + widgetConfig.brandAuth);
		},
		success: function (data) {
			WTBLogging('brandMetdata lookup', data);
		
			$.ajax({
				url: categoryURL,
				type: 'GET',
				beforeSend: function (xhr) {
					/* Authorization header */
					xhr.setRequestHeader("Authorization", 'api-key ' + widgetConfig.brandAuth);
				},
				success: function (data) {
					WTBLogging('buildCategoryDropdown (3) - Category Data: (' + currOfferData.CategoryCode +')' , data);
					
					if ( widgetConfig.brandDropdownCategory == 'all' )
					{
						var catCount = 0;
						var returnCount = 0;
						var allProducts = [];

						for( var catData of data.Categories ) 
						{
							catCount++;

							var categoryProductURL = catalogBrandProductsDetailsCall.replace('{0}', widgetConfig.brandID);
							categoryProductURL = categoryProductURL.replace('{1}', widgetConfig.brandLocale);
							categoryProductURL = categoryProductURL.replace('{2}', widgetConfig.brandLanguage);
							categoryProductURL = categoryProductURL.replace('{3}', catData.Code);
						
							$.ajax({
								url: categoryProductURL,
								type: 'GET',
								beforeSend: function (xhr) {
									/* Authorization header */
									xhr.setRequestHeader("Authorization", 'api-key ' + widgetConfig.brandAuth);
								},
								success: function (data) {
									//WTBLogging('categoryProductsLookup - getAll', data);

									returnCount++;

									for ( var tmpProduct of data.Products )
									{
										allProducts[allProducts.length] = tmpProduct;
									}

									if (returnCount == catCount)
									{
										WTBLogging('categoryProductsLookup result: ', allProducts);

										if ( widgetConfig.useExternalCategoryProductFiltering != undefined && widgetConfig.useExternalCategoryProductFiltering != null && 
											widgetConfig.useExternalCategoryProductFiltering && typeof filterCategoryProducts === "function" )
									   	{
											allProducts = filterCategoryProducts(allProducts);
											WTBLogging('categoryProductsLookup filtered products: ', allProducts);
									 	}

										data.Products = allProducts;
										buildCategoryDropdown(data);
										
										if ( widgetConfig.categoryLoadFirstProduct != undefined && widgetConfig.categoryLoadFirstProduct )
										{
											//if  ( model == undefined || model == null || model == '' ) 
											//{
												model = data.Products[0].ModelIdentifier;
												getOfferDetails();
											//}
										}
										
										$(document).trigger('WTBCategoryLoaded');
									}

								}
							});
						}
					}
					else 
					{
					
						var categoryCode = '';

						WTBLogging('brandDropdownCategory: ' + widgetConfig.brandDropdownCategory )

						if ( widgetConfig.brandDropdownCategory != undefined && widgetConfig.brandDropdownCategory != '' && 
						     widgetConfig.brandDropdownCategory.indexOf('attr_') == -1 )
						{
							var lookupVal = widgetConfig.brandDropdownCategory;

							for(var catData of data.Categories){

								if ( catData.Name == lookupVal )
								{
									categoryCode = catData.Code;
								}
							}
						}
						else if ( widgetConfig.brandDropdownCategory != undefined && widgetConfig.brandDropdownCategory != '' && 
								  widgetConfig.brandDropdownCategory.indexOf('attr_') != -1 ) 
						{
							var lookupAttr = widgetConfig.brandDropdownCategory.replace('attr_', '');

							WTBLogging('brandDropdownCategory lookupCat: ' + lookupAttr)

							var lookupVal = currOfferData.Attributes[lookupAttr];

							for(var catData of data.Categories){

								if ( catData.Name == lookupVal )
								{
									categoryCode = catData.Code;
								}
							}
						}
						else
						{
							for(var catData of data.Categories){

								if ( catData.Code == currOfferData.CategoryCode )
								{
									categoryCode = catData.Code;
								}
							}
						}

						WTBLogging('categoryCode: ' + categoryCode);

						if ( categoryCode != '' )
						{
							var categoryProductURL = catalogBrandProductsDetailsCall.replace('{0}', widgetConfig.brandID);
							categoryProductURL = categoryProductURL.replace('{1}', widgetConfig.brandLocale);
							categoryProductURL = categoryProductURL.replace('{2}', widgetConfig.brandLanguage);
							categoryProductURL = categoryProductURL.replace('{3}', categoryCode);

							$.ajax({
								url: categoryProductURL,
								type: 'GET',
								beforeSend: function (xhr) {
									/* Authorization header */
									xhr.setRequestHeader("Authorization", 'api-key ' + widgetConfig.brandAuth);
								},
								success: function (data) {
									WTBLogging('categoryProductsLookup', data);
			
									if ( widgetConfig.useExternalCategoryProductFiltering != undefined && widgetConfig.useExternalCategoryProductFiltering != null && 
										widgetConfig.useExternalCategoryProductFiltering && typeof filterCategoryProducts === "function" )
									{
										data.Products = filterCategoryProducts(data.Products);
										WTBLogging('getCategoryProducts filtered products: ', data.Products);
									}

									buildCategoryDropdown(data);
								}
							});
						}
					}
	
					runningCategoryLookup = false;
				}
			});
		}
	});
};

function updateCategoryProductDropdown (categoryCode) {
	var categoryProductURL = catalogBrandProductsDetailsCall.replace('{0}', widgetConfig.brandID);
	categoryProductURL = categoryProductURL.replace('{1}', widgetConfig.brandLocale);
	categoryProductURL = categoryProductURL.replace('{2}', widgetConfig.brandLanguage);
	categoryProductURL = categoryProductURL.replace('{3}', categoryCode);

	$.ajax({
		url: categoryProductURL,
		type: 'GET',
		beforeSend: function (xhr) {
			/* Authorization header */
			xhr.setRequestHeader("Authorization", 'api-key ' + widgetConfig.brandAuth);
		},
		success: function (data) {
			WTBLogging('categoryProductsLookup', data);

			if ( widgetConfig.useExternalCategoryProductFiltering != undefined && widgetConfig.useExternalCategoryProductFiltering != null && 
				widgetConfig.useExternalCategoryProductFiltering && typeof filterCategoryProducts === "function" )
			{
				data.Products = filterCategoryProducts(data.Products);
				WTBLogging('updateCategoryProductDropdown filtered products: ', data.Products);
			}

			buildCategoryDropdown(data);

			// Load the first product
			initialCategoryProduct = data.Products[0];
			$(document).trigger('WTBCategoryProductsLoaded');
		}
	});
};

function buildCategoryDropdown (data) {
	var validDropdown = false;

    var dropdownStr = '<select id="variantSelect" name="variantSelect" tabindex="2">'; //onChange="updateModel"

	var optionBaseStr = '<option {selected} data-desc="{ddDataDesc}" data-src="{ddSource}" data-attr-size="{ddSize}" label="{ddLabel}" value="{ddValue}">{ddDesc}</option>';
	
	for ( var p in data.Products )
	{
		var product = data.Products[p];

		WTBLogging("variant product: ", product);

		var selectStr = product.Description;

		var selectedStr = '';

		if ( product.ModelIdentifier == currOfferData.ModelCode ) selectedStr = 'selected';

		var productStr = optionBaseStr.replace('{ddLabel}', selectStr);
		productStr = productStr.replace('{ddDesc}', selectStr);
		productStr = productStr.replace('{ddValue}', product.ModelIdentifier);
		productStr = productStr.replace('{ddDataDesc}', product.Description);
		productStr = productStr.replace('{ddSource}', selectStr);
		productStr = productStr.replace('{selected}', selectedStr);

		dropdownStr += productStr;

		validDropdown = true;		
	}

	dropdownStr += '</select>';

	if ( widgetConfig.variantText != undefined && widgetConfig.variantText != "" )
	{
		dropdownStr = '<label for="variantSelect" class="variantText" style="display: block">' + widgetConfig.variantText + "</label> " + dropdownStr;
	}

	var placementStr = '.product_dropdown';

	if ( widgetConfig.dropdownLocation != undefined && widgetConfig.dropdownLocation != '' )
		placementStr = widgetConfig.dropdownLocation;

	WTBLogging('variantDropdown placementStr: ' + placementStr);
			
	$('.variantText').remove();
	$('#variantSelect').remove();

	$(placementStr).append(dropdownStr);

	variantDropdownLoaded = true;

	$(placementStr).show();

	addDropdownHandlers ();
}

function buildCategoryListDropdown (data) {

	console.trace('buildCategoryListDropdown trace');

	var validDropdown = false;

    var dropdownStr = '<select id="categorySelect" name="categorySelect">';

	var optionBaseStr = '<option {selected} data-desc="{ddDataDesc}" data-src="{ddSource}" label="{ddLabel}" value="{ddValue}">{ddDesc}</option>';

	var initialCategory = '';
	
	for ( var c in data.Categories )
	{
		var category = data.Categories[c];

		WTBLogging("categoryList: ", category);

		var selectStr = category.Name;

		var selectedStr = '';

		var categoryAttr = ''

		if ( widgetConfig.categoryAttribute != undefined && widgetConfig.categoryAttribute != '' )
		{
			WTBLogging('categoryAttribute lookup: ' + widgetConfig.categoryAttribute + '|', currOfferData.Attributes);
			categoryAttr = currOfferData.Attributes[widgetConfig.categoryAttribute];
		}
		
		if ( category.Name == categoryAttr ) {
			selectedStr = 'selected';
			initialCategory = category.Code;
		}

		var categoryStr = optionBaseStr.replace('{ddLabel}', selectStr);
		categoryStr = categoryStr.replace('{ddDesc}', selectStr);
		categoryStr = categoryStr.replace('{ddValue}', category.Code);
		categoryStr = categoryStr.replace('{ddDataDesc}', category.Name);
		categoryStr = categoryStr.replace('{ddSource}', selectStr);
		categoryStr = categoryStr.replace('{selected}', selectedStr);

		//if ( initialCategory == '' ) initialCategory = category.Code;

		dropdownStr += categoryStr;

		validDropdown = true;		
	}

	dropdownStr += '</select>';

	var placementStr = '.product_dropdown';

	if ( widgetConfig.categoryListLocation != undefined && widgetConfig.categoryListLocation != '' )
		placementStr = widgetConfig.categoryListLocation;

	WTBLogging('categoryDropdown placementStr: ' + placementStr);
			
	//$('.variantText').remove();
	$('#categorySelect').remove();

	$(placementStr).append(dropdownStr);

	categoryDropdownLoaded = true;

	$(placementStr).show();

	updateCategoryProductDropdown (initialCategory);

	addDropdownHandlers ();
}

//Offers & Local
function getOfferDetails () {

	WTBLogging('Reached getOfferDetails: ', customerPlace);

	//console.trace('getOfferDetails trace: ');
	
	if ( widgetConfig.useChildCarousel != undefined && widgetConfig.useChildCarousel && activeCarouselBtn != null ) {
		hideCarousel(activeCarouselBtn);
	}

	if  ( model == undefined || model == null || model == '' ) 
	{
		var validLoad = true;
		
        if ( widgetConfig.customVariantDropdown != undefined && widgetConfig.customVariantDropdown )
        {
            if ( $('#variantSelect') != undefined && $("#variantSelect").length > 0 ) validLoad = false;
        }

		if ( widgetConfig.useCategoryDropdowns != undefined && widgetConfig.useCategoryDropdowns && !variantDropdownLoaded )
		{
			getCategoryProducts();
		} 
		else if ( widgetConfig.variantDropdown != undefined && widgetConfig.variantDropdown != null && 
			widgetConfig.variantDropdown != "none" && validLoad)
	   	{
			var dropdownStr = '<select id="variantSelect" name="variantSelect" tabindex="3"></select>';
			
			if ( (widgetConfig.alwaysShowDropdown != undefined && widgetConfig.alwaysShowDropdown) )
			{	
				if ( widgetConfig.variantText != undefined && widgetConfig.variantText != "" )
				{
					dropdownStr = '<label for="variantSelect" class="variantText" style="display: block">' + widgetConfig.variantText + "</label> " + dropdownStr;
				}

				if ( widgetConfig.variantDropdown == "online" || widgetConfig.variantDropdown == "both" || 
						widgetConfig.variantDropdown == "swap" ) 
				{
					var placementStr = '.product_dropdown';

					if ( widgetConfig.dropdownLocation != undefined && widgetConfig.dropdownLocation != '' )
						placementStr = widgetConfig.dropdownLocation;
		
						WTBLogging('variantDropdown placementStr: ' + placementStr);
						
					$('.variantText').remove();
					$('#variantSelect').remove();
		
					$(''+placementStr).append(dropdownStr);
				}

				if ( widgetConfig.onlineTemplate == "descriptive" && (widgetConfig.variantDropdown == "local" || widgetConfig.variantDropdown == "both") ) 
				{
					$('#input-gro up').html(dropdownStr);
				} 
				else if ( widgetConfig.variantDropdown == "local" || widgetConfig.variantDropdown == "both" ) 
				{
					var placementStr = '#local_product_dropdown';

					if ( widgetConfig.dropdownLocation != undefined && widgetConfig.dropdownLocation != '' )
						placementStr = widgetConfig.dropdownLocation;
		
					WTBLogging('variantDropdown placementStr: ' + placementStr);
		
					$('.variantText').remove();
					$('#variantSelect').remove();
		
					$(''+placementStr).append(dropdownStr);
				}

				if ( widgetConfig.variantDropdown == "localsearch"  && !variantDropdownLoaded) 
				{
					$('.map-search.form-inline').prepend(dropdownStr);
					$('#variantSelect').show();
					$('#variantSelect').addClass("form-control");
					variantDropdownLoaded = true;	
				}

				variantDropdownLoaded = true;
			}
	   	}

		// Set Visibility		
		if (productName == '')
		{
			setTimeout(function(){
				$('.wtb-box-loading').hide();
				$('.wtb-box').show();
				$('.disclaimer').show();
			}, 500);
		}
	
		return;
	}

	locLat  = widgetConfig.startLatitude;
	locLong = widgetConfig.startLongitude;

	// reset controls
	multiModel = false;
	requestingLocalData = false;
	onlineRetailers = 0;

	if ( widgetConfig.allVariants != undefined && widgetConfig.allVariants && 
		allVariantsLookupComplete )
	{
		WTBLogging('Caught allVariants 2nd Search');
		model = initialModel;
	}

	if ( !widgetConfig.autoLocalSearch )
	{
		locLat  = "";
		locLong = "";
		initialiseMap(widgetConfig.startLatitude, widgetConfig.startLongitude);
	}

	if(region==null || region == '') {
		region = 'us';
	}
	
	distancecode = 1;

	currRange = $("#rangeSelect").val();
	var selectedRange = currRange;

	if( currPlaceDetails != undefined && currPlaceDetails != null )
	{
		locLat = currPlaceDetails.geometry.location.lat();
		locLong = currPlaceDetails.geometry.location.lng();
		initialiseMap(currPlaceDetails.geometry.location.lat(), currPlaceDetails.geometry.location.lng());
	}	

	if ( initialSearch && customerPlace != undefined )
	{
		//WTBLogging("Customer Location found: ", customerPlace)	;
		locLat = customerPlace.geometry.location.lat();
		locLong = customerPlace.geometry.location.lng();
		initialiseMap(customerPlace.geometry.location.lat(), customerPlace.geometry.location.lng());
	} 

	if ( (widgetConfig.useProductGroup == undefined || !widgetConfig.useProductGroup) && 
		 model.toString().indexOf(',') != -1 ) 
	{
		// https://productcatalog.channeladvisor.com/api/v1/offers/modellist/{0}?IncludeVariations=TRUE
		// https://productcatalog.channeladvisor.com/api/v1/offers/modellist/00019800703318,00019800002060,00019800708351?&maxLocationsPerRetailer=25&maxResultsPerRetailer=25&IncludeVariations=TRUE&Latitude=40.8136&Longitude=-96.7026&distanceRange=5&distanceUnit=Miles&IncludeVariations=true
		pcatOffersCall = pcatOffersCall.replace('models', 'modellist');

		WTBLogging("Setting multiModel to true");
		multiModel = true;
	}

	if ( widgetConfig.useProductGroup != undefined && widgetConfig.useProductGroup ) {
		
		if ( model.toString().indexOf(',') != -1 )
		{	
			productGroup = true;
			productGroupList = model.split(',');
			maxGroupProducts = productGroupList.length;

			initialModel = productGroupList[0];

			WTBLogging('useProductGroup - model|maxGroupProducts|initialModel|productGroupList: ' + model +'|'+maxGroupProducts+'|'+initialModel, productGroupList);

			model = initialModel;
		}
	}

	var pcatOfferUrl = pcatOffersCall.replace('{0}', model);

	var maxLocationsPerRetailer = 25;
	var maxResultsPerRetailer = 25;

	if ( widgetConfig.maxLocationsPerRetailer != undefined && widgetConfig.maxLocationsPerRetailer > 0 )
		maxLocationsPerRetailer = widgetConfig.maxLocationsPerRetailer;

	if ( widgetConfig.maxResultsPerRetailer != undefined && widgetConfig.maxResultsPerRetailer > 0 )
		maxResultsPerRetailer = widgetConfig.maxResultsPerRetailer;
	
	pcatOfferUrl = pcatOfferUrl.replace('{1}', maxLocationsPerRetailer);
	pcatOfferUrl = pcatOfferUrl.replace('{2}', maxResultsPerRetailer);

	WTBLogging('currentPostCode: ' + currPostCode);
	
	if ( widgetConfig.usePostcodeFiltering != undefined && widgetConfig.usePostcodeFiltering )
	{
        WTBLogging('Current Selected Tab: ', $('.nav-link.active').attr('id'));
        if ( $('.nav-link.active').attr('id') == "online-tab" ) {
            pcatOfferUrl += "&skipLocalSearch=true";
            localResultsApplied = false;

            $('#offline-tab').on('click', function() {
            	WTBLogging('Cuaght Offline Click');
            	if ( !localResultsApplied ) {
					
					$('#localList').hide();

            		setTimeout(function(){
						getOfferDetails(); 
					}, 250);
            	}
            });
        } else {
        	localResultsApplied = true;
        }
		
		if (widgetConfig.cleanupPostcode != undefined && widgetConfig.cleanupPostcode )
		{
			currPostCode = currPostCode.replace('%20', '');
			currPostCode = currPostCode.replace(' ', '');
		}
		
		if ( widgetConfig.limitPostCodeSize != undefined && widgetConfig.limitPostCodeSize != 0 )
		{
			currPostCode = currPostCode.substring(0, widgetConfig.limitPostCodeSize);
		}
		
		pcatOfferUrl += '&postalCode=' + currPostCode;
		// locLat = '';
		// locLong = '';
	}

	//if(state)

	if(currState != ''){
		pcatOfferUrl += '&state=' + currState;
	}
    if ( locLat != '' ) {
		pcatOfferUrl += '&Latitude=' + locLat;
		requestingLocalData = true;
	}

	if ( locLong != '' ) {
		pcatOfferUrl += '&Longitude=' + locLong;
		requestingLocalData = true;
	}
	
	var rangeStr = currRange;
/*
	if ( widgetConfig.localFullRange )
	{
		rangeStr = maxRange;
	}
*/
	if ( rangeStr != null ) pcatOfferUrl += '&distanceRange='+rangeStr+'&distanceUnit='+distanceUnits;

	if ( guidParam != '' ) pcatOfferUrl += '&customSessionId='+guidParam;

	// need productImnages to be pulled in
	pcatOfferUrl += '&IncludeVariations=true';

	if ( tag != "brandsite" )
	{
		pcatOfferUrl += "&tag=" + tag;
	}

	if ( widgetConfig.onlineBackupProducts != undefined && widgetConfig.onlineBackupProducts )
	{
		pcatOfferUrl += "&backupProductStrategy=onlineOnly";
	}

	if ( widgetConfig.useParentLookup != undefined && widgetConfig.useParentLookup )
	{
		pcatOfferUrl += "&GetParentProduct=true";
	}

	if ( !trackEvents ) {
		pcatOfferUrl += "&Track=false";
	}

	

	var pcatParams = GetPCATURLParameters();
	if(widgetConfig.vnextTrackingEnabled == true || vnextTrackingEnabled == true ){
		// vnextTrackingEnabled = true;
		pcatParams += "&PCAT_vnextTracking_All=" + vnextTrackingEnabled;
		if(userTrackingGuid != undefined && userTrackingGuid != ""){
			pcatOfferUrl += "&uniqueUserId=" + userTrackingGuid;
		}
	
		if(widgetImpressionGuid != undefined && widgetImpressionGuid != ""){
			pcatOfferUrl += "&interactionSessionId=" + widgetImpressionGuid;
		}
	
		if(deviceTypeId != undefined && deviceTypeId != ""){
			pcatOfferUrl += "&deviceTypeId=" + deviceTypeId;
		}
	}

		
	
    if ( pcatParams != '' ) pcatOfferUrl += pcatParams;

	var utmParams = GetUTMParameters();

	var urlLength = pcatOfferUrl.length;
	var utmSize = utmParams.length;

	if ( utmParams != '' ) {
		var currSize = pcatOfferUrl.length;

		urlLength = currSize + utmSize;

		WTBLogging ("PCATUrl Lengths: " + urlLength +'|' + utmSize);

		if ( urlLength <= 2111 ) // should be 2413?
		{
			pcatOfferUrl += utmParams;
		}
		else
		{
			/*
			if ( urlLength > 2111 ) {
				var headerStr = "total:"+urlLength+";utm:"+utmSize;
				xhr.setRequestHeader("Url-MaxLengthExceeded", headerStr);
			}
			*/
			var headerStr = "total:"+urlLength+";utm:"+utmSize;
			headerStr = encodeURIComponent(headerStr);

			pcatOfferUrl += "&Url-MaxLengthExceeded=" + headerStr;
		}
	}

    var authToken = widgetConfig.authToken;

    if ( widgetConfig.WTBAuthToken != undefined && widgetConfig.WTBAuthToken != null )
    	authToken = widgetConfig.WTBAuthToken;

    //WTBLogging('Showing the local animation');
    if ( widgetConfig.usePostcodeFiltering != undefined && widgetConfig.usePostcodeFiltering )
	{
    	$('#onlineList').hide();
    	$('.onlineList-loading').show();
	}

    $('.localList-loading').show();

    WTBLogging('setting authToken: ' + authToken);
	//If we're searching for local or if we have a postcode
	if(requestingLocalData == true || (currPostCode != null && currPostCode != undefined && currPostCode.length > 0)) {
		callPetsEvents();
	}
	
	var widgetParams = GetWidgetParams();
	$.ajax({
		url: pcatOfferUrl,
		type: 'GET',
		beforeSend: function (xhr) {
        	/* Authorization header */
	        xhr.setRequestHeader("Authorization", 'api-key ' + authToken);
			xhr.setRequestHeader("CA-RequestSource", widgetParams);
    	},
		success: function (data) { 

			if ( widgetConfig.addCategoryListDropdown != undefined && widgetConfig.addCategoryListDropdown && !categoryDropdownLoaded )
			{
				WTBLogging('addCategoryList: ', $(widgetConfig.categoryListLocation).html());
				addCategoryListDropdown();
			}
 
			WTBLogging("pcatOfferUrl: ", data);
			if(data.RequestMetadata != undefined && data.RequestMetadata != null && vnextTrackingEnabled == true) {
				if(data.RequestMetadata.UniqueUserId != undefined && data.RequestMetadata.UniqueUserId != null && data.RequestMetadata.UniqueUserId != "") {
					userTrackingGuid = data.RequestMetadata.UniqueUserId;
				}

				if(data.RequestMetadata.InteractionSessionId != undefined && data.RequestMetadata.InteractionSessionId != null && data.RequestMetadata.InteractionSessionId != "") {
					widgetImpressionGuid = data.RequestMetadata.InteractionSessionId;
				}

				if(data.RequestMetadata.DeviceTypeId != undefined && data.RequestMetadata.DeviceTypeId != null && data.RequestMetadata.DeviceTypeId != "") {
					deviceTypeId = data.RequestMetadata.DeviceTypeId;
				}
			}

			if ( widgetConfig.localFullRange != undefined && widgetConfig.localFullRange && requestingLocalData )
			{
				var rangeCount = 0;
				
				if ( data.LocalRetailerStores.length == 0 ) {
					for ( var i in widgetConfig.distanceOptions )
					{
						if (widgetConfig.distanceOptions[i] == currRange)
						{
							rangeCount = i;
							break;
						}
					}

					var goAgain = true;
					
					if ( rangeCount == (widgetConfig.distanceOptions.length - 1) ) 
					{
						// Reached Full Range already 
						goAgain = false;
						// reset currRange for next time 
						currRange = widgetConfig.distanceOptions[0]; 
					}		

					if ( goAgain )
					{
						rangeCount++;
						currRange = widgetConfig.distanceOptions[rangeCount];
						
						//console.log('Range Change: ' + currRange + '|' + rangeCount);
						$('option:selected', 'select[name="rangeSelect"]').removeAttr('selected');
						$('#rangeSelect').val(currRange);
		
						WTBLogging('setting currRange to: ' + rangeCount + '|' + currRange);
						
						getOfferDetails();
					}
				}				
			}

			// Set Visibility
			$('.wtb-box-loading').hide();
			$('.wtb-box').show();
			$('.disclaimer').show();

			currOfferData = data;

			var emptyContainers = true;

			//( currGroupProduct > 0 || initialSearch || ( currGroupProduct == 0 && !initialSearch)

			WTBLogging('productGroup emptyContainer check: ' + productGroup +'|'+ currGroupProduct + '|' + initialSearch);

			if  ( ( widgetConfig.allVariants != undefined && widgetConfig.allVariants && 
				( currVariantModel > 0 || initialSearch || ( currVariantModel == 0 && !initialSearch) ) ) ||
				( productGroup && ( currGroupProduct > 0 && initialSearch ) ) ||
				( widgetConfig.useExternalTrigger != undefined && widgetConfig.useExternalTrigger && !externalTrigger ) ) 
			{
				emptyContainers = false;
			}

			if ( emptyContainers )
			{
				$('.'+onlineRetailerContainer).empty();
				$('#' + onlineContainer).empty();
			}

			onlineRetailerHTML = [];
			productRetailers = [];

			//if ( widgetConfig.usePostcodeFiltering != undefined && widgetConfig.usePostcodeFiltering )
			//{
			//	$('#searchLocation').val(currPostCode);
			//}

			WTBLogging('getOffers handling - multiModel|productGroup - ' + multiModel +'|' + productGroup);

			if ( multiModel )
			{
				for ( var p in data.Products )
				{
					var product = data.Products[p];
					WTBLogging('multiModel product: ', product);
					processVariantData(product);
					getRetailerList(product);
				}

				WTBLogging('productRetailers: ', productRetailers);

				if ( widgetConfig.useExternalTrigger != undefined && widgetConfig.useExternalTrigger && !externalTrigger ) {
					WTBLogging('Found an externalTrigger config');

				    $('.onlineList-loading').hide();

					$('.wtb-box-loading').hide();
					$('.wtb-box').show();
					$('.disclaimer').show();

					$('.'+onlineRetailerContainer).empty();
					$('#' + onlineContainer).empty();

					return;
				} else { 
					WTBLogging('Setting externalTrigger to false');
					externalTrigger = false;
				}

				for ( var p in data.Products )
				{
					var product = data.Products[p];
					WTBLogging('multiModel online product: ', product);

					if ( p == (data.Products.length -1) )
						lastMultiModelProduct = true;

					processOnlineResults(product);
				}

				outputOnlineResults();

				initialiseMap(locLat, locLong);

				if ( widgetConfig.tiktokEmbed == undefined || widgetConfig.tiktokEmbed == '' )
					processLocalResults(data);
			}
			else if ( productGroup )
			{
				WTBLogging('handling productGroup: ' + model +'|'+ initialModel)
				if ( model == initialModel )
				{
					processVariantData(data);
					getRetailerList(data);

					WTBLogging('getOfferDetails: ' + widgetConfig.useExternalTrigger + '|' + externalTrigger);

					if ( widgetConfig.useExternalTrigger != undefined &&  widgetConfig.useExternalTrigger && !externalTrigger ) {
						WTBLogging('Found an externalTrigger config');

						$('.onlineList-loading').hide();

						$('.wtb-box-loading').hide();
						$('.wtb-box').show();
						$('.disclaimer').show();

						$('.'+onlineRetailerContainer).empty();
						$('#' + onlineContainer).empty();
						return;
					} else { 
						WTBLogging('Setting externalTrigger to false');
						externalTrigger = false;
					}

					processOnlineResults(data);
					
					outputOnlineResults();

					initialiseMap(locLat, locLong);

					if ( widgetConfig.tiktokEmbed == undefined || widgetConfig.tiktokEmbed == '' )
						processLocalResults(data);
				}

				// Gather Dropdown data
				var descStr = data.Description;

				WTBLogging('productGroup descStr: ' + descStr + ' | ' + widgetConfig.dropdownSrc, data.Attributes);

				if ( widgetConfig.dropdownSrc != undefined && widgetConfig.dropdownSrc != null && widgetConfig.dropdownSrc != '' )
				{
					var attrVal = getProductAttributeValue(data, widgetConfig.dropdownSrc);
					if ( attrVal != '' ) descStr = attrVal;

					WTBLogging('productGroup descStr: ' + descStr + " | attrVal: " + attrVal);
				}

				groupProductList[data.ModelName] = descStr;

				WTBLogging('productGroup - currGroupProduct|maxGroupProducts: ' + currGroupProduct +'|'+ maxGroupProducts); 

				addProductGroupLoader();

				if ( currGroupProduct < (maxGroupProducts - 1) )
				{
					currGroupProduct++;

					// Update to gather dropdown details - see sample below
					var currModel = productGroupList[currGroupProduct];

					WTBLogging('productGroup - currModel: ' + currModel);

					if ( currModel != initialModel )
					{
						model = currModel;
						getOfferDetails();
					}
				}
				else{
					WTBLogging('buildProductGroupDropdown: ', groupProductList);

					$('.loader-small').hide();
					
					buildProductGroupDropdown(groupProductList);
								
					addDropdownHandlers();
					$('#variantSelect').show();
					if (widgetConfig.startTab = "local" && widgetConfig.variantDropdown == "swap")
					{
						$('#variantSelect').hide();
					}

					// Allow dropdown to work as normal, now that data is added
					currGroupProduct = 0;
					productGroup = false;
				}
			}
			else
			{		
				processVariantData(data);
				getRetailerList(data);

				WTBLogging('getOfferDetails: ' + widgetConfig.useExternalTrigger + '|' + externalTrigger);

				if ( widgetConfig.useExternalTrigger != undefined &&  widgetConfig.useExternalTrigger && !externalTrigger ) {
					WTBLogging('Found an externalTrigger config');

					$('.onlineList-loading').hide();

					$('.wtb-box-loading').hide();
					$('.wtb-box').show();
					$('.disclaimer').show();

					$('.'+onlineRetailerContainer).empty();
					$('#' + onlineContainer).empty();
					return;
				} else { 
					WTBLogging('Setting externalTrigger to false');
					externalTrigger = false;
				}

				processOnlineResults(data);

				WTBLogging('productModels: ' + widgetConfig.allVariants + '|' + productModels.length + '|' + currVariantModel, productModels);

				if ( !modelCountSet )
				{
					maxVariantModels = productModels.length
					modelCountSet = true;	
				}

				if ( widgetConfig.allVariants != undefined && widgetConfig.allVariants && 
					 maxVariantModels > currVariantModel )
				{
					// variant data found, request more
					model = productModels[currVariantModel];
					currVariantModel++;

					getOfferDetails();
				}
				else
				{
					allVariantsLookupComplete = true;
				}

				var outputOnline = true;

				if ( widgetConfig.allVariants )
				{
					// Local search has run, don't add any more online data
					if ( allVariantsLookupComplete && model == initialModel && !initialSearch ) outputOnline = false;
				} 


				if ( outputOnline ) outputOnlineResults();

				initialiseMap(locLat, locLong);
				
				if ( widgetConfig.tiktokEmbed == undefined || widgetConfig.tiktokEmbed == '' )
					processLocalResults(data);
			}

			if ( widgetConfig.displayBackupInfo && data.BackupProductsSummary.ReplacedProducts[0] != undefined )
			{
				var requestedProduct = data.BackupProductsSummary.ReplacedProducts[0].RequestedProduct;

				var reqDesc = '';

				for ( var v in data.Variants )
				{
					if ( data.Variants[v].ModelCode == requestedProduct )
					{
						reqDesc = data.Variants[v].Description;
					}
				}

				if ( reqDesc != '' )
				{
					var infoStr = '<div id="backupProductInfo"><b>Note:</b> ' + reqDesc + ' is out of stock.</div>';

					if ( widgetConfig.backupProductMessage != undefined && widgetConfig.backupProductMessage != '' )
					{
						infoStr = widgetConfig.backupProductMessage;
						infoStr = infoStr.replace('{wtb_description}', reqDesc);
					}
					
					$('.title').append(infoStr);
				}
				else
				{
					if ( widgetConfig.backupProductMessage != undefined && widgetConfig.backupProductMessage != '' )
					{
						$('.title').append(widgetConfig.backupProductMessage);
					}
				}
			}

			// This should only be requested once, so should ensure it is set to false
			widgetConfig.onlineBackupProducts = false;

			if ( typeof updateDisplayViaAttributes === "function")
			{
				updateDisplayViaAttributes(data.Attributes);
			}
			
			if ( locLat != '' )
			{
				initialSearch = false;			
			}
			else if ( widgetConfig.usePostcodeFiltering != undefined && widgetConfig.usePostcodeFiltering )
			{
				initialSearch = false;
			}

			WTBLogging('Calling WTBLocalLoaded');

			$(document).trigger("WTBLocalLoaded");
		},
		error: function (e) { 
			// Change visibility
			$('.wtb-box-loading').hide();
			$('.wtb-box').show();
			$('.disclaimer').show();

			$('.onlineList-loading').hide();
			$('.localList-loading').hide();

			$('.product_logo').hide();

			WTBLogging('Caught Error: ', e);

			var messageStr = 'This product was not found, please choose another product';

			if ( widgetConfig.noProductFound != undefined && widgetConfig.noProductFound != null )
			{
				messageStr = widgetConfig.noProductFound;
			}

			$('#'+onlineContainer).html('');
			$('#'+onlineContainer).append('<div class="oosmessage">' + messageStr + '</div>');

			$('#localList').html('');
			$('#localList').append('<div class="oosmessage">' + messageStr + '</div>');
			$('#localList').show();

			// trigger these in case it is needed by the custom build
			setTimeout(function(){
				$(document).trigger("WTBOnlineLoaded");
				$(document).trigger("WTBLocalLoaded");
			}, 150);

			if ( widgetConfig.featureCollapse != undefined && widgetConfig.featureCollapse != null && widgetConfig.featureCollapse)
			{
				$('#wtb-collapse-btn').hide();
			}

			/*
			if ( widgetConfig.noOnlineStock != undefined && widgetConfig.noOnlineStock != null )
			{
				$('#'+onlineContainer).html('');
				$('#'+onlineContainer).append('<div class="oosmessage">' + widgetConfig.noOnlineStock + '</div>');
			}
			*/
		}
	});
}

function lookupZipCodeViaGoogle (locLat, locLong) {

	if ( map == undefined )  return;

	var locCurrent = new google.maps.LatLng(locLat, locLong);

	var geocoder = new google.maps.Geocoder();

	geocoder.geocode({'latLng': locCurrent}, function (results, status) {
		WTBLogging('lookupZipCodeViaGoogle resut: ', results);

		var place = results[0];

		if (place.address_components) {

			var zipCode = '';
			var	stateCode = '';
			// find country
			for ( var i in place.address_components)
			{
				var component = place.address_components[i];

				for ( var j in component.types )
				{
					var type = component.types[j];

					if ( type == "postal_code" ) zipCode = component.long_name;
					if ( type == "administrative_area_level_1" ) stateCode = component.short_name;

				}
			}

			if ( zipCode != '' ) currPostCode = zipCode;
			if ( stateCode != '' ) currState = stateCode;

			WTBLogging('lookupZipCodeViaGoogle postCode: ' + currPostCode);

			if ( $("#searchLocation").val() == '' )
			{
				customerLocation = place.formatted_address;
				$("#searchLocation").val(customerLocation);
			}

			customerPlace = place;
			currPlaceDetails = place
		}

		var postCodeFilteringValid = true;
		
		WTBLogging('variantSelect - postCodeFiltering: '  + widgetConfig.usePostcodeFiltering + '|' + widgetConfig.postalCodeDefaults + '|' + currPostCode);

		if ( widgetConfig.usePostcodeFiltering != undefined && widgetConfig.usePostcodeFiltering && model == '' )
		{
			postCodeFilteringValid = false;
		}
      		
		if  ( postCodeFilteringValid )
		{
			$('#localList').hide();
      		getOfferDetails();
		}
	});
}

function setCurrentModel (currModel) {
	model = currModel;
}

function processOnlineResults (data) {
	var modelList = [];
	modelList[0] = model;

	$('#onlineList').show();
	$('.onlineList-loading').hide();

	onlineRetailerHTML[data.ModelName] = [];

	if ( widgetConfig.allVariants != undefined && widgetConfig.allVariants != null && widgetConfig.allVariants 
		&& productModels.length > 0 )
	{
		modelList = productModels;
	}

	for ( var i in modelList )
	{
		var currModel = modelList[i];

		var priceStr = '<p class="price" id="{wtb_display_name} Price">{wtb_price}</p>';

		var stockStr = '<div class="stock">' +
					   		'{wtb_stockPrice}' +
					   		'<p class="status">' +
				  		   		'<b>{wtb_inStockText}</b>' +
									 '{wtb_statusOnDemand}' +
					   		'</p>' +
					   	'</div>';

		var outOfStockStr = '<div class="stock outstock">' +
								'{wtb_stockPrice}'+
								'<p class="status">' +
							    	'<b>{wtb_outOfStockText}</b>' +
									'{wtb_statusOnDemand}' +
							 	'</p>' +
							'</div>';

		var nearbyStr = '<p aria-label="Check {wtb_display_name} nearby" id="checkNearby">' +
							'<b>{wtb_nearbyLabel}</b>' +
						'</p>';

		var addToCartStr = '<a class="btn btn-addtocart AddToCartLink" href="javascript:void(0)" target="_blank" cartUrl="{wtb_cartURL}" cartRetailer="{wtb_cartTRetailer}" >' +
								'Add to Cart' +
							'</a>'

							// Update usage of buyNowStr to buyNowSingleStr
							// Add BuyNowStr to onlineTemplate and hide if addToCartOnly setting is used
		var buyNowSingleStr = '<span id="{wtb_display_name}BuyNow">' +
							  	'<a href="{store_deeplink_url}" target="_blank" class="btn btn-buynow " buyNowName="{wtb_buyNowName}" aria-label="Buy Now from {wtb_display_name}">' +
									'{wtb_buybuttontext}' +
								'</a>' +
							  '</span>'
/*
		var buyNowStr =	'<span id="{wtb_display_name}BuyNow">' +
							'<a href="{store_deeplink_url}" target="_blank" class="btn btn-buynow " buyNowName="{wtb_buyNowName}" aria-label="Buy Now from {wtb_display_name}">' +
								'<i class="material-icons valign-center">open_in_new</i>' +
								'{wtb_buybuttontext}' +
							'</a>' +
						'</span>'
*/
		
		var addToCart = '<div class="add" >' +
						'<span id="{wtb_display_name}BuyNow">' +
							'<a href="{wtb_add_to_cart_link}" target="_blank" class="btn btn-addtocart" data-retailer="{wtb_display_name}" aria-label="Buy Now from {wtb_display_name}">' +
								'<i class="material-icons valign-center">open_in_new</i>' +
								'{wtb_addToCartLabel}' +
							'</a>' +
						'</span>' +
						'</div>' ;

		var buyNowStr = '<span id="{wtb_display_name}BuyNow">' +
							'<a href="{store_deeplink_url}" target="_blank" class="btn btn-buynow {wtb_availability}" data-retailer="{wtb_display_name}" aria-label="Buy Now from {wtb_display_name}">' +
								'{wtb_buybuttontext}' +
							'</a>' +
						'</span>'
		
		var onlinePromotionTooltipStr = '<div class="offer"><p class="promo" data-toggle="tooltip" data-placement="top" data-html="true" title="{tooltipTxt}" >' +
									'{offerLabel}' +
						   		 '</p></div>';

		var onlinePromotionStr = '<div class="offer"><p class="promo" >{offerLabel}</p><p class="offerText">{offerText}</p></div>';


		var buyNowText = widgetConfig.buyNowLabel;

		//WTBLogging('widgetConfig.widgetType: ' + widgetConfig.widgetType);

		if ( widgetConfig.useExternalOnlineOrdering != undefined && widgetConfig.useExternalOnlineOrdering != null && 
			 widgetConfig.useExternalOnlineOrdering && 
	 		typeof orderOnlineWTBResults === "function" )
		{
			//WTBLogging("Calling orderLocalWTBResults");
			data.OnlineRetailers = orderOnlineWTBResults(data.OnlineRetailers);
		}

		if ( data.OnlineRetailers.length > 0 )
		{
			
                
			for (var o in data.OnlineRetailers )
			{
				var currStore = data.OnlineRetailers[o];
				var onlinePromo = '';
				var stockReplace = outOfStockStr;
				var validChildOffers = false;
				if(currStore.ChildrenOffers.length > 0){
					validChildOffers = true;
				}
				
				// reset label
				buyNowText = widgetConfig.buyNowLabel;

				//CHECK childOffers and update state
				var availabilityStatus = currStore.Availability;
				for(var childOffer of currStore.ChildrenOffers){
					if(availabilityStatus != ODAvailable  && childOffer.Availability == ODAvailable){
						availabilityStatus = ODAvailable;
					}else if(availabilityStatus != ODAvailable){
					
						if(availabilityStatus != ODCallForAvailability && childOffer.Availability == ODCallForAvailability){
							availabilityStatus = ODCallForAvailability;
						}
						else if(childOffer.Availability == ODUnavailable){
							availabilityStatus = ODUnavailable;
						}
					}
				}
				if(availabilityStatus != '' && availabilityStatus != currStore.Availability){
					currStore.Availability = availabilityStatus;
				}

			


				//WTBLogging('OnlineRetailers check: ' + currStore.DisplayName + '|' + widgetConfig.postalCodeDefaults );
				if ( widgetConfig.usePostcodeFiltering != undefined && widgetConfig.usePostcodeFiltering && currPostCode == '' )
				{
					if ( widgetConfig.postalCodeDefaults != undefined && widgetConfig.postalCodeDefaults != '' && 
					     widgetConfig.postalCodeDefaults.indexOf('none') != -1 )
					{
						var filterList = widgetConfig.postalCodeDefaults.split('|');

						var isValid = false;

						//WTBLogging('postalCodeDefaults retailers: ', filterList);

						for ( var i in filterList )
						{
							var retailer = filterList[i];
							
							if ( currStore.DisplayName != null &&  currStore.DisplayName.toLowerCase().indexOf(retailer.toLowerCase()) != -1) {
								isValid = true;
								break;
							}
						}

						if ( !isValid ) continue;
					}
					else if (widgetConfig.postalCodeDefaults != undefined && widgetConfig.postalCodeDefaults == 'none' )
					{
						isValid = false;
					}
				}

				// Check if filtering is required
				if ( widgetConfig.onlineFiltering != undefined && widgetConfig.onlineFiltering != null && 
					 widgetConfig.onlineFiltering )
				{
					if ( widgetConfig.validOnlineRetailers != undefined && widgetConfig.validOnlineRetailers != null && 
						 widgetConfig.validOnlineRetailers != '' )
					{
						var filterList = widgetConfig.validOnlineRetailers.split('|');

						var isValid = false;

						//WTBLogging('OnlineRetailers retailers: ', filterList);

						for ( var i in filterList )
						{
							var retailer = filterList[i];

							if ( currStore.DisplayName.toLowerCase().indexOf(retailer.toLowerCase()) != -1) {
								isValid = true;
								break;
							}
						}

						if ( !isValid ) continue;
					}
				}

				//  
				if ( widgetConfig.useExternalOnlineFiltering != undefined && widgetConfig.useExternalOnlineFiltering != null && 
			    	 widgetConfig.useExternalOnlineFiltering && typeof filterOnlineWTBResults === "function" )
				{
					//WTBLogging("Calling filterOnlineWTBResults: " + currStore.Name);
					isValid = filterOnlineWTBResults(currStore);

					//WTBLogging('filterOnlineWTBResults result: ' + isValid);

					if ( !isValid ) continue;
				}

				//WTBLogging('OnlineRetailers addition: ', currStore);
				
				if ( widgetConfig.hideOutOfStock && currStore.Availability != "Available" ) continue;

				if ( widgetConfig.hideEmptyChildrenOffers != undefined && widgetConfig.hideEmptyChildrenOffers )
				{
					if ( currStore.ChildrenOffers != undefined && currStore.ChildrenOffers.length == 0 )
					{
						continue;
					}
				}
				if ( widgetConfig.useChildCarousel != undefined && widgetConfig.useChildCarousel  
					&& (data.OnDemandAvailabilityLink == undefined || data.OnDemandAvailabilityLink == null) )
				{
					WTBLogging('Checking for validChildOffers');
					validChildOffers = false;

					//If no available childOffers, hide result
					for ( var i in currStore.ChildrenOffers )
					{
						var currOffer = currStore.ChildrenOffers[i];
						
						if ( currOffer.Availability == "Available" ) 
						{
							
							WTBLogging('setting validChildOffers');
							// 1 available childOffer found
							validChildOffers = true;
						}
					}
				}

				if( currStore.Promotions != undefined && currStore.Promotions != null && 
					currStore.Promotions.length > 0) {

					var tooltipTxt = '';

					for ( var p in currStore.Promotions )
					{
						var currPromo = currStore.Promotions[p];

						//WTBLogging('OnlinePromotions: ', currPromo);

						if ( tooltipTxt == '' )
						{
							tooltipTxt = currPromo.PromotionalMessage;
						}
						else
						{
							tooltipTxt += '<br>' + currPromo.PromotionalMessage;
						}
					}	

					var offerStr = 'Offer';

					if ( widgetConfig.offerLabel != undefined && widgetConfig.offerLabel != '' ) 
						offerStr = widgetConfig.offerLabel;

					if ( widgetConfig.promotionToolip != undefined && widgetConfig.promotionToolip )
					{
						onlinePromo = onlinePromotionTooltipStr.replace('{tooltipTxt}', tooltipTxt);
					}
					else
					{
						onlinePromo = onlinePromotionStr.replace('{offerText}', tooltipTxt);	
					}

					onlinePromo = onlinePromo.replace('{offerLabel}', offerStr);

						
				} else {
					onlinePromo = '<div class="offer"></div>';
				}

				var productPrice = currStore.Price;

				if ( widgetConfig.useFormattedPrice != undefined && widgetConfig.useFormattedPrice )
					productPrice = currStore.PriceFormatted;

				var defaultProductPrice = false;

				//WTBLogging("Price Check: " + productPrice + "|" + widgetConfig.zeroPriceText);

				if ( widgetConfig.zeroPriceText != undefined && 
					( productPrice == "0" || productPrice == "0.00" || productPrice == 0.00 || productPrice == 0 ) )
				{
					productPrice = widgetConfig.zeroPriceText;
					defaultProductPrice = true;

					//WTBLogging("product price reset: " + productPrice);
				}

				//WTBLogging('OnlinePromotions set: ', onlinePromo);
				
				onlineData[currStore.Name] = {};
				onlineData[currStore.Name]["price"] = productPrice;
				onlineData[currStore.Name]["buyNow"] = currStore.ProductLink;
				onlineData[currStore.Name]["addToCart"] = currStore.CartLink;


	
				if(currStore.Availability == "Available"){
					stockReplace = stockStr;
					buyNowText = widgetConfig.buyNowLabel;	
				}
				else
				{
					buyNowText = widgetConfig.unavailableLabel;
				}

            	if ( widgetConfig.noOnlineStock != undefined && widgetConfig.noOnlineStock != null )
                	$('#'+onlineContainer +" .oosmessage").hide();

                var logoStr = '<img class="model-logo" src="' + currStore.LogoUrl + '" alt="">';

				// Ensure retailer Logo can't be null
				if ( currStore.LogoUrl == null ) 
				{
					WTBLogging('logoURL: ' + currStore.LogoUrl);
					currStore.LogoUrl = '';

					logoStr = '<div class="retailerName">{wtb_display_name}</div>';
				}

				//WTBLogging("availability text: " + buyNowText + "|" + currStore.Availability);

				if ( widgetConfig.widgetType == "BuyOnlineBuyLocalSingleTab" )
				{

					//WTBLogging("online - singleTab");

					if ( productPrice != null ) 
					{
						var priceHTML = priceStr.replace('{wtb_price}', widgetConfig.currencySymbol + "" + productPrice);

						if ( defaultProductPrice ) priceStr.replace('{wtb_price}', productPrice);

						if (showPrice) $('#online_price').html(priceHTML);

						var buyNowHTML = buyNowSingleStr.replaceAll('{store_deeplink_url}', currStore.deeplink_url);
						buyNowHTML = buyNowHTML.replaceAll('{wtb_display_name}', currStore.DisplayName);
						buyNowHTML = buyNowHTML.replaceAll('{wtb_buyNowName}', currStore.DisplayName);
						buyNowHTML = buyNowHTML.replaceAll('{wtb_buybuttontext}', buyNowText);
						$('#online_offer').html(buyNowHTML);
					}
				}
				else
				{
					//WTBLogging("online - simple");
					var buyOnlineEntry = '';

					if ( (widgetConfig.onlineTemplate == "simple" || widgetConfig.showSimpleOnline) && version != '2.0' )
					{
						var storePrice = currStore.Price;

						if ( widgetConfig.useFormattedPrice != undefined && widgetConfig.useFormattedPrice )
							storePrice = currStore.PriceFormatted;

						var buyButtonText = buyNowText;
						var productLink = currStore.ProductLink;

						var showAddToCart = true;

						if ( widgetConfig.showAddToCart != undefined ) showAddToCart = widgetConfig.showAddToCart;

						if ( widgetConfig.useChildCarousel != undefined && widgetConfig.useChildCarousel ) showAddToCart = false;

						if( showAddToCart && currStore.CartLink != null && currStore.Availability == "Available" ){

							var addToCartLabel = 'Add To Cart';

							if ( widgetConfig.addToCartLabel != undefined && widgetConfig.addToCartLabel != '' )
								addToCartLabel = widgetConfig.addToCartLabel;

							productLink = currStore.CartLink;
							buyButtonText = addToCartLabel;							
						} 

						var inStockText = 'instock';
						var outOfStockText = 'outstock';

						if ( widgetConfig.inStockText != undefined && widgetConfig.inStockText != null )
						{
							inStockText = widgetConfig.inStockText;
						}

						if ( widgetConfig.outOfStockText != undefined && widgetConfig.outOfStockText != null )
						{
							outOfStockText = widgetConfig.outOfStockText;
						}

						var onlinePrice = currStore.Price != null ? widgetConfig.currencySymbol + "" + storePrice : '';
						if ( defaultProductPrice ) onlinePrice = productPrice;

						if ( widgetConfig.onlineResultTemplate != undefined && widgetConfig.onlineResultTemplate != null && 
							 widgetConfig.onlineResultTemplate != '' )
						{
							buyOnlineSimpleTemplate = widgetConfig.onlineResultTemplate;
						}
						buyOnlineEntry = buyOnlineSimpleTemplate.replaceAll('{store_deeplink_url}', productLink);
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_logo_str}', logoStr);
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_display_name}', currStore.DisplayName);
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_stock}', currStore.Availability == "Available" ? inStockText : outOfStockText);
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_onlinePrice}', onlinePrice);

						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_onlinePromotions}', onlinePromo);	

						// Extras
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_ModelCode}', data.ModelCode);
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_ModelName}', data.ModelName);
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_MarketingModelName}', data.MarketingModelName);

						//WTBLogging("setting buyNowText: " + buyNowText);

						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_buybuttontext}', buyButtonText);

						retailerNumber++;
					}
					else if ( widgetConfig.onlineTemplate == "descriptive" && version != '2.0' )
					{
						WTBLogging("online - Descriptive");
						var storePrice = currStore.Price;
						WTBLogging(storePrice);

						if ( widgetConfig.useFormattedPrice != undefined && widgetConfig.useFormattedPrice )
							storePrice = currStore.PriceFormatted;

						var buyButtonText = buyNowText;
						var productLink = currStore.ProductLink;

						if( currStore.CartLink != null && currStore.Availability == "Available" ){

							var addToCartLabel = 'Add To Cart';

							if ( widgetConfig.addToCartLabel != undefined && widgetConfig.addToCartLabel != '' )
								addToCartLabel = widgetConfig.addToCartLabel;

							productLink = currStore.CartLink;
							buyButtonText = addToCartLabel;							
						} 

						buyOnlineEntry = buyOnlineDescriptiveTemplate.replaceAll('{wtb_logo_str}', logoStr);
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_display_name}', currStore.DisplayName);
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_stock}', currStore.Availability == "Available" ? "instock" : "outstock");
						buyOnlineEntry = buyOnlineEntry.replaceAll('{store_deeplink_url}', currStore.ProductLink);
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_productname}', productLabels[model]);
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_onlinePrice}', currStore.PriceFormattedWithCurrency != null ? currStore.PriceFormattedWithCurrency : '');
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_buybuttontext}', buyNowText);

						retailerNumber++;
					}
					else if ( widgetConfig.widgetType == "BuyOnlineBuyLocalFullTab" && version != '2.0' )
					{
						//WTBLogging("online - fullTab");

						var priceReplace = '';
						if ( currStore.Price != null ) priceReplace = widgetConfig.currencySymbol + "" + currStore.Price;

						buyOnlineEntry = buyOnlineSimpleBuyNowTemplate.replaceAll('{store_deeplink_url}', currStore.ProductLink);	
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_logo_str}', logoStr);
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_display_name}', currStore.DisplayName);
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_buybuttontext}', buyNowText);

						var buttonText = widgetConfig.onlineButtonText;

						if ( widgetConfig.showOnlinePrice )
						{
							buttonText = priceReplace + " " + buttonText;
						}

						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_buy_now_text}', buttonText);

						retailerNumber++;
					}
					else
					{
						//WTBLogging("online - default");

						var priceReplace = '';
						var nearbyReplace = '';
						var inStockText = 'Available';
						var outOfStockText = 'Out of Stock';
						var addToCartReplace = '';

						var ratingReplace = '';

						var onlineBuyNowStr = buyNowStr;

						if ( widgetConfig.inStockText != undefined && widgetConfig.inStockText != null )
						{
							inStockText = widgetConfig.inStockText;
						}

						if ( widgetConfig.outOfStockText != undefined && widgetConfig.outOfStockText != null )
						{
							outOfStockText = widgetConfig.outOfStockText;
						}

						if ( currStore.DisplayName != "Amazon" ) nearbyReplace = nearbyStr; //&& customerLocation != "blocked"
						if ( currStore.Price != null ) priceReplace = priceStr;

						var nearbyLabelStr = 'Check Nearby';

						if ( widgetConfig.nearbyLabel != undefined && widgetConfig.nearbyLabel != '')
							nearbyLabelStr = widgetConfig.nearbyLabel;

						nearbyReplace = nearbyReplace.replace('{wtb_nearbyLabel}', nearbyLabelStr);

						buyOnlineEntry = buyOnlineTemplate.replaceAll('{wtb_logo_str}', logoStr);

						var showAddToCart = true;

						if ( widgetConfig.showAddToCart != undefined ) showAddToCart = widgetConfig.showAddToCart;

						if ( widgetConfig.useChildCarousel != undefined && widgetConfig.useChildCarousel ) showAddToCart = false;

						if( showAddToCart && currStore.CartLink != null && currStore.Availability == "Available"){

							addToCartReplace = addToCartStr; // replace check with new addToCart data
							
							//WTBLogging('CartLink: ', currStore.CartLink);
							var addToCartLabel = 'Add To Cart';

							if ( widgetConfig.addToCartLabel != undefined && widgetConfig.addToCartLabel != '' )
								addToCartLabel = widgetConfig.addToCartLabel;

							addToCartReplace = addToCart.replaceAll('{wtb_add_to_cart_link}', currStore.CartLink);
							addToCartReplace = addToCartReplace.replaceAll('{wtb_addToCartLabel}', addToCartLabel);
							
						} else {
							//if ( widgetConfig.showAddToCartOnly ) continue;
							buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_add_to_cart}', "");
						}

						if ( showAddToCart && widgetConfig.showAddToCartOnly != undefined && widgetConfig.showAddToCartOnly != null && 
							 widgetConfig.showAddToCartOnly && currStore.CartLink != null && currStore.Availability == "Available")
						{
							onlineBuyNowStr = '';
						}

						var storePrice = currStore.Price;

						if ( widgetConfig.useFormattedPrice != undefined && widgetConfig.useFormattedPrice )
							storePrice = currStore.PriceFormatted;

						var onlinePrice = widgetConfig.currencySymbol + "" + storePrice;
						if ( defaultProductPrice ) onlinePrice = productPrice;

						var storeLink = currStore.ProductLink;

						if ( widgetConfig.useChildCarousel != undefined && widgetConfig.useChildCarousel )
						{
							if ( currStore.ChildrenOffers != undefined && 
								( currStore.ChildrenOffers.length > 1 || 
								  ( widgetConfig.alwaysShowCarousel != undefined && widgetConfig.alwaysShowCarousel &&
									currStore.ChildrenOffers.length == 1 ) ) && validChildOffers )
						    {
								// Only add if more than one entry
								carouselData[currStore.DisplayName] = currStore.ChildrenOffers;
								storeLink = '#';
							}
							else if ( currStore.ChildrenOffers != undefined && currStore.ChildrenOffers.length == 1 ) 
							{
								storeLink = currStore.ChildrenOffers[0].ProductLink;
							}
							else if ( currStore.ChildrenOffers != undefined && currStore.ChildrenOffers.length == 0 )
							{
								buyNowText = widgetConfig.carouselBuyNowLabel;
								WTBLogging('Setting buyNowText: ' + buyNowText);
							}
							
							var showOOSChildOffers = false;

							if ( widgetConfig.showInvalidChildOffers != undefined && widgetConfig.showInvalidChildOffers )
								showOOSChildOffers = true;

							if ( !validChildOffers && !showOOSChildOffers )
							{
								WTBLogging('Handling validChildOffers set to false');
								continue;
							}

							if ( !validChildOffers && showOOSChildOffers )
							{
								buyNowText = widgetConfig.unavailableLabel;
							}
							else if ( ((widgetConfig.alwaysShowCarousel != undefined && !widgetConfig.alwaysShowCarousel)) &&
								 (currStore.ChildrenOffers != undefined && currStore.ChildrenOffers.length <= 1))
							{
								buyNowText = widgetConfig.carouselBuyNowLabel;
								WTBLogging('Setting buyNowText: ' + buyNowText);
							}
							
						}

						// Set ProeductImage
						
						var productImg = data.ProductImage != null ? data.ProductImage : "";

						WTBLogging('productIamge setting: ' +  widgetConfig.productImageAttribute);

						if ( widgetConfig.productImageAttribute != undefined && widgetConfig.productImageAttribute != '' )
						{
							var attrVal = getProductAttributeValue(data, widgetConfig.productImageAttribute);
							if ( attrVal != '' ) productImg = attrVal;

							WTBLogging('ProductImage Src: ' + productImg +'|'+ widgetConfig.productImageAttribute);
						}
						else
						{
							/*	
							if ( data.ProductImage != null ) {
								productImg = data.ProductImage;
							} else {
								productImg = currStore.ProductImages[0];
							}
							*/
						}

						if ( widgetConfig.showReviewDetails != undefined && widgetConfig.showReviewDetails )
						{
							if ( ( widgetConfig.hideZeroReviews == undefined ) || 
								 ( widgetConfig.hideZeroReviews != undefined && !widgetConfig.hideZeroReviews ) ||
								 (!widgetConfig.hideZeroReviews != undefined && widgetConfig.hideZeroReviews && currStore.ReviewsCount > 0 ) ) 
							{
								ratingReplace = '<div class="rating"><div class="stars" style="--rating:' + currStore.ReviewsRating + '"></div>';
								ratingReplace += '<div class="reviewCount">(' + currStore.ReviewsCount + ')</div></div>';
							}
							else
							{
								ratingReplace = '<div class="rating"></div>';
							}
						}

						carouselDefaultProductImage = productImg;

						WTBLogging('carouselDefaultProductImage set: ' + carouselDefaultProductImage);
						
						var statusOnDemand = '';
						if(currStore.Availability == ODCallForAvailability && data.OnDemandAvailabilityLink != null){
			
							var stockReplace = '<div class="stock call-stock">' +
							'{wtb_stockPrice}' +
							'<p class="status" style="display:none">' +
								'<b>{wtb_inStockText}</b>' +
								'{wtb_statusOnDemand}' +
								'</p>' +
							'</div>';

						

							statusOnDemand = 
							'<div id="status_on_demand" style="display:flex">' + 
								'<div class="loader-small" style="position: initial;margin: auto;"></div>' +
								'</div>';
								
						}
						//WTBLogging('formattedPrice: ' + widgetConfig.useFormattedPrice + "|" + storePrice + "|" + currStore.PriceFormatted)

						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_onlineBuyNow}', onlineBuyNowStr);
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_onlineRatingDetails}', ratingReplace);
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_onlineStockDetails}', stockReplace);
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_statusOnDemand}',  statusOnDemand);

						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_stockPrice}', priceReplace);
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_onlineCheckNearby}', nearbyReplace);

						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_onlineAddToCart}', addToCartReplace);
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_cartURL}', currStore.ProductLink);

						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_cartTRetailer}', currStore.name);
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_display_name}', currStore.DisplayName);
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_currency_symbol}', currStore.CurrencySymbol);
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_price}', onlinePrice);
						buyOnlineEntry = buyOnlineEntry.replaceAll('{store_deeplink_url}', storeLink);

						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_onlinePromotions}', onlinePromo);						

						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_inStockText}', inStockText);
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_outOfStockText}', outOfStockText);
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_buybuttontext}', buyNowText);

						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_availability}', currStore.Availability == "Available" ? "instock" : "outstock");
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_stock}', currStore.Availability == "Available" ? "instock" : "outstock");
						
						// Extras 
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_ModelCode}', data.ModelCode);
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_ModelName}', data.ModelName);
						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_MarketingModelName}', data.MarketingModelName);

						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_productTitle}', data.Description);

						buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_productLogo}', productImg);

						// process attributes
						for (var attrName in data.Attributes) {
					        var attrVal = data.Attributes[attrName];

					        //WTBLogging('onlineReplace Attr name: ' + attrName + ' | ' + attrVal);

					        buyOnlineEntry = buyOnlineEntry.replaceAll('{wtb_attr'+attrName+'}', attrVal);
					    }

						//WTBLogging('Adding BuyOnline Entry: ' + buyOnlineEntry);

						//$('.'+onlineRetailerContainer).append(buyOnlineEntry);

						retailerNumber++;
					}

					onlineRetailerHTML[data.ModelName][currStore.Name] = buyOnlineEntry;

					if ( productRetailers[currStore.Name] == false && (currStore.Availability == "Available") )
					{
						productRetailers[currStore.Name] = true;
					}
				}
			}
	
			//CHECK ON DEMAND
			if( data.OnDemandAvailabilityLink != null)
			{				
				WTBLogging('OnDemand Lookup: ', localRetailers);
		
				onDemandAvailabilityUrl = data.OnDemandAvailabilityLink;
				onDemandAvailabilityUrl = onDemandAvailabilityUrl.replace('http:', 'https:');
				availability = "loading";	
				GetOnDemandAvailability();

				//
			}
		} else {
			if ( widgetConfig.usePostcodeFiltering != undefined && widgetConfig.usePostcodeFiltering && 
				 widgetConfig.singleTab != undefined && widgetConfig.singleTab != "online" &&  
				 productName == '' )
			{
				// No retailers have been returned, hide the 'online' tab
				$('#offline-tab').click();
			}
			
			//CHECK ON DEMAND
			if( data.OnDemandAvailabilityLink != null)
			{				
				WTBLogging('OnDemand Lookup: ', localRetailers);
		
				onDemandAvailabilityUrl = data.OnDemandAvailabilityLink;
				onDemandAvailabilityUrl = onDemandAvailabilityUrl.replace('http:', 'https:');
				availability = "loading";	
				GetOnDemandAvailability();

				//
			}
		}
	}	
};

function outputOnlineResults ( ) {

	var outOfStock = true;

	var outputRetailers = [];

	// setup control variable
	for ( var r in productRetailers )
	{
		outputRetailers[r] = false;
	}


	for ( var m in onlineRetailerHTML )
	{
		for ( var r in onlineRetailerHTML[m] ) 
		{
			//WTBLogging('outputOnlineResults: ' + m + '|' + r + '|' + productRetailers[r]);

			var content = onlineRetailerHTML[m][r];

			var availability = false;

			if ( content.indexOf(widgetConfig.buyNowLabel) != -1 )
			{
				availability = true;
			}

			if ( multiModel )
			{
				//WTBLogging('multiModel: ' + productRetailers[r] + '|' + availability );
				if ( productRetailers[r] && availability && !outputRetailers[r] )
				{
					$('#' + onlineContainer).append(content);
					onlineRetailers++;
					// retailer in place, stop more
					outputRetailers[r] = true;
					outOfStock = false;
				}
				else if ( !productRetailers[r] && !availability && !outputRetailers[r] )
				{
					$('#' + onlineContainer).append(content);
					onlineRetailers++;
					// retailer in place, mark it
					outputRetailers[r] = true; 
					outOfStock = false;
				}
			}
			else
			{
				$('#' + onlineContainer).append(content);	
				onlineRetailers++;
				outputRetailers[r] = true;
				outOfStock = false;
			}
		}
	}

	//WTBLogging('retailerHTML: ', onlineRetailerHTML);
	//WTBLogging('productRetailers: ', productRetailers);
	
	if ( outOfStock )
	{
		var showOOSMessage = true;
		if ( widgetConfig.allVariants && onlineRetailers > 0 ) showOOSMessage = false;

		if ( widgetConfig.allVariants && $('.wtb-online .retailers-online') != undefined ) showOOSMessage = false;

		if ( widgetConfig.usePostcodeFiltering != undefined && widgetConfig.usePostcodeFiltering && currPostCode == '' && 
				widgetConfig.postalCodeDefaults != undefined && widgetConfig.postalCodeDefaults == 'none' )
		{
			showOOSMessage = false;
		}

		if ( ( widgetConfig.noOnlineStock != undefined && widgetConfig.noOnlineStock != null && showOOSMessage) )
			$('#'+onlineContainer).append('<div class="oosmessage">' + widgetConfig.noOnlineStock + '</div>');
	}

	if ( widgetConfig.featureCollapseMinimum != undefined && widgetConfig.featureCollapseMinimum > 0 )
	{
		//WTBLogging('featureCollapseMinimum: ' + widgetConfig.featureCollapseMinimum + '|' + productRetailers.length);

		if ( onlineRetailers <= widgetConfig.featureCollapseMinimum )
		{
			$('#wtb-collapse-btn').hide();
		}	
		else
		{
			$('#wtb-collapse-btn').show();
		}
	}

	if ( widgetConfig.featureCollapse != undefined && widgetConfig.featureCollapse )
	{
		WTBLogging('featureCollapse - Changing variant, checking for collapsed - ', $("#wtb-collapse-btn").attr('class'));
		if ( !$("#wtb-collapse-btn").hasClass("collapsed") ) 
		{
			WTBLogging('featureCollapse - clicking collapsed');
			$("#wtb-collapse-btn").click();
		}
	}

	if ( typeof addExternalOnlineClickHandlers === "function")
	{
		addExternalOnlineClickHandlers();
	}

	if ( widgetConfig.useChildCarousel != undefined && widgetConfig.useChildCarousel )
	{
		// Add required library
		$('head').append('<link rel="stylesheet" href="../styles/splide.min.css" type="text/css" />');
		loadJS('../libraries/splide.min.js', function () {}, document.body);

		//'#'+ currStore.DisplayName + 'BuyNow'
		for ( var storeName in carouselData )
		{
			WTBLogging('Current StoreName: '+ storeName, carouselData[storeName]);

			$('#'+storeName+'BuyNow .btn').unbind('click');

			if ( storeName.indexOf('.') != -1) storeName = storeName.replaceAll('.', '\\.');

			// #Drizly.comBuyNow
			WTBLogging('Adding clickevent to: #'+storeName+'BuyNow .btn', $('#'+storeName+'BuyNow .btn').html());

			$('#'+storeName+'BuyNow .btn').on('click', function(event){
				
				WTBLogging('Caught carousel button click');

				var clickedBtn = this;

				if ( !carouselDisplayed )
				{
					$(clickedBtn).text("hide");
					$(clickedBtn).addClass("btn-selected");

					buildCarousel(clickedBtn);

					carouselDisplayed = true;
					activeCarouselBtn = clickedBtn;
				}
				else
				{
					if ( activeCarouselBtn != clickedBtn )
					{
						hideCarousel(activeCarouselBtn);
					
						$(clickedBtn).text("hide");
						$(clickedBtn).addClass("btn-selected");

						buildCarousel(clickedBtn);

						carouselDisplayed = true;
						activeCarouselBtn = clickedBtn;
					}
					else
					{
						hideCarousel(clickedBtn);
						activeCarouselBtn = null;
					}
				}

				return false;
			});
		}
	}

	if ( widgetConfig.usePostcodeFiltering != undefined && widgetConfig.usePostcodeFiltering )
	{
		WTBLogging('outputOnlineResults - usePostcodeFiltering: ' + currPostCode);
		if ( currPostCode == '' )
		{
			WTBLogging('outputOnlineResults - postalCodeMessaging: ' + widgetConfig.postalCodeMessaging);
			if ( widgetConfig.postalCodeMessaging != undefined && widgetConfig.postalCodeMessaging != '' )
			{
				WTBLogging('outputOnlineResults - ' + widgetConfig.postalCodeMessaging);
				$('#'+onlineContainer).append(widgetConfig.postalCodeMessaging);
			}
		}
	}



	WTBLogging('Calling WTBOnlineLoaded');

	$(document).trigger("WTBOnlineLoaded");

	$('.retailers-online .retailer-block .buy .btn').each(function(){
		var hrefStr = $(this).attr('href');
		if ( hrefStr == null || hrefStr == 'null' )
			$(this).css('pointer-events', 'none'); 
	});

	// Change visibility
	$('.onlineList-loading').hide();
	$('.wtb-box-loading').hide();
	$('.wtb-box').show();
	$('.disclaimer').show();

	$('.AddToCartLink').click(function(e){
		AddToCartClick(e);	
	});

	$('.nearby').click(function(){

		$('#localList').hide();
		getOfferDetails();

		$('.nav-tabs a[href="#offline"]').tab('show');
	});
};

function getRetailerList (data) {

	//WTBLogging('getRetailerList: ', data);

	if ( data == undefined ) return;

	for ( var r in data.OnlineRetailers )
	{
		//WTBLogging('getRetailerList: ' + productRetailers.size, data.OnlineRetailers[r].Name);

		productRetailers[data.OnlineRetailers[r].Name] = false;
	}
}

function buildCarousel (clickedBtn) {

	//var parentDiv = $(clickedBtn).parent().parent().parent();
	var parentDiv = $(clickedBtn).parent().parent().parent().parent();

	$('<div class="retailers-online child-carousel"></div>').appendTo(parentDiv);

	var retailerName = $(clickedBtn).attr('data-retailer');
	var childData = carouselData[retailerName];

	event.preventDefault();

	WTBLogging('Child SkuData: ', childData);

	var firstCarouselItem = true;
	var displayCount = 0;

	for ( var i in childData)
	{
		var childOpt = childData[i];
		var activeStr = '';

		if ( widgetConfig.hideOutOfStockChildrenOffers != undefined && widgetConfig.hideOutOfStockChildrenOffers ) 
		{
			if ( childOpt.Availability != "Available" ) continue;
		}

		WTBLogging('Child Entry: ', childOpt);

		// Build Child Entry

		var childDisplayHTML = '<div class="splide__slide">'+
									'<div class="childDetails" style="min-height: 96px;">{wtb_description}</div>'+
									'<div class="childImage" style="height: 150px"><img src="{wtb_imgSrc}" style="max-height: 150px; max-width: 100%;"/></div>'+
									'<div class="childButton">'+
										'<span>' +
											'<a href="{store_deeplink_url}" target="_blank" class="btn btn-buynow " attr-sku="{childDetail-sku}" attr-retailer="{childDetail-retailer}">' +
												'{wtb_buybuttontext}' +
											'</a>' +
										'</span>'+
									'</div>'+
								'</div>';

		if ( firstCarouselItem )
		{
			activeStr = 'active';
			firstCarouselItem = false;
		}

		var labelStr = "Buy Now";

		if ( widgetConfig.carouselBuyNowLabel != undefined && widgetConfig.carouselBuyNowLabel != '' )
		{
			labelStr = widgetConfig.carouselBuyNowLabel;
		}

		var childUrl = childOpt.ProductLink;

		//
		var showAddToCart = true;

		if ( widgetConfig.showAddToCart != undefined ) showAddToCart = widgetConfig.showAddToCart;

		if ( showAddToCart && childOpt.CartLink != undefined && childOpt.CartLink != null)
		{
			labelStr = "Add to Cart";

			if ( widgetConfig.carouselAddToCartLabel != undefined && widgetConfig.carouselAddToCartLabel != '' )
				labelStr = widgetConfig.carouselAddToCartLabel;
		    
			childUrl = childOpt.CartLink;
		}
		//

		var descStr = childOpt.Description;

		if ( widgetConfig.carouselTextAttribute != undefined && widgetConfig.carouselTextAttribute != '' )
		{
			WTBLogging('Carousel - child attributes: ', childOpt.Attributes);

			if ( widgetConfig.carouselTextAttribute.indexOf('{') == -1)
			{
				descStr = childOpt.Attributes[widgetConfig.carouselTextAttribute];
			}
			else
			{
				descStr = widgetConfig.carouselTextAttribute;

				for (var attrName in childOpt.Attributes) {
					var attrVal = childOpt.Attributes[attrName];
					descStr = descStr.replaceAll('{wtb_attr'+attrName+'}', attrVal);
				}
			}
		}

		var productImg = childOpt.ProductImages[0];
		
		if ( widgetConfig.carouselImageAttribute != undefined && widgetConfig.carouselImageAttribute != '' ) {
			productImg = childOpt.Attributes[widgetConfig.carouselImageAttribute];
		}

		WTBLogging('Carousel - productImg | carouselDefaultProductImage: ' + productImg + '|' + carouselDefaultProductImage);

		if ( productImg == undefined || productImg == 'undefined ' || productImg == '' )
		{
			productImg = carouselDefaultProductImage;
		}

		var currHtml = childDisplayHTML.replace('{wtb_description}', descStr);
		currHtml = currHtml.replace('{wtb_active}', activeStr);
		currHtml = currHtml.replace('{wtb_imgSrc}', productImg);
		currHtml = currHtml.replace('{store_deeplink_url}', childUrl);
		currHtml = currHtml.replace('{wtb_buybuttontext}', labelStr);
		currHtml = currHtml.replace('{childDetail-sku}', childOpt.Sku);
		currHtml = currHtml.replace('{childDetail-retailer}', retailerName);

		displayCount++;
		//var currHtml1 = currHtml.replace('{wtb_description}', '('+displayCount+') '+childOpt.Description);
		$('.splide__list').append(currHtml);
	}

	var content = $('#carouselSurround').detach();
	content.prependTo('.retailers-online .child-carousel');

	$('#carouselSurround').show();
	//$('#carouselSurround').carousel();

	var pageSize = 3;

	if ( isMobile ) pageSize = 1;

	var carouselType = 'slide';

	if ( widgetConfig.loopCarousel != undefined && widgetConfig.loopCarousel )
		carouselType = 'loop';

	carouselObj = new Splide( '#carouselSurround', {
		type   : carouselType,
		perPage: pageSize,
		perMove: 1,
		gap: 15,
		padding: 10,
		pagination: false
	} ).mount();

	//padding: 15,
	
	$(document).trigger('WTBCarouselLoaded');

	//var numItems = childData.length;
	var numItems = displayCount;
	var itemCheck = 4;
	
	if ( !isMobile )
	{
		if ( numItems == 1 ) $('.splide__slide').css('left', '100%');
		if ( numItems == 2 ) $('.splide__slide').css('left', '25%');
	}
	else
	{
		itemCheck = 2;
	}

	if ( numItems < itemCheck ) {
		$('.splide__arrow').hide();
	} else {
		$('.splide__slide').css('left', 'unset');
		$('.splide__arrow').show();
	}
	
	// move to best view
	var top = parentDiv.position().top,
	currentScroll = $('#onlineList').scrollTop();

    $('#onlineList').animate({
      scrollTop: currentScroll + top
    }, 500);
};

function hideCarousel (carouselBtn) {
	$(carouselBtn).text(widgetConfig.buyNowLabel);
	$(carouselBtn).removeClass("btn-selected");

	//$('#carouselSurround').unbind();
	carouselObj.destroy();

	$('.splide__list').empty();

	var content = $('#carouselSurround').detach();
	content.appendTo('.wtb-box');

	$('.retailers-online .child-carousel').remove();
	$('#carouselSurround').hide();

	carouselDisplayed = false;
};

function processVariantData (data) {

	var productDescription = data.Description;
	var productSubTitle = data.ModelName;

	var productImage = data.ProductImage;

	if ( (productImage == undefined || productImage == null) && data.Variants[0] != undefined ) 
		productImage = data.Variants[0].ImageUrl;

	var modelName = data.ModelName;

	if ( widgetConfig.titleSrc != undefined && widgetConfig.titleSrc != null && 
		 widgetConfig.titleSrc != "default" )
	{
		if ( widgetConfig.titleSrc == "modelcode" )
		{
			productDescription = data.ModelCode;
		}
		else if ( widgetConfig.titleSrc == "modelname" )
		{
			productDescription = data.ModelName;
		}
		else if ( widgetConfig.titleSrc == "additionalInformation" )
		{
			productDescription = data.AdditionalInformation;
		}
		else if ( widgetConfig.titleSrc.indexOf('{wtb_attr') != -1)
		{
			var titleStr = widgetConfig.titleSrc;

			WTBLogging('titleAttrSrc: ' + attrTitleStr);
			
			for (var attrName in data.Attributes) {
				var attrVal = data.Attributes[attrName];

				WTBLogging('titleAttrSrc update: ' + attrTitleStr + '|' + attrName + '|' + attrVal);

				titleStr = attrTitleStr.replaceAll('{wtb_attr'+attrName+'}', attrVal);
			}

			// Clean up if unfilled values
			while ( attrTitleStr.indexOf("{wtb_attr") != -1 ) 
			{
				var startStr = attrTitleStr.split('{wtb_attr')[0];
				var restStr = attrTitleStr.split('{wtb_attr')[1];
				var endStr = restStr.split('}')[1];

				titleStr = startStr + '' + endStr;
			}

			productDescription = titleStr;
		}
		else
		{
			var attrVal = getProductAttributeValue(data, widgetConfig.titleSrc);
			if ( attrVal != '' ) productDescription = attrVal;
		}
	}

	if ( widgetConfig.subTitleSrc != undefined && widgetConfig.subTitleSrc != null && 
		 widgetConfig.subTitleSrc != "default" )
	{
		if ( widgetConfig.subTitleSrc == "modelcode" )
		{
			productSubTitle = data.ModelCode;
		}
		else if ( widgetConfig.subTitleSrc == "modelname" )
		{
			productSubTitle = data.ModelName;
		}
		else if ( widgetConfig.subTitleSrc == "additionalInformation" )
		{
			productSubTitle = data.AdditionalInformation;
		}
		else if ( widgetConfig.subTitleSrc.indexOf('{wtb_attr') != -1)
		{
			var subTitleStr = widgetConfig.subTitleSrc;

			WTBLogging('subTitleSrc: ' + subTitleStr);
			
			for (var attrName in data.Attributes) {
				var attrVal = data.Attributes[attrName];

				WTBLogging('subTitleSrc update: ' + subTitleStr + '|' + attrName + '|' + attrVal);

				subTitleStr = subTitleStr.replaceAll('{wtb_attr'+attrName+'}', attrVal);
			}

			// Clean up if unfilled values
			while ( subTitleStr.indexOf("{wtb_attr") != -1 ) 
			{
				var startStr = subTitleStr.split('{wtb_attr')[0];
				var restStr = subTitleStr.split('{wtb_attr')[1];
				var endStr = restStr.split('}')[1];

				subTitleStr = startStr + '' + endStr;
			}

			productSubTitle = subTitleStr;
		}
		else if ( widgetConfig.subTitleSrc == "empty" )
		{
			productSubTitle = "";
		}
		else
		{
			var attrVal = getProductAttributeValue(data, widgetConfig.subTitleSrc);
			if ( attrVal != '' ) productSubTitle = attrVal;
		}
	}

	if ( widgetConfig.titleAttrSrc != undefined && widgetConfig.titleAttrSrc != null && 
		 widgetConfig.titleAttrSrc != "default" )
	{
		var titleAttrStr = '';

		if ( widgetConfig.titleAttrSrc == "modelcode" )
		{
			titleAttrStr = data.ModelCode;
		}
		else if ( widgetConfig.titleAttrSrc == "modelname" )
		{
			titleAttrStr = data.ModelName;
		}
		else if ( widgetConfig.titleAttrSrc == "additionalInformation" )
		{
			titleAttrStr = data.AdditionalInformation;
		}
		else if ( widgetConfig.titleAttrSrc.indexOf('{wtb_attr') != -1)
		{
			var attrTitleStr = widgetConfig.titleAttrSrc;

			WTBLogging('titleAttrSrc: ' + attrTitleStr);
			
			for (var attrName in data.Attributes) {
				var attrVal = data.Attributes[attrName];

				WTBLogging('titleAttrSrc update: ' + attrTitleStr + '|' + attrName + '|' + attrVal);

				attrTitleStr = attrTitleStr.replaceAll('{wtb_attr'+attrName+'}', attrVal);
			}

			// Clean up if unfilled values
			while ( attrTitleStr.indexOf("{wtb_attr") != -1 ) 
			{
				var startStr = attrTitleStr.split('{wtb_attr')[0];
				var restStr = attrTitleStr.split('{wtb_attr')[1];
				var endStr = restStr.split('}')[1];

				attrTitleStr = startStr + '' + endStr;
			}

			titleAttrStr = attrTitleStr;
		}
		else if ( widgetConfig.titleAttrSrc == "empty" )
		{
			titleAttrStr = "";
		}
		else
		{
			var attrVal = getProductAttributeValue(data, widgetConfig.titleAttrSrc);
			if ( attrVal != '' ) titleAttrStr = attrVal;
		}

		$('#title_attributes').html(titleAttrStr);
	}

	// process attributes
	for (var x in data.Attributes) {
        var attribute = data.Attributes[x];

        //WTBLogging('attribute lookup: ', attribute);

        var labelAttr = "NAME_GROUP";

        if ( widgetConfig.productLabelSrc != undefined && widgetConfig.productLabelSrc != '' )
        	labelAttr = widgetConfig.productLabelSrc;

        if (x == labelAttr) {
			productLabels[model] = attribute;
        }

        if (x == "SIZE" ) {
			productSizes[model] = attribute;
        }
    }

    //WTBLogging('dataVariants: ', data.Variants);

    if ( data.Variants.length > 0 )
    {
    	// process products
		for ( var p in data.Variants )
		{
			var product = data.Variants[p];

			//WTBLogging('variant product: ' + p , product)

			if ( widgetConfig.plrssLookup == undefined || widgetConfig.plrssLookup == null || widgetConfig.plrssLookup == "modelname")
			{
				productModels[productModels.length] = product.ModelName;
			}
			else if ( widgetConfig.plrssLookup == "modelcode" )
			{
				productModels[productModels.length] = product.ModelCode;
			}

			// Grab labels and sizes
			for (var x in data.Attributes) {
	            var attribute = data.Attributes[x];

		        var labelAttr = "NAME_GROUP";

		        if ( widgetConfig.productLabelSrc != undefined && widgetConfig.productLabelSrc != '' )
		        	labelAttr = widgetConfig.productLabelSrc;

	            if (attribute.name == labelAttr ) {
					productLabels[product.ModelName] = attribute.value;
	            }

	            if (attribute.name == "SIZE" ) {
					productSizes[product.ModelName] = attribute.value;
	            }
	        }
		}	
    }

	if ( widgetConfig.modelNameTextFormat != undefined && widgetConfig.modelNameTextFormat != null )
	{

		var modelText = "";
		if(widgetConfig.modelNameTextFormat.indexOf("{wtb_model}") != -1 ){
			modelText = widgetConfig.modelNameTextFormat.replace("{wtb_model}", modelName);
		}

		if(widgetConfig.modelNameTextFormat.indexOf("{wtb_model_code}") != -1 ){
			modelText = widgetConfig.modelNameTextFormat.replace("{wtb_model_code}", data.ModelCode);
		}	

		$('#local_model_name').html(modelText);
		productSubTitle = modelText;
	}
	
	if ( widgetConfig.producPageText != undefined && widgetConfig.producPageText != null )
	{
		var productUrl = "additionalInfo";
		var modelText = "<a href=" + productUrl + ">" + widgetConfig.producPageText + "</a>";
		$('#product_link').html(modelText);
		$('#local_product_link').html(modelText);
	}

	var dropdownStr = getProductAttributeValue(data, widgetConfig.dropdownSrc);
	var extraStr = getProductAttributeValue(data, widgetConfig.extraVariantSrc);

	extraVariantLookup[cleanString(dropdownStr+'-'+extraStr)] = data.ModelName;

	if ( extraVariantAttrLookup[dropdownStr] == undefined )
	{
		extraVariantAttrLookup[dropdownStr] = [];
	}

	extraVariantAttrLookup[dropdownStr][extraStr] = extraStr;

	if ( widgetConfig.extraVariantLocation != undefined && widgetConfig.extraVariantLocation != null && 
		 widgetConfig.extraVariantLocation != "" )
	{
		if ( widgetConfig.extraVariantSrc != undefined && widgetConfig.extraVariantSrc != null && 
		 	 widgetConfig.extraVariantSrc != "" )
		{
			for ( var p in data.Variants )
			{
				var product = data.Variants[p];

				attrVal = getProductAttributeValue(product, widgetConfig.extraVariantSrc);

				// Build variant lookup
				var dropdownVal = getProductAttributeValue(product, widgetConfig.dropdownSrc);

				var lookupVal = cleanString(dropdownVal+'-'+attrVal);

				extraVariantLookup[lookupVal] = product.ModelName;

				if ( extraVariantAttrLookup[dropdownVal] == undefined )
				{
					extraVariantAttrLookup[dropdownVal] = [];
				}

				extraVariantAttrLookup[dropdownVal][attrVal] = attrVal;
			}

			WTBLogging('extraVariant List built: ', extraVariantLookup);
			WTBLogging('extraVariant Attr List built: ', extraVariantAttrLookup);

			extraAttrDropDown = buildAttrVariantDropdown(extraVariantAttrLookup[dropdownStr]);

			attrVariantAdded = true;
		}
	}

	/* Work in progress*/
	/*&& 
		 widgetConfig.useTypeAheadDropdown != undefined && !widgetConfig.useTypeAheadDropdown*/
	
	if ( widgetConfig.useCategoryDropdowns != undefined && widgetConfig.useCategoryDropdowns && !variantDropdownLoaded )
	{
		getCategoryProducts();
	}
	else if ( widgetConfig.variantDropdown != undefined && widgetConfig.variantDropdown != null && 
		 widgetConfig.variantDropdown != "none" && !productGroup )
	{
		buildVariantDropdown(data);
	}

	if ( widgetConfig.useTypeAheadDropdown != undefined && !widgetConfig.useTypeAheadDropdown )
	{
		buildTypeAheadDropdown();
	}

	//WTBLogging('attrSelect: ', $('#attrSelect'));

	if ( attrVariantAdded && $('#attrSelect').html() == undefined )
	{
		WTBLogging('Adding extraVariantDropdown');
		$(widgetConfig.extraVariantLocation).append(extraAttrDropDown);
	}

	if ( widgetConfig.variantDropdown != undefined && widgetConfig.variantDropdown != null && 
		 widgetConfig.variantDropdown != "none" )
	{
		addDropdownHandlers();
		$('#variantSelect').show();
        if (widgetConfig.startTab = "local" && widgetConfig.variantDropdown == "swap")
        {
            $('#variantSelect').hide();
        }
    }

	if ( widgetConfig.hideProductLogo != undefined && widgetConfig.hideProductLogo != null && 
		 widgetConfig.hideProductLogo )
	{
		$('.product_logo').hide();
		$('#local_product_logo').hide();
	}
	else
	{
		WTBLogging('productImage: ' + productImage);
		if ( productImage == null || productImage == '') {

			if ( data.OnlineRetailers[0] != undefined && data.OnlineRetailers[0].ProductImages[0] != undefined ) {
				productImage = data.OnlineRetailers[0].ProductImages[0];
			} else {
				lang = GetURLParameter("lang");
			    if ( lang == "" ) lang = GetURLParameter("type");

			    var dir = profileId;
			    if ( lang != "" )
			    {
			        dir = profileId + "/" + lang;
				}
				
				var fullConfigUrl = configUrl.replace('{0}', dir);

				productImage =  "../config/"+dir+"/"+profileId+"-logo.png";	
			}
		}

		if ( widgetConfig.useBrandLogo != undefined && widgetConfig.useBrandLogo ) 
		{		
			lang = GetURLParameter("lang");
		    if ( lang == "" ) lang = GetURLParameter("type");

		    var dir = profileId;
		    if ( lang != "" )
		    {
		        dir = profileId + "/" + lang;
			}
			
			var fullConfigUrl = configUrl.replace('{0}', dir);

			productImage =  "../config/"+dir+"/"+profileId+"-logo.png";
		}

		if ( widgetConfig.productImageAttribute != undefined && widgetConfig.productImageAttribute != '' )
		{
			var attrVal = getProductAttributeValue(data, widgetConfig.productImageAttribute);
			if ( attrVal != '' ) productImage = attrVal;
		}

		var updateProductLogo = true;
		if ( widgetConfig.allVariants && onlineRetailers > 0 ) updateProductLogo = false;

		if ( widgetConfig.allVariants && $('.wtb-online .retailers-online') != undefined ) updateProductLogo = false;

		if ( $('.product_logo').attr('src') == '' ) updateProductLogo = true; 
		if ( updateProductLogo )
		{
			$('.product_logo').attr('src', productImage);
			$('#local_product_logo').attr('src', productImage);
		}				
	}
	
	var setProductData = true;

	if ( (productGroup || multiModel) && productDataDisplayed ) setProductData = false;

	if ( setProductData )
	{
		if ( widgetConfig.titlePrefix != undefined )
			productDescription = widgetConfig.titlePrefix + productDescription;

		if ( widgetConfig.titleSuffix != undefined )
			productDescription = productDescription + widgetConfig.titleSuffix;

		$('#product_description').html(productDescription);
		$('#local_product_description').html(productDescription);

		$('#product_subtitle').html(productSubTitle);

		productDataDisplayed = true;	
	}

	//WTBLogging("exiting processVariantData");
};

function buildVariantDropdown(data)
{
	if ( widgetConfig.initialVariantsOnly != undefined && widgetConfig.initialVariantsOnly )
	{
		if ( variantDropdownLoaded ) return;
	}
	
	var validDropdown = false;

    var dropdownStr = '<select id="variantSelect" name="variantSelect" tabindex="2">'; //onChange="updateModel"

	var optionBaseStr = '<option data-desc="{ddDataDesc}" data-src="{ddSource}" data-attr-size="{ddSize}" label="{ddLabel}" value="{ddValue}">{ddDesc}</option>';

	var descStr = data.Description;

	WTBLogging('descStr: ' + descStr + ' | ' + widgetConfig.dropdownSrc, data.Attributes);

	if ( widgetConfig.dropdownSrc != undefined && widgetConfig.dropdownSrc != null && widgetConfig.dropdownSrc != '' )
	{
        var attrVal = getProductAttributeValue(data, widgetConfig.dropdownSrc);
        if ( attrVal != '' ) descStr = attrVal;

        WTBLogging('descStr: ' + descStr + " | attrVal: " + attrVal);
	}

	var baseProduct = optionBaseStr.replace('{ddLabel}', descStr);
	baseProduct = baseProduct.replace('{ddDesc}', descStr);
	baseProduct = baseProduct.replace('{ddValue}', data.ModelName);
	baseProduct = baseProduct.replace('{ddDataDesc}', data.Description);
	baseProduct = baseProduct.replace('{ddSize}', data.Attributes['SIZE']);
	baseProduct = baseProduct.replace('{ddSource}', descStr);

	dropdownStr += baseProduct;

	for ( var p in data.Variants )
	{
		var product = data.Variants[p];

		WTBLogging("variant product: ", product);
		if ( currExtraAttr != '' )
		{
			var extraAttrVal = getProductAttributeValue(product, widgetConfig.extraVariantSrc);

			if ( extraAttrVal != currExtraAttr )
			{
				// not valid, continue processing
				continue;
			}
		}

		var selectStr = product.Description;

		if ( widgetConfig.dropdownSrc != undefined && widgetConfig.dropdownSrc != null && widgetConfig.dropdownSrc != '' )
		{
        	var attrVal = getProductAttributeValue(product, widgetConfig.dropdownSrc);

        	//WTBLogging("attribute val (" + widgetConfig.dropdownSrc + "): " + attrVal);

        	if ( attrVal != '' ) selectStr = attrVal;
    	}

		if ( descStr != selectStr && dropdownStr.indexOf('label="'+selectStr+'"') == -1 )
		{
			var productStr = optionBaseStr.replace('{ddLabel}', selectStr);
			productStr = productStr.replace('{ddDesc}', selectStr);
			productStr = productStr.replace('{ddValue}', product.ModelName);
			productStr = productStr.replace('{ddDataDesc}', product.Description);
			productStr = productStr.replace('{ddSize}', product.Attributes['SIZE']);
			productStr = productStr.replace('{ddSource}', selectStr);

			dropdownStr += productStr;

			validDropdown = true;
		}
	}

	dropdownStr += '</select>';

	if ( (widgetConfig.alwaysShowDropdown != undefined && widgetConfig.alwaysShowDropdown) || 
		 validDropdown && !variantDropdownLoaded )
	{	
		if ( widgetConfig.variantText != undefined && widgetConfig.variantText != "" )
		{
			dropdownStr = '<label for="variantSelect" class="variantText" style="display: block">' + widgetConfig.variantText + "</label> " + dropdownStr;
		}

		if ( widgetConfig.variantDropdown == "online" || widgetConfig.variantDropdown == "both" || 
				widgetConfig.variantDropdown == "swap" ) 
		{
			var placementStr = '.product_dropdown';

			if ( widgetConfig.dropdownLocation != undefined && widgetConfig.dropdownLocation != '' )
				placementStr = widgetConfig.dropdownLocation;

			WTBLogging('variantDropdown placementStr: ' + placementStr);
					
			$('.variantText').remove();
			$('#variantSelect').remove();

			$(placementStr).append(dropdownStr);
		}

		if ( widgetConfig.onlineTemplate == "descriptive" && (widgetConfig.variantDropdown == "local" || widgetConfig.variantDropdown == "both") ) 
		{
			$('#input-group').html(dropdownStr);
		} 
		else if ( widgetConfig.variantDropdown == "local" || widgetConfig.variantDropdown == "both" ) 
		{
			$('#local_product_dropdown').html(dropdownStr);
		}

		if ( widgetConfig.variantDropdown == "localsearch"  && !variantDropdownLoaded) 
		{
			$('.map-search.form-inline').prepend(dropdownStr);
			$('#variantSelect').show();
			$('#variantSelect').addClass("form-control");
			variantDropdownLoaded = true;	
		}

        variantDropdownLoaded = true;
	}
}

function buildTypeAheadDropdown () {
	var lookupUrl = typeaheadUrl.replace('{0}', widgetConfig.typeaheadBrand);
	lookupUrl = lookupUrl.replace('{1}', widgetConfig.typeaheadCountry);
	lookupUrl = lookupUrl.replace('{2}', widgetConfig.typeaheadLanguage);

	var a, b, i;
	
	console.log('autocomplete event handler: ', val);
	
	//if ( portalProductRunning || val.length < 3 ) return;
	
	/*close any already open lists of autocompleted values*/
	closeAllLists();
	
	//if (!val) { return false;}
	
	currentFocus = -1;
	/*create a DIV element that will contain the items (values):*/
	a = document.createElement("DIV");
	a.setAttribute("id", e.id + "autocomplete-list");
	a.setAttribute("class", "autocomplete-items");
	/*append the DIV element as a child of the autocomplete container:*/
	e.parentNode.appendChild(a);
	
	typeaheadLookupRunning = true;
	
	$.ajax({
		url: lookupUrl,
		type: 'GET',
		success: function (data) { 
	
			portalProductData = data.Response;
	
			console.log("portalProductData: ", portalProductData);
	
			/*for each item in the array...*/
			for (i = 0; i < portalProductData.length; i++) {
				/*create a DIV element for each matching element:*/
				b = document.createElement("DIV");
				/*make the matching letters bold:*/
				//b.innerHTML = "<strong>" + portalProductData[i].Description.substr(0, val.length) + "</strong>";
				//b.innerHTML += portalProductData[i].Description.substr(val.length);
				b.innerHTML = portalProductData[i].Description;
				/*insert a input field that will hold the current array item's value:*/
				b.innerHTML += "<input type='hidden' attr-model='" + portalProductData[i].ModelName + "' attr-mpn='" + portalProductData[i].Mpn + "' value='" + portalProductData[i].Description + "'>";
				/*execute a function when someone clicks on the item value (DIV element):*/
				b.addEventListener("click", function(e) {
	
					var productDetails = this.getElementsByTagName("input")[0];
	
					suggestionSelected = true;
	
					processSelectedProduct(productDetails);
	
					/*insert the value for the autocomplete text field:*/
					//inp.value = this.getElementsByTagName("input")[0].value;
					/*close the list of autocompleted values,
					(or any other open lists of autocompleted values:*/
					closeAllLists();
				});
				a.appendChild(b);
			}
	
			typeaheadLookupRunning = false;
		},
		error: function (err) {
	
			$('#'+onlineContainer).empty();
	
			/*create a DIV element for each matching element:*/
			b = document.createElement("DIV");
			/*make the matching letters bold:*/
			b.innerHTML = "No Products Found";
			a.appendChild(b);
	
	
			console.log("typeahead Error: ", err);
			portalProductRunning = false;
		}
	})
}

function filterResults (searchVal) {
	var productData = [];

	for (i = 0; i < portalProductData.length; i++) {
		var currData = portalProductData[i];

		console.log('filterResults: ' + searchVal + "|" + currData.ModelName + "|" + currData.Mpn + "|" + currData.Description);

		var testModelName = true;
		var testMpn = true;
		var testDesc = true;

		// validate data before filtering
		if ( currData.ModelName == undefined || currData.ModelName == null ) testModelName = false;
		if ( currData.Mpn == undefined || currData.Mpn == null ) testMpn = false;
		if ( currData.Description == undefined || currData.Description == null ) testDesc = false;

		if ( (testModelName && currData.ModelName.toLowerCase().indexOf(searchVal) != -1) ||
			 (testMpn && currData.Mpn.toLowerCase().indexOf(searchVal) != -1) ||
			 (testDesc && currData.Description.toLowerCase().indexOf(searchVal) != -1) )
		{
			productData[productData.length] = currData;
		}
	}

	displayResults(productData);
}

function displayResults(productData) {

	/*close any already open lists of autocompleted values*/
    closeAllLists();

    e = document.getElementById("searchProduct");

	a = document.createElement("DIV");
	a.setAttribute("id", e.id + "autocomplete-list");
	a.setAttribute("class", "autocomplete-items");
	/*append the DIV element as a child of the autocomplete container:*/
	e.parentNode.appendChild(a);

	console.log('displayResults: ', productData);

    /*for each item in the array...*/
    for (i = 0; i < productData.length; i++) {
        /*create a DIV element for each matching element:*/
        b = document.createElement("DIV");
        /*make the matching letters bold:*/
        //b.innerHTML = "<strong>" + portalProductData[i].Description.substr(0, val.length) + "</strong>";
        //b.innerHTML += portalProductData[i].Description.substr(val.length);
        b.innerHTML = productData[i].Description;
        /*insert a input field that will hold the current array item's value:*/
        b.innerHTML += "<input type='hidden' attr-model='" + productData[i].ModelName + "' attr-mpn='" + productData[i].Mpn + "' value='" + productData[i].Description + "'>";
        /*execute a function when someone clicks on the item value (DIV element):*/
        b.addEventListener("click", function(e) {

        	var productDetails = this.getElementsByTagName("input")[0];

        	suggestionSelected = true;

        	processSelectedProduct(productDetails);

        	/*insert the value for the autocomplete text field:*/
        	//inp.value = this.getElementsByTagName("input")[0].value;
        	/*close the list of autocompleted values,
        	(or any other open lists of autocompleted values:*/
        	closeAllLists();
    	});

        console.log('building entry: ' + productData[i].Description);

        a.appendChild(b);
    }
}

function closeAllLists(elmnt) {
    /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != document.getElementById("searchProduct")) {
        x[i].parentNode.removeChild(x[i]);
      }
    }
}

function buildAttrVariantDropdown (attrData) {

	var dropdownStr = '<select id="attrSelect" name="attrSelect">';

	var optionBaseStr = '<option label="{ddLabel}" value="{ddValue}">{ddDesc}</option>';

	for ( var p in attrData )
	{
		var attrVal = attrData[p];

		var productStr = optionBaseStr.replace('{ddLabel}', attrVal);
		productStr = productStr.replace('{ddDesc}', attrVal);
		productStr = productStr.replace('{ddValue}', attrVal);

		dropdownStr += productStr;
	}

	dropdownStr += '</select>';
	//

	if ( widgetConfig.extraVariantText != undefined && widgetConfig.extraVariantText != "" )
	{
		dropdownStr = '<div class="attrVariantText">' + widgetConfig.extraVariantText + "</div> " + dropdownStr;
	}

	return dropdownStr;
}

function addProductGroupLoader() {

	if ( !groupDropdownLoading )
	{
		groupDropdownLoading = true;
	}
	else
	{
		return;
	}
	
	var loaderStr = '<div class="loader-small"></div>';

	if ( widgetConfig.variantDropdown == "online" || widgetConfig.variantDropdown == "both" || 
			widgetConfig.variantDropdown == "swap" ) 
	{
		$('.product_dropdown').html(loaderStr);
	}

	if ( widgetConfig.onlineTemplate == "descriptive" && (widgetConfig.variantDropdown == "local" || widgetConfig.variantDropdown == "both") ) 
	{
		$('#input-group').html(loaderStr);
	} 
	else if ( widgetConfig.variantDropdown == "local" || widgetConfig.variantDropdown == "both" ) 
	{
		$('#local_product_dropdown').html(loaderStr);
	}

	if ( widgetConfig.variantDropdown == "localsearch"  && !variantDropdownLoaded) 
	{
		$('.map-search.form-inline').prepend(loaderStr);
	}
}

function buildProductGroupDropdown(groupProductList)
{
	var validDropdown = false;

    var dropdownStr = '<select id="variantSelect" name="variantSelect" tabindex="2">'; //onChange="updateModel"

	var optionBaseStr = '<option label="{ddLabel}" value="{ddValue}">{ddDesc}</option>';

	for ( var model in groupProductList )
	{
		var selectStr = groupProductList[model];

		var productStr = optionBaseStr.replace('{ddLabel}', selectStr);
		productStr = productStr.replace('{ddDesc}', selectStr);
		productStr = productStr.replace('{ddValue}', model);

		dropdownStr += productStr;

		validDropdown = true;
	}

	dropdownStr += '</select>';

	if ( (widgetConfig.alwaysShowDropdown != undefined && widgetConfig.alwaysShowDropdown) || 
		 validDropdown && !variantDropdownLoaded )
	{	
		if ( widgetConfig.variantText != undefined && widgetConfig.variantText != "" )
		{
			dropdownStr = '<label for="variantSelect" class="variantText" style="display: block">' + widgetConfig.variantText + "</label> " + dropdownStr;
		}

		if ( widgetConfig.variantDropdown == "online" || widgetConfig.variantDropdown == "both" || 
				widgetConfig.variantDropdown == "swap" ) 
		{
			$('.product_dropdown').html(dropdownStr);
		}

		if ( widgetConfig.onlineTemplate == "descriptive" && (widgetConfig.variantDropdown == "local" || widgetConfig.variantDropdown == "both") ) 
		{
			$('#input-group').html(dropdownStr);
		} 
		else if ( widgetConfig.variantDropdown == "local" || widgetConfig.variantDropdown == "both" ) 
		{
			$('#local_product_dropdown').html(dropdownStr);
		}

		if ( widgetConfig.variantDropdown == "localsearch"  && !variantDropdownLoaded) 
		{
			$('.map-search.form-inline').prepend(dropdownStr);
			$('#variantSelect').show();
			$('#variantSelect').addClass("form-control");
			variantDropdownLoaded = true;	
		}

        variantDropdownLoaded = true;
	}
}

function getProductAttributeValue(product, attributeName)
{
	var attrVal = '';

	// process attributes
	for (var x in product.Attributes) {
        var attribute = product.Attributes[x];

        if (x == attributeName ) {
			attrVal = attribute;
        }
    }

    return attrVal;
}

//Directions 
function direction(dest,lat,lng){

	$('#direction').show();
	$('#results').hide();
	$('#DirectionPrint').show();
	$('#dest-direction').val(dest);


   $('#direction-form').submit(function() {
   
	var ori = $('#origin-direction').val();

	   map.setZoom(7);
	   currMapZoom = 7;

	   var currentLatLng = new google.maps.LatLng(lat, lng);

	   WTBLogging('Map SetCenter (5): ', currentLatLng);

	   map.setCenter(currentLatLng);
	   
		   var directionsRenderer = new google.maps.DirectionsRenderer();
		   directionsRenderer.setMap(map);    
		   directionsRenderer.setPanel(document.getElementById('direction'));
			
		   var directionsService = new google.maps.DirectionsService();
		   
		postPetsV2Event("DirectionsLookup");

		   /////////////////////
		   default_unit_system = google.maps.UnitSystem.METRIC;
		   if(current_unit=="km"){
		   default_unit_system = google.maps.UnitSystem.METRIC;
		   } else if(current_unit=="miles"){
		   default_unit_system = google.maps.UnitSystem.IMPERIAL;
		   }
		   /////////////////////
		   
		   var request = {
			 origin: ori, 
			 destination: dest,
			 travelMode: google.maps.DirectionsTravelMode.DRIVING,
			 unitSystem: default_unit_system
		   };
		   directionsService.route(request, function(response, status) {
			 if (status == google.maps.DirectionsStatus.OK) {
				$('#DirectionPrint').prop('disabled', false);
			   directionsRenderer.setDirections(response);
			 } else {
			   //alert('Error: ' + status);
			   $('#direction').append('<table width="100%"><tr><td>Direction not found. Please try again.</td></tr></table>');
			 }	
		   });
		   
	 $('#direction-form').nextAll().remove();
	 return false;
	 
   });
   $("#DirectionPrint").click(function () {
		   var divContents = $(".adp").html();
		   var printWindow = window.open('', '', 'height=auto,width=800,overflow: auto');
		   printWindow.document.write('<html><head><title>DIV Contents</title>');
		   printWindow.document.write('</head><body >');
		   printWindow.document.write(divContents);
		   printWindow.document.write('</body></html>');
		   printWindow.document.close();
		   printWindow.print();
	   });	

}

function directionBack(){
	$('#direction').hide();
	$('#DirectionPrint').prop('disabled', true);
	$('#DirectionPrint').hide();
	$('#results').show();
	resetDirection();
}

function resetDirection(){
   gmap_location_lookup($('#address').val(),$('input[name=distance]:radio:checked').val(),'');
	$('#direction').html('');
	$('#direction').html('<h2 class="title-bg" style="padding-bottom:10px !important; ">Directions</h2><form method="post" id="direction-form"><p><table><tr><td>'+ssf_origin+':</td><td><input id="origin-direction" name="origin-direction" class="orides-txt" type=text /></td></tr><tr><td>'+ssf_destination+':</td><td><input id="dest-direction" name="dest-direction" class="orides-txt" type=text readonly /></td></tr></table><div id="get-dir-button" class="get-dir-button"><input type=submit id="get-direction" class="btn" value="'+ssf_store_get_direction+'"><input type="button" id="DirectionPrint" class="btn btnPrint" disabled="disabled" style="margin-left:5px; display:none;" value="'+ssf_store_print+'"/> <a href="javascript:directionBack()">'+ssf_back_btn+'</a></div></p></form>');
   var origin_autocomplete = new google.maps.places.Autocomplete($("#origin-direction")[0], {});
}

function generateDirections () {

    var firstResult = $(".pac-container .pac-item:first").text();
    var searchInputBox = $(".start-input-box > input").val();

    var suggestion_selected = $(".pac-item-selected").length > 0;
    var selected_text = $(".pac-item-selected").text();


    var lookupAddress = firstResult;
    if ( !suggestion_selected && firstResult == "" ) lookupAddress = searchInputBox;
    if ( suggestion_selected ) lookupAddress = selected_text;


    place_changed();
    var geocoder = new google.maps.Geocoder();
    geocoder.geocode({"address": lookupAddress}, function (results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
            calculateAndDisplayRoute(results[0].geometry.location);
        }
    });
};

function calculateAndDisplayRoute (startLocation) {

    var startAddress = new google.maps.LatLng(startLocation.lat(), startLocation.lng());
    var destAddress = new google.maps.LatLng(directionsStore.Latitude, directionsStore.Longitude);

    directionsDisplay.setMap(map);

    directionsService.route({
      origin: startAddress,
      destination: destAddress,
      travelMode: 'DRIVING'
    }, function(response, status) {
      if (status === 'OK') {
        directionsUpdate = true;

        var directionsRoute = document.getElementById('directionRoute');

        directionsDisplay.setPanel(directionsRoute);
        directionsDisplay.setDirections(response);
/*
height: 306px;
    margin-bottom: 0px;
    margin-right: 0px;
    direction: ltr;
    max-height: none;
    overflow-y: scroll;
*/
        $('#directionRoute').css('height', '306px');
        $('#directionRoute').css('overflow-y', 'scroll');
  /*      directionsRoute.css('', '');
        directionsRoute.css('', '');
        directionsRoute.css('', '');
*/
      } else {
        window.alert('Directions request failed due to ' + status);
      }
    });
}

function createDirectionsURL (lon, lat){
	var directionsBase = 'https://www.google.com/maps/dir/'

	var dirURL = directionsBase + currPlace.replace(/ /g, '+') + "/'" + lat + "," + lon + "'";

	return dirURL;
}

function createNamedDirectionsURL (store){
	var directionsBase = 'https://www.google.com/maps/dir/'

	var addressStr = store.StreetLine1+'+'+store.City+'+'+store.State+'+'+store.PostalCode;

	var dirURL = directionsBase + currPlace.replace(/ /g, '+') + "/" + addressStr.replace(/ /g, '+');

	return dirURL;
}

//Tag Managers
function addExternalPixels () {
	var GTMScriptAddition = 
		"<!-- Google Tag Manager -->" +
		"<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':" + 
					"new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0]," +
					"j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=" +
					"'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);" +
				  "})(window,document,'script','{gtm_dataLayerObj}','{gtm_id}');</script>" +
		"<!-- End Google Tag Manager -->";

	var GTMNoScriptAddition = 
		"<!-- Google Tag Manager (noscript) -->" + 
		"<noscript>" + 
			"<iframe src='https://www.googletagmanager.com/ns.html?id={gtm_id}' height='0' width='0' style='display:none;visibility:hidden'></iframe>" + 
		"</noscript>" +
		"<!-- End Google Tag Manager (noscript) -->";

	var FacebookPixelAddition = 
		"<!-- Facebook Pixel Code -->" +
		"<script>" +
			"!function(f,b,e,v,n,t,s)" +
			"{if(f.fbq)return;n=f.fbq=function()" +
			"{n.callMethod? n.callMethod.apply(n,arguments):n.queue.push(arguments)};" +
			"if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';" +
			"n.queue=[];t=b.createElement(e);t.async=!0;" +
			"t.src=v;s=b.getElementsByTagName(e)[0];" +
			"s.parentNode.insertBefore(t,s)}(window, document,'script'," +
			"'https://connect.facebook.net/en_US/fbevents.js');" +
			"fbq('init', '{fb_id}');" +
			"fbq('track', 'PageView');" +
		"</script>" +
		"<noscript><img height='1' width='1' style='display:none'" +
			"src='https://www.facebook.com/tr?id={fb_id}&ev=PageView&noscript=1'" +
		"/></noscript>" +
		"<!-- End Facebook Pixel Code -->";

	if ( widgetConfig.GoogleTagManagerID != undefined && widgetConfig.GoogleTagManagerID != null && 
		 widgetConfig.GoogleTagManagerID != "" )
	{
		var dataLayerStr = "dataLayer";

		if ( widgetConfig.GoogleTagManagerObject != undefined && widgetConfig.GoogleTagManagerObject != '' )
			dataLayerStr = widgetConfig.GoogleTagManagerObject;

		GTMScriptAddition = GTMScriptAddition.replace('{gtm_id}', widgetConfig.GoogleTagManagerID);
		GTMScriptAddition = GTMScriptAddition.replace('{gtm_dataLayerObj}', dataLayerStr);
		GTMNoScriptAddition = GTMNoScriptAddition.replace('{gtm_id}', widgetConfig.GoogleTagManagerID);

		$("head").append(GTMScriptAddition);
		$("body").prepend(GTMNoScriptAddition);
	}

	if ( widgetConfig.FacebookPixelID != undefined && widgetConfig.FacebookPixelID != null && 
		 widgetConfig.FacebookPixelID != "" )
	{
		FacebookPixelAddition = FacebookPixelAddition.replace('{fb_id}', widgetConfig.FacebookPixelID);

		$("head").append(FacebookPixelAddition);
	}
}

//**UI Helpers
//Store Helpers - Phone, Hours, Directions
function formatPhoneNumber (num) {
	
	if ( widgetConfig.useExternalPhoneFormat != undefined &&  widgetConfig.useExternalPhoneFormat )
	{
		if ( typeof externalPhoneFormat === "function" )
		{
			//WTBLogging("Calling orderLocalWTBResults");
			var formattedNum = externalPhoneFormat(num);
			return formattedNum;
		}
	}

	if ( num == null || num.toLowerCase().indexOf('unk-') != -1 ) return "Not Available.";

    var str = num.toString();

    var matched = str.match(/\d+\.?\d*/g);

    if ( matched != null )
    {
        // 10 digit
        if (matched.length === 3) {
            return '(' + matched[0] + ') ' + matched[1] + '-' + matched[2];
            // 7 digit
        } else if (matched.length === 2) {
            return matched[0] + '-' + matched[1].substring(0, 3) + '-' + matched[1].substring(3);
        }
        // no formatting attempted only found integers (i.e. 1234567890)
        else if (matched.length === 1) {
            // 10 digit
            if (matched[0].length === 10) {
                return '(' + matched[0].substr(0, 3) + ') ' + matched[0].substr(3, 3) + '-' + matched[0].substr(6);
            }
            // 7 digit
            if (matched[0].length === 7) {
                return matched[0].substr(0, 3) + '-' + matched[0].substr(3);
            }
        }
    }

    // Format failed, return number back
    return num;
};

function cleanString(origStr) {
	var cleanStr = origStr.replaceAll('/', '');
	cleanStr = cleanStr.replaceAll('(', '');
	cleanStr = cleanStr.replaceAll(')', '');
	cleanStr = cleanStr.replaceAll(' ', '');
	cleanStr = cleanStr.replaceAll('.', '');
	cleanStr = cleanStr.replaceAll(',', '');
	cleanStr = cleanStr.replaceAll('\'', '');

	return cleanStr;
};

function WTBLogging(logStr, extra) {

	if ( window.location.href.toLowerCase().indexOf('where-to-buy') == -1 ) 
		loggingEnabled = true;

	if ( loggingEnabled ) console.log(logStr, extra);
};

function getTodaysHoursFromPCAT (hoursString, twelveHour, timeZone, mapDisplay) {		

	var hoursText = '';
	var startHour = '';
    var startMinute = '';
    var endHour = '';
    var endMinute = '';

	if (timeZone == null ) timeZone = "America/New_York";

	timeZone = "America/New_York";

	if ( widgetConfig.dateDefaultTimezone != undefined && widgetConfig.dateDefaultTimezone != null )
		timeZone = widgetConfig.dateDefaultTimezone;

	//WTBLogging("getTodaysHoursFromPCAT - CEdev : " + hoursString + "|" + twelveHour + "|" + timeZone);

	try 
	{		
		//WTBLogging("getHours Timezone: " + Intl.DateTimeFormat().resolvedOptions().timeZone);

		if ( widgetConfig.dateUseTimezone != undefined && widgetConfig.dateUseTimezone != null && 
			 widgetConfig.dateUseTimezone )
			timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;

		// If this has come back null, good chance that it's IE and can't handle this format 
		var storeDate = new Date();

		if (timeZone != null )
		storeDate = new Date(new Date().toLocaleString("en-US", {timeZone: timeZone}));

		var userDate = new Date().toLocaleString();

		//WTBLogging("storeDate : ", storeDate);
		//WTBLogging("userDate : ", userDate);

		if ( hoursString.indexOf(' ') != -1 )
		{
			var hoursSplit = hoursString.split(' ');

			var extractedHours = '';

			//WTBLogging('timeFormat - hoursSplit: ', hoursSplit);

			for ( var i = 0; i < hoursSplit.length; i++)
			{
				var part = hoursSplit[i];

				//WTBLogging('timeFormat - hoursSplit part: ', part);

				// find days sections
				if ( part.endsWith(':') )
				{
					var cleanedDay = part.split(':')[0];

					//WTBLogging('timeFormat - cleanedDay|currDay: ' + cleanedDay + "|" + storeDate.getDay());

					if ( ''+cleanedDay === ''+storeDate.getDay() )
					{
						i++;
						var foundHours = hoursSplit[i];

						//WTBLogging('timeFormat - foundHours: ' + foundHours);

						var todayDetails = foundHours.split(':');
					    var openHour = todayDetails[0];
					    var openMinute = todayDetails[1];
					    var closeHour = todayDetails[2];
					    var closeMinute = todayDetails[3].split(',')[0];

					    if ( hoursText != '' ) hoursText += ', '
					    hoursText += formatHoursText(twelveHour, openHour, openMinute, closeHour, closeMinute);

					    // update control variables
					    if ( startHour == '' ) startHour = openHour;
					    if ( startMinute == '' ) startMinute = openMinute;
					    endHour = closeHour;
					    endMinute = closeMinute;
					}
				}
			}
		}
		else
		{
			var allDays = hoursString.split(',');

			//WTBLogging("getTodaysHoursFromPCAT allDays: ", allDays);

			var todaysStoreHours = allDays.filter(function(d) {
				//WTBLogging("getting day value: " + d.charAt(0) + "|" + storeDate); 
				return (parseInt(d.charAt(0)) - 1) === storeDate.getDay();
			})[0];

			//WTBLogging("todaysStoreHours: ", todaysStoreHours);

			if ( todaysStoreHours == undefined || todaysStoreHours == null ) return "";

			//WTBLogging("getTodaysHoursFromPCAT todaysStoreHours: ", todaysStoreHours);
		 
			if((todaysStoreHours.indexOf("00:00:23:59") > -1) ||
				(todaysStoreHours.indexOf("12:00PM:11:59AM") > -1) ||
				(todaysStoreHours.indexOf("12:00AM:11:59PM") > -1)
			){ 
				var twentyFourHourStr = "Open 24 Hours";

				if ( widgetConfig.twentyFourHourLabel != undefined && widgetConfig.twentyFourHourLabel != '' )
					twentyFourHourStr = widgetConfig.twentyFourHourLabel;

				return twentyFourHourStr;
			}

			// Full hours details
		    var todayDetails = todaysStoreHours.split(':');
		    var openHour = todayDetails[1];
		    var openMinute = todayDetails[2];
		    var closeHour = todayDetails[3];
		    var closeMinute = todayDetails[4];

		    // update control variables
		    if ( startHour == '' ) startHour = openHour;
		    if ( startMinute == '' ) startMinute = openMinute;
		    endHour = closeHour;
		    endMinute = closeMinute;

		    hoursText = formatHoursText(twelveHour, openHour, openMinute, closeHour, closeMinute);
		}

		//WTBLogging("Hours Text: " + hoursText);

		if ( widgetConfig.simpleTimeDisplay != undefined && widgetConfig.simpleTimeDisplay )
			return hoursText;

		// Check times for open and closed
		var openingTime = new Date(storeDate.getTime());  
		openingTime.setHours(startHour);	  
		openingTime.setMinutes(startMinute);	  
		openingTime.setSeconds(0);

		var closingTime = new Date(storeDate.getTime());
		closingTime.setHours(endHour);
		closingTime.setMinutes(endMinute);
		closingTime.setSeconds(0);

		var openingTimeCurrentTimeDiff = (storeDate.getTime() - openingTime.getTime()) / (1000 * 60 * 60);
		var closingTimeCurrentTimeDiff = (storeDate.getTime() - closingTime.getTime()) / (1000 * 60 * 60);     

		//WTBLogging("getTodaysHoursFromPCAT times: " + openingTime + "|" + closingTime + "|" + storeDate + "|" + 
		//				openingTimeCurrentTimeDiff + "|" + closingTimeCurrentTimeDiff);		
		  
		//if ( closingTime < openingTime ) closingTimeCurrentTimeDiff 

		//if (endHour < startHour) WTBLogging("getTodaysHoursFromPCAT: endHour is before startHour");

		if( ( openingTimeCurrentTimeDiff > 0 && closingTimeCurrentTimeDiff < 0 ) || 
		   ( openingTimeCurrentTimeDiff > 0 && closingTimeCurrentTimeDiff > 0 && (endHour < startHour) ) )
		{    
			if(closingTimeCurrentTimeDiff > -1 && !(endHour < startHour))
			{	
				var minutesUntilClosing = Math.round(Math.abs(closingTimeCurrentTimeDiff * 60));

				var closingSoon = "Closing Soon: closed";
				if ( widgetConfig.hoursClosedSoonLabel != undefined && widgetConfig.hoursClosedSoonLabel != null ) 
					closingSoon = widgetConfig.hoursClosedSoonLabel;

				WTBLogging('openingClosingTimeDisplay - closed input', todaysStoreHours);

				var tmpcloseHour = todaysStoreHours.split(":")[3];
				var tmpCloseMins = todaysStoreHours.split(":")[4];

				var input = tmpcloseHour;

				if ( tmpCloseMins != '00' ) input += ':' + tmpCloseMins;

				return closingSoon + " " + openingClosingTimeDisplay(input);  
			}

			var timeResult = "Open";

			if ( widgetConfig.hoursOpenLabel != undefined && widgetConfig.hoursOpenLabel != null ) 
				timeResult = widgetConfig.hoursOpenLabel;

			if ( widgetConfig.dateShowHours != undefined && widgetConfig.dateShowHours != null && 
				 widgetConfig.dateShowHours )
			{
				timeResult += ": " + hoursText;
			}

			if ( mapDisplay != undefined && mapDisplay != null &&
				 widgetConfig.mapShowHours != undefined && widgetConfig.mapShowHours )
			{
				timeResult += ": " + hoursText;
			}

			//WTBLogging("getTodaysHoursFromPCAT: open return " + timeResult);

			return  timeResult;
		} 		
		else if ( (openingTimeCurrentTimeDiff > 0 && closingTimeCurrentTimeDiff < 0) == false )
		{    
			if(openingTimeCurrentTimeDiff > -1 && closingTimeCurrentTimeDiff < 0)
			{			
				var minutesUntilOpen = Math.round(Math.abs(openingTimeCurrentTimeDiff * 60));

				var openingSoon = "Closed: opening";
				if ( widgetConfig.hoursOpeningSoonLabel != undefined && widgetConfig.hoursOpeningSoonLabel != null ) 
					openingSoon = widgetConfig.hoursOpeningSoonLabel;

				var tmpcloseHour = todaysStoreHours.split(":")[1];
				var tmpCloseMins = todaysStoreHours.split(":")[2];

				var input = tmpcloseHour;

				if ( tmpCloseMins != '00' ) input += ':' + tmpCloseMins;

				WTBLogging('openingClosingTimeDisplay - opening input - ' + tmpCloseMins + '|' + input, todaysStoreHours);

				return openingSoon + " " + openingClosingTimeDisplay(input); 
			}

			var timeResult = "Closed";

			if ( widgetConfig.hoursClosedLabel != undefined && widgetConfig.hoursClosedLabel != null ) 
				timeResult = widgetConfig.hoursClosedLabel;

			if ( widgetConfig.dateShowHours != undefined && widgetConfig.dateShowHours != null &&
			 	 widgetConfig.dateShowHours )
			{
				timeResult += ": " + hoursText;
			}

			//WTBLogging("getTodaysHoursFromPCAT: closed return " + timeResult);

			return timeResult;
		}

	} 
	catch (err) {
		WTBLogging("getTodaysHoursFromPCAT: caught error: ", err);
	}

	//WTBLogging("getTodaysHoursFromPCAT: return empty");

	return "";	
};

function formatHoursText(twelveHour, openHour, openMinute, closeHour, closeMinute)
{
	var hoursText = '';

    var openAmPm = '';
    var closeAmPm = '';

    if (twelveHour) {
        //Opening
        if (parseInt(openHour) < 12) {
            //AM opening.
            openAmPm = 'am';

            if (openHour === '0') {
                openHour = '12';
            }
        }
        else {
            //PM opening.
            openAmPm = 'pm';

            if (openHour != '12') {
                openHour = (parseInt(openHour) - 12).toString();
            }
        }

        //Closing
        if (parseInt(closeHour) < 12) {
            //AM closing.
            closeAmPm = 'am';

            if (closeHour === '0') {
                closeHour = '12';
            }
        }
        else {
            //PM closing.
            closeAmPm = 'pm';

            if (closeHour != '12') {
                closeHour = (parseInt(closeHour) - 12).toString();
            }
        }
    }

    var untilText = 'until';

    if ( widgetConfig.hoursUntilLabel != undefined && widgetConfig.hoursUntilLabel != null ) 
    	untilText = widgetConfig.hoursUntilLabel;

    hoursText = openHour + ':' + openMinute + openAmPm + ' ' + untilText + ' ' + closeHour + ':' + closeMinute + closeAmPm;

    return hoursText;
}

function openingClosingTimeDisplay (input) {

	//if ( input.indexOf('0') == 0 ) input.replace('0','');

	// convert to an int to test what stage of the day.
	var hour = parseInt(input.split(':')[0]);

	if ( input.indexOf(':') != -1)
	{
		// Add back in minutes where needed
		input = hour + ':' + input.split(':')[1];
	}
	else
	{
		input = hour;
	}

	WTBLogging('openingClosingTimeDisplay - input|hour: ' + input + '|' + hour);

	if(hour == 0) {	return "at Midnight"; }
	else if(hour < 12) { return "at " + input + "AM"; } 
	else if(hour == 12)	{ return "at Midday"; }
	else if(hour > 12) { 

		// Work out if minutes are needed after removing the 12 hours.
		var updatedHour = hour - 12;
		var mins = '00';

		input = ''+input;

		if ( input.indexOf(':') != -1 && parseInt(input.split(':')[1]) != 0 )
		{
			var mins = parseInt(input.split(':')[1]);
		}

		var updatedTime = updatedHour; 

		if ( mins != 0 )
		{
			updatedTime += ":" + mins;
		}

		return "at " + updatedTime + "PM"; 
	}
	return "shortly"
};

String.prototype.replaceAll = function(search, replacement) {
    var target = this;
    return target.split(search).join(replacement);
};

function processLocalResults(data)
{
	if ( !mapLoaded ) 
	{
		$('.localList-loading').hide();
		if ( widgetConfig.localInstructions != undefined && widgetConfig.localInstructions != null && 
			 widgetConfig.localInstructions != '')
		{
			// clear list
			$('#localList').empty();
			$('#localList').append('<div class="oosmessage">' + widgetConfig.localInstructions + '</div>');	
		}
		return;
	}
	
	// Clear localList before processing
	$('#localList').empty();

	// clear previous pins
	if ( markers.length > 0 ) deleteMarkers();

	CaProductId = data.LocalRetailerStores.CaProductId;
	var d = new Date();

	var number = 0;

	var localResultCount = 0;
	var rangeCheck = currRange;
	var rangeCount = widgetConfig.distanceOptions.indexOf(currRange);

    // remove loading animation
	$('.localList-loading').hide();
	$('#localList').show();

	if( data.LocalRetailerStores.length > 0 ) {

		postPetsV2Event("AddLocationsToMap");

		var infowindow = new google.maps.InfoWindow({
			maxWidth: "400",
			content: '',
			pixelOffset: new google.maps.Size(0,0)
		});
		
		if(data.OnDemandAvailabilityUrl!=null){
			ondemand = true;
		}

		if ( widgetConfig.useExternalLocalOrdering != undefined && widgetConfig.useExternalLocalOrdering != null && 
			 widgetConfig.useExternalLocalOrdering && 
	 		typeof orderLocalWTBResults === "function" )
		{
			//WTBLogging("Calling orderLocalWTBResults");
			data.LocalRetailerStores = orderLocalWTBResults(data.LocalRetailerStores);
		}
			
		$i = 1;
		var impressionEvent = [];
		jQuery.each( data.LocalRetailerStores, function(k,v){
			var store = v;
			currentStore = store;
			if( trackEvents){
				var storeImpression = postPetsV2Event('ImpressionLocalRetailer'); 
			}
			var distance = store.DistanceFromUserLocation;
			if ( distance != null ) distance = distance.toFixed(1);

			var availability = "";

			var retailerName = store.RetailerName;
				
			if ( (widgetConfig.localTitle != undefined && widgetConfig.localTitle != null && 
				  widgetConfig.localTitle == "LocationName") || retailerName == "" )
		  	{
			  	retailerName = store.LocationName;
		 	}
			else if ( (widgetConfig.localTitle != undefined && widgetConfig.localTitle != null && 
					   widgetConfig.localTitle == "RetailerDisplayName") || retailerName == undefined || retailerName == "" )
			{
				retailerName = store.RetailerDisplayName;
			}

			if ( widgetConfig.localFullRange )
			{
				WTBLogging("Checking result: " + distance + "|" + rangeCheck);
				if ( parseFloat(distance) < rangeCheck )
				{
					localResultCount++;
					WTBLogging("found range result: " + localResults);
				}
				else
				{
					// Increase range
					while ( rangeCheck < parseFloat(distance) )
					{
						rangeCount++;
						rangeCheck = widgetConfig.distanceOptions[rangeCount];
					}
					WTBLogging("rangeCheck is now: " + rangeCheck + "|" + localResults);
					
					// If localResultCount already there drop out
					if ( localResultCount > 0 ) 
					{
						return false;
					}
					else
					{
						localResultCount++;
						var distancesCount = widgetConfig.distanceOptions.length - 1;

						// update dropdown
						if ( rangeCheck >= widgetConfig.distanceOptions[distancesCount] )
						{
							rangeCheck = widgetConfig.distanceOptions[distancesCount];
						}
						
						$("#rangeSelect").val(rangeCheck);	

						// Update zoom																			
						var zoomLevel = 12;

						if ( rangeCheck >= 30 )
						{
							zoomLevel = 9;
						}
						else if ( rangeCheck >= 15 )
						{
							zoomLevel = 10;
						}
						else if ( rangeCheck >= 5 )
						{
							zoomLevel = 11;
						}

						map.setZoom(zoomLevel);
						currMapZoom = zoomLevel;
					}
				}
			}

/*
			var storeImpression = {
				Address1
				Address2
				CampaignTag
				City
				CountryCode
				EventDateTimeUtc
				EventType
				"LocalProductSearchGuid": null,
				"ProductId": model,
				ProductIdType
				ProfileId
				ReferrerUrl
				RegionCode
				"RetailerId": store.RetailerName,
				"RetailerType": null,
				"RetailerName":store.LocationName,
				"StoreId": store.SourceLocationId,
				StoreName
				"StorePostalCode": store.PostalCode,
				"StoreRange": currRange,
				"StoreLongitude": store.Longitude,
				"StoreLatitude": store.Latitude
				UserAgent
				UserTrackingId
				WidgetImpressionId
				WidgetUrl
			};
*/
			impressionEvent.push(storeImpression);

			/* stock data start */
			var availability = "";

			if ( data.OnDemandAvailabilityLink == null || store.Availability !== 'CallForAvailability' ) {
				
				if ( store.Availability != null ) {
					switch(store.Availability.toLowerCase())
					{
						case "available": availability = "In Stock";break;
						case "unavailable": availability = "Out of Stock";break;
						case "notavailable": availability = "Out of Stock";break;
						case "assumeavailability": 
							if ( widgetConfig.assumeAvailabilityLabel != undefined && widgetConfig.assumeAvailabilityLabel != '' )
							{
								availability = widgetConfig.assumeAvailabilityLabel;
							}
							else
							{
								availability = "Assume Availability";	
							}
							break;
                        case "notfound": availability = "Call For Availability"; break;
                        case "callforavailability": availability = "Call For Availability"; break;
						default: availability = store.Availability ;break;
					}	
				}
				else
				{
					availability = "Call For Availability";
				}
			}
			else
			{
				availability = "loading";	
			}

			var stockType = "out-stock";

			if ( availability != null )
			{
				stockType = availability.toLowerCase().indexOf("out of stock") > -1 ? "out" : "in";
				stockType = stockType + "-stock";	
			}
			else
			{
				availability = "callforavailability";
			}

			// REFACTOR THIS
			var statusCircle = '<i class="material-icons">' +
									'check_circle' +
								'</i>';

			var statusInfo = '<i class="material-icons">' +
								'info' +
							 '</i>';

			var statusLoader = '<div class="loader-small"></div>';

			var onDemandStyle = 'style="display: none"';

			var statusDirect = '<p id="status_direct" class="status" {onDemandVisibility}>' +
									'{statusCircle}' +
									'{statusInfo}' +					
									'{wtb_stock}' +
								'</p>{statusLoader}';

			//WTBLogging("Checking availability: " + store.RetailerName + "|" + availability);

			if ( (availability.toLowerCase().indexOf('in stock') == -1) && 
				(availability.toLowerCase().indexOf('loading') == -1 ) )
			{
				// removed for review.
				// (availability.toLowerCase().indexOf('call for availability') == -1 ) && 

				//WTBLogging("setting statusCircle to empty");
				statusCircle = '';
			}

			if ( availability.toLowerCase().indexOf('out of stock') == -1) 
			{
				statusInfo = '';
			}

			if ( statusCircle != '' || statusInfo != '' || data.OnDemandAvailabilityLink == null )
			{
				// inStock or outOfStock, so no loader needed
				statusLoader = '';
				onDemandStyle = '';
			}

			statusDirect = statusDirect.replaceAll('{statusCircle}', statusCircle);
			statusDirect = statusDirect.replaceAll('{statusInfo}', statusInfo);
			statusDirect = statusDirect.replaceAll('{statusLoader}', statusLoader);

			var statusOnDemand = '<div id="status_on_demand" class="status" >' + 
									'<div class="loader-small"></div>' +
									'<p style="display:none"></p>' +
								'</div>';

			if ( availability.indexOf('loading') == -1) 
			{
				//WTBLogging('OnDemand availability is NOT loading');
				statusOnDemand = '';
			}
			else
			{
				//WTBLogging('OnDemand availability is loading');
				statusDirect = '';
			}

			/*stock data end */
			/*
			var stockType = "out-stock";
			// REFACTOR THIS
			var statusDirect = '<p id="status_direct" class="status" >' + 
									'{statusCircle}' +
									'{statusInfo}' +					
									'{wtb_stock}' +
								'</p>';

			var statusOnDemand = '<div id="status_on_demand" class="status" >' + 
									'<div class="loader-small"></div>' +
									'<p style="display:none"></p>' +
								'</div>';			
			*/
			var phoneInfoMobile = '<p class="phone" >' + 
									'<a class="store-details-phone-text" target="_top" href="tel://{wtb_phone}">' +
								 	'<i class="material-icons valign-center md-18">' +
										'local_phone' +
									'</i>' +
									'{wtb_formatted_phone}</a>' +
								   '</p>';

			var phoneInfoDesktop = '<div class="store-details-phone-text">' +
								 	'<i class="material-icons valign-center md-18">' +
										'local_phone' +
									'</i>' +
									'{wtb_formatted_phone}</div>';				

			var phoneInfo = phoneInfoDesktop;

			if ( isMobile ) phoneInfo = phoneInfoMobile;

			var buyOnlineStr = '<p class="buy">' +
								'<a target="_blank" href="{wtb_buyNowLink}">' +
									'{wtb_localBuyOnline}' +
								'</a>' +
							   '</p>';

			var onlineInfoStr = '<p class="info">' +
									'<a target="_blank" href="{wtb_localInfoLink}">' +
										'{wtb_localOnlineInfo}' +
									'</a>' +
		   						'</p>';

			var buyNowLink = "";
			var addToCartLink = "";
			var onlinePrice = "";

			var localPromoText = 'Offer';

			if ( widgetConfig.offerLabel != undefined && widgetConfig.offerLabel != null && widgetConfig.offerLabel != '' )
				localPromoText = widgetConfig.offerLabel;

			var localPromotionStr = '<p class="promo" data-toggle="tooltip" data-placement="top" title="{tooltipTxt}" >' +
										localPromoText +
							   		'</p>';

			var InStoreLabel = 'In-store Pickup';
			var localDeliveryLabel = 'Local Delivery';

			if (  widgetConfig.pickupLabel != undefined && widgetConfig.pickupLabel != '' ) {
				InStoreLabel = widgetConfig.pickupLabel;
			}
			
			if (  widgetConfig.localDeliveryLabel != undefined && widgetConfig.localDeliveryLabel != '' ) {
				localDeliveryLabel = widgetConfig.localDeliveryLabel;
			}

			var localPickupStr = '<p class="pickup ' + store.PickupAvailability.replaceAll(' ', '') + '" {onDemandVisibility}>'+InStoreLabel+'</p>';
			var localDeliveryStr = '<p class="delivery ' + store.DeliveryAvailability.replaceAll(' ', '') + '" {onDemandVisibility}>'+localDeliveryLabel+'</p>';

			if ( widgetConfig.showLocalPromotions != undefined && widgetConfig.showLocalPromotions != null && 
				 widgetConfig.showLocalPromotions )
			{
				// Check the expected variables
				if ( store.Promotions[0] != undefined && store.Promotions[0] != null && 
					 store.Promotions[0].PromotionMessage != undefined && store.Promotions[0].PromotionMessage != null )
				{
					localPromotionStr = localPromotionStr.replace('{tooltipTxt}', store.Promotions[0].PromotionMessage);
				}
				else
				{
					localPromotionStr = '';
				}
			}
			else
			{
				localPromotionStr = '';
			}

			//WTBLogging('online retailer lookup: ' + store.RetailerName, onlineData);

			var lookup = store.RetailerName;

			if ( widgetConfig.localTitle == "LocationName" )
			{
			 	lookup = store.LocationName;
			 	lookup = lookup.replaceAll(' ', '');

				// Handle special case for Walmart and Walmart Supercenter
				// All online results are 'Walmart'
				if ( lookup.indexOf('Walmart') != -1 )
				{
					lookup = lookup.replace('Supercenter', '');
					lookup = lookup.replace('Pickup', '');
				} else if ( lookup.indexOf('NeighborhoodMarket') != -1 ) {
					lookup = 'Walmart';
				}
			}

			for ( var s in onlineData )
			{
				if ( s.toLowerCase().indexOf(lookup.toLowerCase()) != -1 )
				{
					//WTBLogging('Found: ' + s + '|' + lookup);
					lookup = s;
					break;
				}

				//WTBLogging('Missed: ' + s + '|' + lookup);
			}

			var useLocalUrl = false;

			if ( widgetConfig.useLocalLocationUrl != undefined && widgetConfig.useLocalLocationUrl )
				useLocalUrl = true;

			buyOnlineLabel = 'Buy Online';
			if ( widgetConfig.localOnlineLabel != undefined && widgetConfig.localOnlineLabel != null)
				buyOnlineLabel = widgetConfig.localOnlineLabel;

			if ( onlineData[lookup] != null )
			{
				buyNowLink = onlineData[lookup]["buyNow"];

				if ( useLocalUrl && !widgetConfig.alwaysShowLocalInfo ) {
					buyNowLink = store.LocationUrl;

					if ( buyNowLink.indexOf('http') == -1 )
						buyNowLink = 'https://' + buyNowLink;

					if ( widgetConfig.localOnlineInfo != undefined && widgetConfig.localOnlineInfo != null )
						buyOnlineLabel = widgetConfig.localOnlineInfo;
				}

				onlinePrice = onlineData[lookup]["price"];
				addToCartLink = onlineData[lookup]["addToCart"];
				onlinePrice = widgetConfig.currencySymbol + "" + onlinePrice;

				//WTBLogging('Set AddToCartLink for ' + store.RetailerName +': ', onlineData[store.RetailerName]);
			}
			else if ( store.LocationUrl != undefined && store.LocationUrl != '' && !widgetConfig.alwaysShowLocalInfo )
			{
				buyNowLink = store.LocationUrl;
				if ( buyNowLink.indexOf('http') == -1 )
					buyNowLink = 'https://' + buyNowLink;

				if ( widgetConfig.localOnlineInfo != undefined && widgetConfig.localOnlineInfo != null )
					buyOnlineLabel = widgetConfig.localOnlineInfo;
			}
			else
			{
				buyOnlineStr = '';
			}

			if ( widgetConfig.alwaysShowLocalInfo != undefined && !widgetConfig.alwaysShowLocalInfo )
			{
				onlineInfoStr = '';
			}

			localData[store.RetailerName + "_" + store.StreetLine1] = store;

			if ( widgetConfig.widgetType == "BuyOnlineBuyLocalFullTab" && version != '2.0' )
			{
				buyLocalTemplate = buyLocalFullTemplate;
			}

			var retailerName = "";
			if ( store.RetailerName != undefined && store.RetailerName != null ) retailerName = store.RetailerDisplayName;

			if ( (widgetConfig.localTitle != undefined && widgetConfig.localTitle != null && 
				  widgetConfig.localTitle == "LocationName") || retailerName == "" )
			{
				retailerName = store.LocationName;
			}
			else if ( (widgetConfig.localTitle != undefined && widgetConfig.localTitle != null && 
				widgetConfig.localTitle == "RetailerDisplayName") || retailerName == undefined || retailerName == "" )
			{
				retailerName = store.RetailerDisplayName;
			}

			//var directionsStr = createDirectionsURL(store.Longitude, store.Latitude);
			var directionsStr = createNamedDirectionsURL(store);

			if ( widgetConfig.mapDirections != undefined && widgetConfig.mapDirections != null && 
				 widgetConfig.mapDirections )
			{
				directionsStr = '#';
			}

			if ( widgetConfig.directionsLabel == undefined && widgetConfig.directionsLabel == null ) 
				 widgetConfig.directionsLabel = 'Directions';
			
			var distanceUnits = 'mi';
			if ( widgetConfig.distanceUnits == "Kilometers" ) distanceUnits = 'km';

			var attributeClass = '';

			if ( widgetConfig.attributeClassName != undefined && widgetConfig.attributeClassName != '' ) 
			{
				if ( store.Attributes[widgetConfig.attributeClassName] != undefined )
				{
					attributeClass = store.Attributes[widgetConfig.attributeClassName];
					attributeClass = attributeClass.replaceAll(',', ' ');	
				}
			}

			if ( store.Attributes.RetailerLabelType != undefined ) 
			{
				attributeClass += ' ' + store.Attributes.RetailerLabelType;
				attributeClass = attributeClass.replaceAll(',', ' ');
			}

			var cleanStoreId = '';

			if ( store.SourceLocationId != null )
			{
				cleanStoreId = store.SourceLocationId.replaceAll('/', '');
				cleanStoreId = cleanStoreId.replaceAll('(', '');
				cleanStoreId = cleanStoreId.replaceAll(')', '');
				cleanStoreId = cleanStoreId.replaceAll(' ', '');
				cleanStoreId = cleanStoreId.replaceAll('.', '');
				cleanStoreId = cleanStoreId.replaceAll(',', '');
				cleanStoreId = cleanStoreId.replaceAll('&', '');
				cleanStoreId = cleanStoreId.replaceAll('\'', '');	
				cleanStoreId = cleanStoreId.replaceAll(':', '');
			}

			var cleanPhoneNumber = store.Phone.replaceAll(' ', '');

			WTBLogging('Checking localAddToCart - ' +  store.RetailerDisplayName + ' - ', addToCartLink);

			if ( widgetConfig.showLocalAddToCart != undefined && widgetConfig.showLocalAddToCart != null && 
				 widgetConfig.showLocalAddToCart && addToCartLink != undefined && addToCartLink != null && addToCartLink != "null" 
				 && addToCartLink != "" )
			{
				buyOnlineLabel = 'Add To Cart';

				if ( widgetConfig.localAddToCartLabel != undefined && widgetConfig.localAddToCartLabel != null && 
					 widgetConfig.localAddToCartLabel != '')
				{
					buyOnlineLabel = widgetConfig.localAddToCartLabel;
				}

				buyNowLink = addToCartLink;
			}

			var retailerCount = 0;

			if ( localRetailers[store.RetailerId] == undefined ) 
			{
				localRetailers[store.RetailerId] = [];
			}
			else
			{
				retailerCount = localRetailers[store.RetailerId].length;
			}

			// Ensure no nulls for logos
			if ( store.RetailerLogoSquareUrl == null ) store.RetailerLogoSquareUrl = '';
			if ( store.RetailerLogoUrl == null ) store.RetailerLogoUrl = '';

			var logoStr = store.RetailerLogoSquareUrl == '' ? store.RetailerLogoUrl : store.RetailerLogoSquareUrl;

			var titleStyle = '';

			if ( logoStr == '' )
			{
				if ( store.Attributes != undefined && store.Attributes.LogoUrl != undefined ) logoStr = store.Attributes.LogoUrl;
			}

			if ( logoStr == '' )
			{
				titleStyle = 'style="display: block"';
			}

			WTBLogging('local Result - logStr: ' + logoStr);

			localRetailers[store.RetailerId][retailerCount] = cleanStoreId;

			var formattedPhoneNumber = formatPhoneNumber(store.Phone);

			var phoneStyle = '';

			if ( cleanPhoneNumber == '' ) phoneStyle = 'style ="display: none"';

			var buyLocalResult = buyLocalTemplate.replaceAll('{wtb_retailerNameAndLocation}', store.RetailerId + "_" + cleanStoreId);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_attributeClass}', attributeClass);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_titleTrim}', store.RetailerDisplayName);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_retailerName}', retailerName);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_counter}', $i);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_logo}', logoStr );
			buyLocalResult = buyLocalResult.replaceAll('{wtb_titleStyle}', titleStyle );

			buyLocalResult = buyLocalResult.replaceAll('{wtb_streetline1}', store.StreetLine1);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_city}', store.City);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_state}', store.State);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_postcode}', store.PostalCode);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_phoneDisplay}', phoneInfo);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_phone}', cleanPhoneNumber);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_formatted_phone}', formatPhoneNumber(store.Phone));
			buyLocalResult = buyLocalResult.replaceAll('{wtb_phoneStyle}', phoneStyle );

			var wtbStoreHours = '';

			//buyLocalResult = buyLocalResult.replaceAll('{wtb_hours}', getTodaysHoursFromPCAT(store.Hours, show12Hour, null));
			if ( widgetConfig.useExternalTimeFormatting != undefined && widgetConfig.useExternalTimeFormatting != null && 
				 widgetConfig.useExternalTimeFormatting && typeof formatTimeWTBResults === "function" )
		    {
				//WTBLogging("Calling filterLocalWTBResults");
			    wtbStoreHours = formatTimeWTBResults(store.Hours, show12Hour, store.Timezone);
		    }
			else
			{
				wtbStoreHours = getTodaysHoursFromPCAT(store.Hours, show12Hour, store.Timezone);
			}

			//WTBLogging("getTodaysHoursFromPCAT result: " + wtbStoreHours);

			buyLocalResult = buyLocalResult.replaceAll('{wtb_hours}', wtbStoreHours);

			WTBLogging('status : ' + statusDirect + '|' + statusOnDemand);

			buyLocalResult = buyLocalResult.replaceAll('{wtb_statusDirect}',  statusDirect);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_statusOnDemand}',  statusOnDemand);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_stockType}',  stockType);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_stock}', availability);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_directions}', directionsStr); // mapLinkToDirections(store.MapLink));
			buyLocalResult = buyLocalResult.replaceAll('{wtb_index}', $i);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_title}', retailerName);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_distance}', distance);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_distanceUnits}', distanceUnits);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_directionsLabel}', widgetConfig.directionsLabel);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_LocalPromotions}', localPromotionStr);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_LocalPickup}', localPickupStr);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_LocalDelivery}', localDeliveryStr);
			buyLocalResult = buyLocalResult.replaceAll('{onDemandVisibility}', onDemandStyle);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_BuyOnline}', buyOnlineStr);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_localBuyOnline}', buyOnlineLabel);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_buyNowLink}', buyNowLink); // grab from plrss results

			buyLocalResult = buyLocalResult.replaceAll('{wtb_OnlineInfo}', onlineInfoStr);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_localInfoLink}', store.LocationUrl);
			buyLocalResult = buyLocalResult.replaceAll('{wtb_localOnlineInfo}', widgetConfig.localOnlineInfo);

			buyLocalResult = buyLocalResult.replaceAll('{wtb_onlinePrice}', (onlinePrice != null && onlinePrice != "$null") ? onlinePrice : ''); // grab from plrss results

			if(store.ProductLink!=null){
				buyLocalResult = buyLocalResult.replaceAll('{wtb_clickandcollect}', "<a target='_blank' title='Click and collect' href='"+ store.ProductLink + "'>Click and Collect</a>");
			} else {
				buyLocalResult = buyLocalResult.replaceAll('{wtb_clickandcollect}', "");
			}

			// clean up address
			buyLocalResult = buyLocalResult.replaceAll(', , ', ', ');

			//storeLocalEntry (cleanStoreId+"-"+model, store, buyLocalResult, info_window_string, marker, cleanStoreId);

			var appendResult = true;

			if ( widgetConfig.useExternalLocalFiltering != undefined && widgetConfig.useExternalLocalFiltering != null && 
				 widgetConfig.useExternalLocalFiltering && typeof filterLocalWTBResults === "function" )
			{
				//WTBLogging("Calling filterLocalWTBResults");
				appendResult = filterLocalWTBResults(store);
			}

			if ( appendResult )
			{
				$('#localList').append(buyLocalResult);
			
				var info_window_string = info_window_content(v);

				var fillColorStr = '#EA7824';

				if ( formattedPhoneNumber == 'Not Available.' )
				{
					$('#retailer_'+store.RetailerId + "_" + cleanStoreId + ' .details .phone').hide();
				}

				WTBLogging('onDemand Status lookup: retailer_'+store.RetailerId + "_" + cleanStoreId);

				if ( data.OnDemandAvailabilityLink != null && $('#retailer_'+store.RetailerId + "_" + cleanStoreId + ' .options .loader-small' ) != undefined )
				{
					WTBLogging('onDemand Status - hiding pickup/delivery: ', $('#retailer_'+store.RetailerId + "_" + cleanStoreId + ' .top .options .pickup').html());
					$('#retailer_'+store.RetailerId + "_" + cleanStoreId + ' .top .options .pickup').hide();
					$('#retailer_'+store.RetailerId + "_" + cleanStoreId + ' .top .options .delivery').hide();
				}

				if ( widgetConfig.mapIconFillColor != undefined && widgetConfig.mapIconFillColor != '' )
					fillColorStr = widgetConfig.mapIconFillColor;

				var defaultIcon = {
					path: "M172.268 501.67C26.97 291.031 0 269.413 0 192 0 85.961 85.961 0 192 0s192 85.961 192 192c0 77.413-26.97 99.031-172.268 309.67-9.535 13.774-29.93 13.773-39.464 0z",
					fillColor: fillColorStr,
					fillOpacity: 1,
					strokeColor: '',
					strokeWeight: 0,
					scale: 0.06, //size of the marker, careful! this scale also affects anchor and labelOrigin
					anchor: new google.maps.Point(200,510), //position of the icon, careful! this is affected by scale
					labelOrigin: new google.maps.Point(205,190)//position of the label, careful! this is affected by scale					
				}
				
				var markerIcon = defaultIcon;

				if (widgetConfig.customPinPath != undefined && widgetConfig.customPinPath != '')
					markerIcon = widgetConfig.customPinPath;

				var labelColor = '#fff';

				if ( widgetConfig.markerFontColor != undefined && widgetConfig.markerFontColor != '' )
					labelColor = widgetConfig.markerFontColor;

				var marker = new google.maps.Marker({
					__gm_id: $i,
					position: new google.maps.LatLng(store.Latitude,store.Longitude),
					icon: markerIcon,
					label: {
					    text: ""+$i,
					    color: labelColor,
					    fontSize: "14px",
					    fontWeight: "bold",
						className: 'wtbMarkerLabel'
					}
				});
				/*
				marker = new MarkerWithLabel({
					__gm_id: $i,
					position: new google.maps.LatLng(store.Latitude,store.Longitude),
					icon: markerIcon,
					labelContent: ""+$i,
					labelAnchor: new google.maps.Point(20, 0),
					labelClass: "wtbMarkerLabel", // the CSS class for the label
					});
				*/
                marker.setMap(map);

				// attach popup to click event
				google.maps.event.addListener(marker, 'click', function() {

					$('#localList .media').removeClass('active');
					$('#l_'+marker['__gm_id']).addClass('active');

					currentStore = store;

					// Move results list to clicked marker
					var cleanStoreId = '';

					if ( currentStore.SourceLocationId != null )
					{
						cleanStoreId = store.SourceLocationId.replaceAll('/', '');
						cleanStoreId = cleanStoreId.replaceAll('(', '');
						cleanStoreId = cleanStoreId.replaceAll(')', '');
						cleanStoreId = cleanStoreId.replaceAll(' ', '');
						cleanStoreId = cleanStoreId.replaceAll('.', '');
						cleanStoreId = cleanStoreId.replaceAll(',', '');
						cleanStoreId = cleanStoreId.replaceAll('&', '');
						cleanStoreId = cleanStoreId.replaceAll('\'', '');	
						cleanStoreId = cleanStoreId.replaceAll(';', '');	
					}
								
					var retailerID = currentStore.RetailerId;

					var localResultID = 'retailer_'+retailerID+'_'+cleanStoreId;

					WTBLogging('local lookup: ' + localResultID);

					var scrollToEntry = true;

					if ( widgetConfig.moveRetailerListOnMapClick != undefined && !widgetConfig.moveRetailerListOnMapClick )
						scrollToEntry = false;

					if ( scrollToEntry ) document.getElementById(localResultID).scrollIntoView();
					//
					
					var currentLatLng = new google.maps.LatLng(store.Latitude,store.Longitude);
					WTBLogging('Map SetCenter (6): ', currentLatLng);
					map.setCenter(currentLatLng);

					var clickedZoom = 16;
					if ( widgetConfig.clickedZoom != undefined && widgetConfig.clickedZoom != null ) clickedZoom = widgetConfig.clickedZoom;

					map.setZoom(clickedZoom);
					currMapZoom = clickedZoom;
					
					var showInfoWindow = true;

					if ( widgetConfig.showMapTooltip != undefined && !widgetConfig.showMapTooltip )
					{
						showInfoWindow = false;
					}

					if ( showInfoWindow )
					{
						infowindow.setContent(info_window_string);
						infowindow.open(map, marker);
					}

					WTBLogging('InfoWindow Contents: ', $('.info-window .store-phone > a'));

					$(document).trigger("WTBMapMarkerClicked");

					setTimeout(function(){
						$('.info-window .store-phone > a').click(function(event){
							currentStore = store;
							localStorePhoneCallClick();
						});

						$('.info-window .store-direction > a').click(function(event){
							currentStore = store;
							getDirectionsClick();
						});

						$('.info-window .store-phone a').css('color', '#21201F');
						$('.info-window .store-phone span').css('display', 'block');

					}, 150);
					
					if( trackEvents ){ 
						postPetsV2Event('LocalStoreClick');
						postPetsV2Event("PinSelect"); 
					}
				});	
				
				markers.push(marker);	

				$('#retailer_' + store.RetailerId + "_" + cleanStoreId).click(function(){

					currentStore = store;
					var currentLatLng = new google.maps.LatLng(store.Latitude, store.Longitude);

					WTBLogging('Map SetCenter (7): ', currentLatLng);
					map.setCenter(currentLatLng);

					if ( document.querySelector('.wtb-container') != null )
					{
						document.querySelector('.wtb-container').scrollTo({
							'behavior': 'smooth',
							'left': 0,
							'top': 0 - 80
						})
					}

					var zoomSetting = 16;

					if ( widgetConfig.clickedZoom != undefined )
						zoomSetting = widgetConfig.clickedZoom;

					map.setZoom(zoomSetting);
					currMapZoom = zoomSetting;

					var showInfoWindow = true;

					if ( widgetConfig.showMapTooltip != undefined && !widgetConfig.showMapTooltip )
					{
						showInfoWindow = false;
					}

					if ( showInfoWindow )
					{
						infowindow.setContent(info_window_string);
						infowindow.open(map, marker);

						setTimeout(function(){
							$('.info-window .store-phone > a').click(function(event){
								currentStore = store;
								localStorePhoneCallClick();
							});

							$('.info-window .store-direction > a').click(function(event){
								currentStore = store;
								getDirectionsClick();
							});

							$('.info-window .store-phone a').css('color', '#21201F');
							$('.info-window .store-phone span').css('display', 'block');
						}, 150);
					}
					
					if( trackEvents ) { 
						postPetsV2Event('LocalStoreClick');
						postPetsV2Event("PinSelect"); 
					}
				});

				if ( widgetConfig.mapDirections != undefined && widgetConfig.mapDirections != null && 
					 widgetConfig.mapDirections )
				{
					var directionsLink = $('#retailer_' + store.RetailerId + "_" + cleanStoreId + " > div.options > #directionsButton > div");

					WTBLogging('directionsLink: ', directionsLink);

					directionsLink.attr('target', '');

					directionsLink.click(function(){

						currentStore = store;

						WTBLogging('directionsClick currentStore: ' + currentStore.StreetLine1);

						// Build store data
						var storeHtml = '<h3>' + retailerName + '</h3>';

						if ( currentStore.StreetLine1.trim() != '' ) 
							storeHtml += '<p>' + currentStore.StreetLine1 + ', ';

						if ( currentStore.City.trim() != '' ) 
							storeHtml += currentStore.City + ',';

						if ( currentStore.State.trim() != '' ) 
							storeHtml += currentStore.State + '</p>';

						$('#directionsStore').html(storeHtml);

						directionsStore = store;

						// Update Display
						$('#directionsSelect').hide();
						$('#directionsLocations').show();

						$('#retailer_' + currentStore.RetailerId + "_" + cleanStoreId).click();
						$( "#directions-tab" ).click();

						WTBLogging("Calling directionsClick()");

						getDirectionsClick();
						return false;
					})
				}
				else
				{
					if ( $('#retailer_' + store.RetailerId + '_' + cleanStoreId + '> div.details > p.directions > a') != undefined ) {
						$('#retailer_' + store.RetailerId + '_' + cleanStoreId + '> div.details > p.directions > a').unbind().click(function(event){
							currentStore = store;
							getDirectionsClick();
						});
					} 
				}

				if ( $('#retailer_' + store.RetailerId + '_' + cleanStoreId + '> div.details > p.phone > a') != undefined )
				{	
					$('#retailer_' + store.RetailerId + '_' + cleanStoreId + '> div.details > p.phone > a').unbind().click(function(event){
						currentStore = store;
						localStorePhoneCallClick();
					});
				}

				if ( data.OnDemandAvailabilityLink != null )
				{
					WTBLogging('Showing stockStatus: #' + store.RetailerId + "_" + store.SourceLocationId + "_stock .status");
					$('#' + store.RetailerId + "_" + store.SourceLocationId + "_stock .status").show();
				}

				$i++;
				number++;			
			}

		} ); 

		if ( number == 0 )
		{
			WTBLogging('number is 0, set oosmessage');
			// clear list
			$('#localList').empty();
			$('#localList').append('<div class="oosmessage">' + widgetConfig.noLocalStock + '</div>');	

			// - check if currLat or currLong are undeclared
			if ( typeof currLat !== 'undefined' || typeof currLong !== 'undefined') {
				// - do not declare currLat and currLong
				// - proceed with updating map
				WTBLogging('Map SetCenter (8): ' + currLat +', '+  currLong);
				map.setCenter(new google.maps.LatLng( currLat,  currLong ));
			} else {
				// - declare currLat and currLong
				// - proceed with updating map
				let currLat = widgetConfig.startLatitude;
				let currLong = widgetConfig.startLongitude;
				WTBLogging('Map SetCenter (8): ' + currLat +', '+  currLong);
				map.setCenter(new google.maps.LatLng( currLat,  currLong ));
			}

			
		}
		else
		{
			//Zoom to markers
			var bounds = new google.maps.LatLngBounds();
			for (var i = 0; i < markers.length; i++) {
				bounds.extend(markers[i].getPosition());
			}
			map.fitBounds(bounds);

			if ( number == 1 )
			{
				map.setZoom(15);
			}			
			
			if  ( widgetConfig.groupMapMarkers )
			{
				if ( MarkerClusterer != undefined )
				{
					markerCluster = new MarkerClusterer(map, markers, {
						maxZoom: 16,
						imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'
					});
				}
			}
		}
		
	} else {
		
		if ( initialSearch || ( widgetConfig.usePostcodeFiltering != undefined && 
			widgetConfig.usePostcodeFiltering && currPostCode == '' ) )
		{
			// clear list
			$('#localList').empty();
			$('#localList').append('<div class="oosmessage">' + widgetConfig.localInstructions + '</div>');
		}
		else
		{
			// clear list
			$('#localList').empty();
			$('#localList').append('<div class="oosmessage">' + widgetConfig.noLocalStock + '</div>');	
		}

		WTBLogging('Map SetCenter (9): ' + widgetConfig.startLatitude +', '+  widgetConfig.startLongitude);
		map.setCenter(new google.maps.LatLng( widgetConfig.startLatitude, widgetConfig.startLongitude ));
	}

	if(vnextTrackingEnabled == false && trackEvents && impressionEvent != undefined && impressionEvent.length > 0){
		sendPetsV2Event(impressionEvent)	 
	}

	

    $('[data-toggle="tooltip"]').tooltip();			

	inProgress = false;
}

function ProcessLocalOndemandAvailability(BuyLocalAvailabilitiesPerRetailer, JobStatus){
	var demandRetailers = [];

	jQuery.each( BuyLocalAvailabilitiesPerRetailer, function(k,v){								
							

		var retailerId = v.RetailerId;

		demandRetailers[retailerId] = retailerId;

		for( var i in v.BuyLocalAvailabilities ) 
		{
			var location = v.BuyLocalAvailabilities[i];

			if( location.AvailabilityStatus != ODCallForAvailability ||
				location.DeliveryAvailability != ODCallForAvailability || 
				location.PickupAvailability != ODCallForAvailability ||  
				JobStatus != ODSProcessing ){
				UpdateStatus(retailerId, location);	
			}	
			
			if ( JobStatus == ODSComplete )
			{
				// Clean up remaining stores
				var lookupBase = '.wtb-local .retailers-local .retailer-block';
				
				var pickupLookup = lookupBase + ' .pickup';
				var delivevryLookup = lookupBase + ' .delivery';
				var statusLookup = lookupBase + ' .stock .status';
				var loaderLookup = lookupBase + ' .stock .loader-small';
				
				$(pickupLookup).each(function(){
					$(this).show();
				});

				$(delivevryLookup).each(function(){
					$(this).show();
				});

				$(statusLookup).each(function(){
					$(this).show();
				});

				$(loaderLookup).each(function(){
					$(this).hide();
				});
			}
		}	
	});

	for ( var r in localRetailers )
	{
		//WTBLogging('Found localRetailer: ' + r, demandRetailers);

		if ( demandRetailers[r] == undefined )
		{
			for ( var s in localRetailers[r] ) 
			{
				var storeID = localRetailers[r][s];
				var el = '#' + r + "_" + storeID + "_stock";

				//WTBLogging('status ID: ' + el);

				var elStatusP = el + ' #status_on_demand p';
				var elStatusLoaderSmall = el + ' #status_on_demand .loader-small';

				$(elStatusLoaderSmall).hide();

				var infoText ="Call For Availability";		
				$(elStatusP).text(infoText).hide().fadeIn();
				$('#status_on_demand').removeClass("out-of-stock").removeClass("in-stock").addClass("call-stock");
			}

			localRetailers[r] = undefined;
		}

	}
}

function ProcessOnlineOndemandAvailability(BuyOnlineAvailabilitiesPerRetailer, JobStatus){
	var inStockText = "Available";
	var outOfStockText = "Out of Stock";
	var infoText = 'Call For Availability';

	if ( widgetConfig.inStockText != undefined && widgetConfig.inStockText != null )
	{
		inStockText = widgetConfig.inStockText;
	}

	if ( widgetConfig.outOfStockText != undefined && widgetConfig.outOfStockText != null )
	{
		outOfStockText = widgetConfig.outOfStockText;
	}

	for(let OnlineRetailer of BuyOnlineAvailabilitiesPerRetailer){

		//As this retailers have .com, they mess with the CSS selector so, we have to interpolate the .
		var retailerSelector = OnlineRetailer.RetailerName.replace(".", "\\.");
		var retailerObject = document.querySelector(".retailer-block."+ retailerSelector);
		if(retailerObject == null || retailerObject == undefined){
			continue;
		}
		
		var statusDiv = retailerObject.querySelector(".status");

		

		var stockElement = retailerObject.querySelector(".stock");

		var availabilityStatus = statusDiv.innerText;
		if(statusDiv.style.display == "none"){
			availabilityStatus = ODCallForAvailability;
		}
		if(JobStatus == ODSProcessing){
			retailerObject.querySelector("#status_on_demand").style.display = "flex";
			statusDiv.style.display = "none";

		}
		else{
			for(let OnlineAvailability of OnlineRetailer.BuyOnlineAvailabilities){
				if(availabilityStatus != ODAvailable  && OnlineAvailability.Availability == ODAvailable){
					availabilityStatus = ODAvailable;
				}else if(availabilityStatus != ODAvailable){
					if(OnlineAvailability.Availability == ODUnavailable){
						availabilityStatus = ODUnavailable;
					}
					else if(availabilityStatus != ODUnavailable && OnlineAvailability.Availability == ODCallForAvailability){
						availabilityStatus = ODCallForAvailability;
					}
				}
			}
			if(availabilityStatus == ODUnavailable || availabilityStatus == ODNotFound){	
				stockElement.classList.add("outstock"); 
				stockElement.classList.remove("call-stock");
				statusDiv.innerHTML = '<b>'+outOfStockText+'</b>';

			}
			else if(availabilityStatus == ODAvailable || availabilityStatus == ODAssumeAvailability){
				stockElement.classList.remove("outstock");
				stockElement.classList.remove("call-stock");
				statusDiv.innerHTML = '<b>' + inStockText + '</b>';

				var  buttonElement = document.querySelector('#'+retailerSelector+'BuyNow>a');
				//We modify the text if Available for the LINK
				
				buttonElement.innerText = widgetConfig.buyNowLabel;
				//If it's carousel without childs
				if(widgetConfig.useChildCarousel && buttonElement.href == '#' ){
					buttonElement.innerText = widgetConfig.carouselBuyNowLabel;
				}

			}else if(availabilityStatus == ODCallForAvailability){
				stockElement.classList.remove("outstock"); 
				stockElement.classList.add("call-stock"); 
				statusDiv.innerHTML = '<b>' + infoText + '</b>';


			}
			var statusOnDemand = retailerObject.querySelector("#status_on_demand");
			if(statusOnDemand != null){
				statusOnDemand.style.display = "none";
			}
			
			statusDiv.style.display = "";
		}
	}

	//We remove all remaining loaders
	if( JobStatus != ODSProcessing && BuyOnlineAvailabilitiesPerRetailer.length > 0 ){
		for(var OnDemandDiv of document.querySelectorAll('.stock')){
			var OndemandStatus = OnDemandDiv.querySelector('#status_on_demand');
			//Check if there's any loader still showing. We hide it and change the message to Call for Availability
			if(OndemandStatus != undefined && OndemandStatus.style.display != "none"){
				OndemandStatus.style.display = "none";
				OnDemandDiv.querySelector('.status').style.display = "initial";	
				OnDemandDiv.querySelector('.status').innerText = infoText;
			}
			
		}
	}
}



function GetOnDemandAvailability()
{
	
	setTimeout(function(){	

	    var authToken = widgetConfig.authToken;

	    if ( widgetConfig.WTBAuthToken != undefined && widgetConfig.WTBAuthToken != null )
	    	authToken = widgetConfig.WTBAuthToken;

		var rtaUrl = onDemandAvailabilityUrl;

		$.ajax({
			url: rtaUrl,
			type: 'GET',
			beforeSend: function (xhr) {
	        	/* Authorization header */
		        xhr.setRequestHeader("Authorization", 'api-key ' + authToken);
	    	},
			success: function (data) {

				if( data.JobStatus == ODSProcessing ) {
					GetOnDemandAvailability();
				}
				
				if ( (data.BuyLocalAvailabilitiesPerRetailer != undefined || data.BuyLocalAvailabilitiesPerRetailer != null) && 
					  data.BuyLocalAvailabilitiesPerRetailer.length > 0 ) {
					ProcessLocalOndemandAvailability(data.BuyLocalAvailabilitiesPerRetailer, data.JobStatus)
				}
				if ( (data.BuyOnlineAvailabilitiesPerRetailer != undefined || data.BuyOnlineAvailabilitiesPerRetailer != null) && 
					  data.BuyOnlineAvailabilitiesPerRetailer.length > 0 ) {
					ProcessOnlineOndemandAvailability(data.BuyOnlineAvailabilitiesPerRetailer, data.JobStatus)
				}
			}
		});
	}, 2000)
};	

function UpdateStatus (retailerId, location) {

	var locationId = location.SourceLocationId;
	var el = '#' + retailerId + "_" + locationId + "_stock";

	var retailerEl = "#retailer_" + retailerId + "_" + locationId;

	//var elStatusP = el + ' #status_direct p';	
	var elStatusP = el + ' .status';
	
	var elPickup = retailerEl + " .pickup";
	var elDelivery = retailerEl + " .delivery";
	
	//if($(elStatusP).text().length > 0){ return; }

	WTBLogging('Updating StockStatus: ' + el + '|' + elStatusP + '|' + location.AvailabilityStatus);
	
	var elStatusLoaderSmall = el + ' .loader-small';
	
	$(elStatusLoaderSmall).hide();

	$(elPickup).show();
	$(elDelivery).show();

	if(location.AvailabilityStatus == ODUnavailable || location.AvailabilityStatus == ODNotFound){	

		$(el).removeClass("in-stock").addClass("out-stock");

		// <i class="material-icons">info</i>
		$(elStatusP).text('Out of Stock').hide().fadeIn();

		//$('#status_on_demand').removeClass("in-stock").addClass("out-of-stock");
		//$('#status_direct').removeClass("in-stock").addClass("out-of-stock");
		$(elStatusP).removeClass("in-stock").addClass("out-of-stock");


	} else if(location.AvailabilityStatus == ODAvailable || location.AvailabilityStatus == ODAssumeAvailability){	

		$(el).removeClass("out-stock").addClass("in-stock");

		// <i class="material-icons">check_circle</i>
		$(elStatusP).text('In Stock').hide().fadeIn();

		//$('#status_on_demand').removeClass("out-of-stock").addClass("in-stock");
		//$('#status_direct').removeClass("out-of-stock").addClass("in-stock");
		$(elStatusP).removeClass("out-of-stock").addClass("in-stock");

	} else if(location.AvailabilityStatus == ODCallForAvailability){

		// <i class="material-icons">check_circle</i>
		var infoText = 'Call For Availability';
		$(elStatusP).text(infoText).hide().fadeIn();

		//$('#status_on_demand').removeClass("out-of-stock").removeClass("in-stock").addClass("call-stock");
		//$('#status_direct').removeClass("out-of-stock").removeClass("in-stock").addClass("call-stock");
		$(elStatusP).removeClass("out-of-stock").removeClass("in-stock").addClass("call-stock");
	}

	if(location.PickupAvailability == ODAvailable)
	{
		$(elPickup).removeClass('CallForAvailability').addClass(ODAvailable);
	}

	if(location.DeliveryAvailability == ODAvailable)
	{
		$(elDelivery).removeClass('CallForAvailability').addClass(ODAvailable);
	}
};

function storeLocalEntry (name, currStore, buyLocalEntry, infowindowContent, marker, cleanStoreId) 
{
	localResults[name] = {};
	localResults[name]["store"] = currStore;
	localResults[name]["resultEntry"] = buyLocalEntry;
	localResults[name]["infowindowContent"] = infowindowContent;
	localResults[name]["marker"] = marker;
	localResults[name]["cleanStoreId"] = cleanStoreId;
}

function sort_distance(){

    var numbersort = 1;
	var items = $('#localList li').get();
	
	items.sort(function(a,b){ 
	 
	  var keyA = $(a).find('#disval').text();
	  var keyB = $(b).find('#disval').text();
	  
	  if ((Math.round(parseFloat(keyA)*100)/100) < (Math.round(parseFloat(keyB)*100)/100)) { return -1; }
	  if ((Math.round(parseFloat(keyA)*100)/100) > (Math.round(parseFloat(keyB)*100)/100)) { return 1; }
	  
	  return 0;
	});	
	
	var ol = $('#localList');
	$.each(items, function(i, li){
	  ol.append(li);
	  $('#'+$(li).attr('id')+' .number').text(numbersort);
	  numbersort++;
	});

}

function callback(response, status) {
    
  if (status == google.maps.DistanceMatrixStatus.OK) {
    var origins = response.originAddresses;
    var destinations = response.destinationAddresses;


    for (var i = 0; i < origins.length; i++) {
      var results = response.rows[i].elements;

      for (var j = 0; j < results.length; j++) {
	  
        var element = results[j];

          var distance = element.distance.value;

	  distance /= 1000;  // conv to km

	  var un = '';
	  if(current_unit=='miles') {
	      distance= parseFloat(Math.round(distance * km2mile *100)/100);
	      un = themiles;
	  }	      
	  else {
 	      distance= parseFloat(Math.round(distance*100)/100);   
	      un = thekm;
	  }

        var duration = element.duration.text;
        var from = origins[i];
        var to = destinations[j];

		arr.push(distance);

      }
    }
	distancecode++;

	if(distancecode==(totalrec+1)){
		distancecode=0;
		arr.sort(function(a,b){return a-b});
		
		for(k=0;k<=arr.length;k++){
			$('#d_'+(k+1)+' .value').html(arr[k]);
			$('#d_'+(k+1)+' .units').html(un);
		}
		arr = [];
	}
  } 
}
  
function info_window_content(v) {

	var directionsURL = createDirectionsURL(v.Longitude, v.Latitude);

	var info_window_string = "<div class='info-window'>";

	var logoUrl = v.RetailerLogoSquareUrl;

	if(v.RetailerLogoSquareUrl == '') {	
		logoUrl = v.RetailerLogoUrl;
	}

	if ( logoUrl == '' )
	{
		if ( v.Attributes != undefined && v.Attributes.LogoUrl != undefined ) logoUrl = v.Attributes.LogoUrl;
	}

	var retailerName = v.RetailerName;

	if ( (widgetConfig.localTitle != undefined && widgetConfig.localTitle != null && 
		  widgetConfig.localTitle == "LocationName") || retailerName == undefined || retailerName == "" )
	{
		retailerName = v.LocationName;
	}
	else if ( (widgetConfig.localTitle != undefined && widgetConfig.localTitle != null && 
		widgetConfig.localTitle == "RetailerDisplayName") || retailerName == undefined || retailerName == "" )
	{
	retailerName = v.RetailerDisplayName;
	}
	//WTBLogging('info_window: ' + logoUrl);

	var distanceStr = v.DistanceFromUserLocation;

	if ( distanceStr != null ) distanceStr = distanceStr.toFixed(1);

	var distanceUnits = 'mi';
	if ( widgetConfig.distanceUnits == "Kilometers" ) distanceUnits = 'km';

	distanceStr += distanceUnits;

	if ( logoUrl != undefined && logoUrl != null && logoUrl != '' ) 
	{
		info_window_string += "<img class='store-logo' src='" + logoUrl + "' alt='' />";	
	}
	info_window_string += "<h3 class='store-title'>" + retailerName + "</h3>";

	info_window_string += "<p class='store-distance' style='display: none'>" + distanceStr + "<p>";

	var splitaddress = "";

	var locationAddress = '';

	if ( v.StreetLine1.trim() != '' ) 
		locationAddress += v.StreetLine1 + ', ';

	if ( v.City.trim() != '' ) 
		locationAddress += v.City + ', ';

	if ( v.State.trim() != '' ) 
		locationAddress += v.State + ', ';


	if ( v.PostalCode.trim() != '' ) 
		locationAddress += v.PostalCode;

	splitaddress += locationAddress;

	info_window_string += "<p class='store-address'>"+splitaddress+"</p>";

	var hoursText = "Hours:";
	var phoneText = "Telephone:";
	var directionText = "Directions:";
	var websiteText = "Website";

	if ( widgetConfig.hoursLabel != undefined && widgetConfig.hoursLabel != null ) 
		hoursText = widgetConfig.hoursLabel;

	if ( widgetConfig.phoneLabel != undefined && widgetConfig.phoneLabel != null ) 
		phoneText = widgetConfig.phoneLabel;

	if ( widgetConfig.directionsLabel != undefined && widgetConfig.directionsLabel != null ) 
		directionText = widgetConfig.directionsLabel;

	if ( widgetConfig.localOnlineLabel != undefined && widgetConfig.localOnlineLabel != null)
		websiteText = widgetConfig.localOnlineLabel;

	if ( widgetConfig.localOnlineInfo != undefined && widgetConfig.localOnlineInfo != null )
		websiteText = widgetConfig.localOnlineInfo;

	// local website
	var buyOnlineURL = '';

	if ( v.LocationUrl != undefined && v.LocationUrl != '' )
	{
		buyOnlineURL = v.LocationUrl;
		if ( buyOnlineURL.indexOf('http') == -1 )
			buyOnlineURL = 'https://' + buyOnlineURL;
	}

	var cleanPhoneNumber = v.Phone.replaceAll(' ', '');

	var formattedPhoneNumber = formatPhoneNumber(v.Phone);

    info_window_string += '<p class="store-hours"><span>'+hoursText+'</span> ' + getTodaysHoursFromPCAT(v.Hours, show12Hour, null, true) + '</p>';
    if ( formattedPhoneNumber != 'Not Available.') info_window_string += '<p class="store-phone"><a target="_top" href="tel://'+v.Phone+'" target="_blank"><span class="phone-text">' + phoneText + '</span> <span>' + formatPhoneNumber(v.Phone) + '</span></a></p>';
    info_window_string += '<p class="store-direction"><a href="'+ directionsURL +'" target="_blank"><span>'+directionText+'</span></a></p>';
    if ( buyOnlineURL != '' ) info_window_string += '<p class="store-website"><a href="'+ buyOnlineURL +'" target="_blank"><span>'+websiteText+'</span></a></p>';

	info_window_string += "</div>";

	return info_window_string;
	
}

getDirectionsClick = function () {
	if( trackEvents ){ 
		WTBLogging("Firing event: getDirectionsClick"); 
		postPetsV2Event('LocalStoreGetDirectionsClick'); 
	}
};

localStorePhoneCallClick = function () {
	if( trackEvents ){
		WTBLogging("Firing event: localStorePhoneCallClick"); 
		postPetsV2Event('LocalStorePhoneCallClick'); 
	}
}


function postPetsEvent (type, event) {

	WTBLogging('postPetsEvent - type: ' +  type);

    switch (type) {
        case 'WidgetImpression':
            petsPostWidgetImpression({
                accId: profileId,
                referrerUrl: referrerUrl,
                userAgent: userAgent,
                postCode: postCode,
                geo: geo,
                model: model,
                distance: currRange,
                tag: tag
            });
            break;
        case 'ProductImpression':
            petsPostProductImpression({
                accId: profileId,
                widgetImpressionGuid: widgetImpressionGuid,
                referrerUrl: referrerUrl,
                userAgent: userAgent,
                postCode: postCode,
                geo: geo,
                model: model,
                distance: currRange,
                tag: tag
            });
            break;
        case 'LocalSearch':
            petsPostLocalSearchEvent({
                accId: profileId,
                widgetImpressionGuid: widgetImpressionGuid,
                referrerUrl: referrerUrl,
                userAgent: userAgent,
                postCode: postCode,
                geo: geo,
                model: model,
                distance: currRange,
                tag: tag
            });
            break;
        case 'LocalStoreImpression':
            petsPostLocalStoreImpressionEvent({
                accId: profileId,
                widgetImpressionGuid: widgetImpressionGuid,
                tag: tag
            }, impressionEvent);
            break;
        case 'LocalStoreClick':
            var query = petsPostLocalStoreClickEvent({
                accId: profileId,
                widgetImpressionGuid: widgetImpressionGuid,
                referrerUrl: referrerUrl,
                userAgent: userAgent,
                postCode: postCode,
                geo: geo,
                model: model,
                distance: currRange,
                tag: tag
            }, currentStore, 0);
            break;
        case 'LocalStorePhoneCallClick':        
            var query = petsPostLocalStoreClickEvent({
                accId: profileId,
                widgetImpressionGuid: widgetImpressionGuid,
                referrerUrl: referrerUrl,
                userAgent: userAgent,
                postCode: postCode,
                geo: geo,
                model: model,
                distance: currRange,
                tag: tag
            }, currentStore, 1);
            break;
        case 'LocalStoreGetDirectionsClick':
            var query = petsPostLocalStoreClickEvent({
                accId: profileId,
                widgetImpressionGuid: widgetImpressionGuid,
                referrerUrl: referrerUrl,
                userAgent: userAgent,
                postCode: postCode,
                geo: geo,
                model: model,
                distance: currRange,
                tag: tag
            }, currentStore, 2);
            break;
    }
}

function petsPostWidgetImpression (params) {
	var oauth = petsOAuth.replace("{0}", profileId);

	$.ajax({
		url: oauth,
		type: 'GET',
		success: function (data) { 
            var d = new Date();
            var n = d.toISOString();
            var event = {
                "EventType": 1,
                "AccountId": params.accId,
                "ReferrerUrl": params.referrerUrl,
                "UserAgent": params.userAgent,
                "CreateDate": n,
                "Events": [
                {
                     "CampaignTag": params.tag,
                     "PageImpressionGuid": null,
                     "ProductId": params.model,
                     "UserSearchPostalCode": params.postCode,
                     "UserSearchRange": params.distance,
                     "UserSearchLongitude": params.lng,
                     "UserSearchLatitude": params.lat
                }]
            }

            if ( data != null )
            {
				$.ajax({
					url: petsCall,
					type: 'POST',
	                data: event,
					beforeSend: function (xhr) {
						xhr.setRequestHeader('Authorization', 'bearer '+ data.AccessToken);
					},
					success: function (data) { 

	                	userTrackingGuid = data.TrackingGuid;
	                	widgetImpressionGuid = data.WidgetImpressionGuid;
	                	if(trackEvents){postPetsV2Event('ImpressionWidgetProduct');}
					}
				});
            }
		}
	});
};

function petsPostProductImpression (params) {

	var oauth = petsOAuth.replace("{0}", profileId);

	$.ajax({
		url: oauth,
		type: 'GET',
		success: function (data) { 
            var d = new Date();
            var n = d.toISOString();
		    var event = {
		        "EventType": 2,
		        "AccountId": params.accId,
		        "WidgetImpressionGuid": params.widgetImpressionGuid,
		        "UserTrackingGuid": params.userTrackingGuid,
		        "ReferrerUrl": params.referrerUrl,
		        "UserAgent": params.userAgent,
		        "CreateDate": n,
		        "Events": [
		          {
		              "CampaignTag": params.tag,
		              "PageImpressionGuid": params.pageImpressionGuid,
		              "ProductId": params.model,
		              "UserSearchPostalCode": params.postCode,
		              "UserSearchRange": params.distance,
		              "UserSearchLongitude": params.lng,
		              "UserSearchLatitude": params.lat
		          }
		        ]
		    }

            if ( data != null )
            {
				$.ajax({
					url: petsCall,
					type: 'POST',
	                data: event,
					beforeSend: function (xhr) {
						xhr.setRequestHeader('Authorization', 'bearer '+ data.AccessToken);
					},
					success: function (data) { 
						//WTBLogging("postProductImpression result: ", data);
					}
				});
			}
		}
	});
};

function petsPostLocalSearchEvent (params){

	var oauth = petsOAuth.replace("{0}", profileId);

	$.ajax({
		url: oauth,
		type: 'GET',
		success: function (data) { 

	        var d = new Date();
	        var n = d.toISOString();

	        var event = {
	            "EventType": 3,
	            "AccountId": params.accId,
	            "WidgetImpressionGuid": params.widgetImpressionGuid,
	            "UserTrackingGuid": params.userTrackingGuid,
	            "ReferrerUrl": params.referrerUrl,
	            "UserAgent": params.userAgent,
	            "CreateDate": n,
	            "Events": [
	             {
	                 "CampaignTag": params.tag,
	                 "ProductId": params.model,
	                 "UserSearchPostalCode": params.postCode,
	                 "UserSearchRange": params.distance,
	                 "UserSearchLongitude": params.lng,
	                 "UserSearchLatitude": params.lat
	             }
	            ]
	        };

            if ( data != null )
            {
				$.ajax({
					url: petsCall,
					type: 'POST',
	                data: event,
					beforeSend: function (xhr) {
						xhr.setRequestHeader('Authorization', 'bearer '+ data.AccessToken);
					},
					success: function (data) { 
						//WTBLogging("petsPostLocalSearchEvent result: ", data);
					}
				});
			}
		}
	});
};

function petsPostLocalStoreImpressionEvent (params, event){

	var oauth = petsOAuth.replace("{0}", profileId);

	$.ajax({
		url: oauth,
		type: 'GET',
		success: function (data) { 

            if ( data != null )
            {
				$.ajax({
					url: petsCall,
					type: 'POST',
	                data: event,
					beforeSend: function (xhr) {
						xhr.setRequestHeader('Authorization', 'bearer '+ data.AccessToken);
					},
					success: function (data) { 
						//WTBLogging("petsPostLocalStoreImpressionEvent result: ", data);
					}
				});
			}
		}
	});
};

function petsPostLocalStoreClickEvent (params, store, actionType){

	var oauth = petsOAuth.replace("{0}", profileId);

	$.ajax({
		url: oauth,
		type: 'GET',
		success: function (data) { 

	        var d = new Date();
	        var n = d.toISOString();  

	        var retailerName = currentStore.RetailerName;
	        
			if ( ( widgetConfig.localTitle != undefined && widgetConfig.localTitle != null && 
				   widgetConfig.localTitle == "LocationName") || retailerName == "" )
			{
				retailerName = currentStore.LocationName;
			}
			else if( ( widgetConfig.localTitle != undefined && widgetConfig.localTitle != null && 
					   widgetConfig.localTitle == "RetailerDisplayName") || retailerName == "" )
			{
				retailerName = currentStore.RetailerDisplayName;
		 	}

			// Tmp change for ATEAM-63356
			retailerName = currentStore.RetailerName;
			
	        var event = {
	            "EventType": 5,
	            "AccountId": params.accId,
	            "WidgetImpressionGuid": params.widgetImpressionGuid,
	            "UserTrackingGuid": params.userTrackingGuid,
	            "ReferrerUrl": params.referrerUrl,
	            "UserAgent": params.userAgent,
	            "CreateDate": n,
	            "Events": [
	              {
	                  "CampaignTag": params.tag,
	                  "ProductId": params.model,
	                  "LocalProductSearchGuid": params.localProductSearchGuid,
	                  "RetailerIdGuid": currentStore.RetailerId,
	                  "RetailerName": retailerName,
	                  "StoreIdGuid": currentStore.SourceLocationId,
	                  "StoreAddressLine1": currentStore.StreetLine1,
	                  "StoreAddressLine2": currentStore.StreetLine2,
	                  "StoreCity": currentStore.City,
	                  "StoreRegionCode": currentStore.State,
	                  "StoreCountryCode": currentStore.countryCode,
	                  "StoreRange": currentStore.DistanceFromUserLocation,
	                  "StorePostalCode": currentStore.PostalCode,
	                  "StoreLatitude": currentStore.Latitude,
	                  "StoreLongitude": currentStore.Longitude,
	                  "RetailerType": null,
	                  "OfferPrice": "",
	                  "CurrencyCode": "",
	                  "InStock": currentStore.Availability,
	                  "UserSearchPostalCode": params.postCode,
	                  "UserSearchRange": params.distance,
	                  "UserSearchLongitude": params.lng,
	                  "UserSearchLatitude": params.lat
					  
	              }
	            ]
	        };

	        WTBLogging('petsPostLocalStoreClickEvent - setting actionType: ' + actionType);

			if(actionType == 1){event.Events[0].ActionType = 1;}
			if(actionType == 2){event.Events[0].ActionType = 2;}

            if ( data != null )
            {
				$.ajax({
					url: petsCall,
					type: 'POST',
	                data: event,
					beforeSend: function (xhr) {
						xhr.setRequestHeader('Authorization', 'bearer '+ data.AccessToken);
					},
					success: function (data) { 
						//WTBLogging("petsPostLocalStoreClickEvent result: ", data);
					}
				});
			}
		}
	});
};

function postPetsV2Event(type, OnSuccess) {
	var product = window.GetURLParameter("model");
	if(product == undefined ||  product == null || product == ""){
		if(model != undefined &&  model != null && model != ""){
			product = model;
		}else{
			return;
		}
	}
    var event = {};
    // console.clear()
    console.warn(type)
    //var currentUrl = window.location.protocol + '//' + window.location.hostname + window.location.pathname + window.location.search;
    var currentUrl = window.location.href;
	var formatedDate = new Date().toISOString().split('.')[0].replace('T', ' ');
    WTBLogging('postPetsV2Event: ' + type + '|' + formatedDate);

    //This data is required for all the events

    var finalEvent = undefined;
    basicEvent = {
        "EventDateTimeUtc": formatedDate,
        "EventType": type,
        "ProfileId": profileId,
        "WidgetUrl": currentUrl.toString(),
		"ProductId": product

    }

    switch (type) {
        case 'OnlineImpressionRetailer':
        case 'OnlineImpressionWidget':
        case 'ImpressionWidgetProduct':
        // case 'ProductSearchLocal':
            finalEvent = getExtendedEvent(basicEvent);
            finalEvent = addExtraEventFields(finalEvent, type);
            break;

        case 'LocalStoreClick':
        case 'LocalStorePhoneCallClick':
        case 'LocalStoreGetDirectionsClick':
            finalEvent = getExtendedLocalEvent(basicEvent);
            finalEvent = addActionTypeForLocalEvent(finalEvent, type);
            break;
		case 'ImpressionLocalRetailer':
			finalEvent = getLocalEvent(basicEvent);
			return finalEvent;
	
		case 'ImpressionWidget':
			finalEvent = getExtendedEvent(basicEvent);
			finalEvent = $.extend({}, finalEvent, {
				"SearchLatitude" : locLat,
				"SearchLongitude" : locLong,
				"SearchPostalCode": currPostCode,
				"SearchRange": currRange,
			});
			break;
		case 'AddLocationsToMap':
        case 'Autocomplete':
        case 'DirectionsLookup':
        case 'Geocode':
        case 'PinSelect':
        case 'MapLoad':
			finalEvent = basicEvent;
		    break;
		
    }


    finalEvent ? sendPetsV2Event([finalEvent],OnSuccess) : console.error("Unknown Event: " + type);
}

function getExtendedEvent(event) {
	if(userTrackingGuid != undefined && userTrackingGuid != null && userTrackingGuid != "" && widgetImpressionGuid != undefined && widgetImpressionGuid != null && widgetImpressionGuid != ""){
		return $.extend({},event,{

			"CampaignTag": tag,
			"ProductId": model,
			"ProductIdType": 0,
			"ReferrerUrl": referrerUrl,
			"UserAgent": userAgent,
			"UserTrackingId": userTrackingGuid,
			"WidgetImpressionId": widgetImpressionGuid,
		});	
	}else{
		return event;
	}
	
	
}

function addExtraEventFields(event, type) {
    switch (type) {
        case 'OnlineImpressionRetailer':
        case 'OnlineImpressionWidget':
            event["CountryCode"] = widgetConfig.region;
            break;
        case 'ProductSearchLocal':
            event["Postalcode"] = widgetConfig.region;
            event["ProductSearchLocalId"] = widgetConfig.region;
            break;

    }

    return event;
}
function getLocalEvent(event) {

    extendedEvent = getExtendedEvent(event);
    
	var retailerName = "";
    
	if (currentStore.RetailerName != undefined && currentStore.RetailerName != null)
        retailerName = currentStore.RetailerName;
    if (widgetConfig.localTitle != undefined && widgetConfig.localTitle != null && widgetConfig.localTitle == "LocationName" || retailerName == "")
        retailerName = currentStore.LocationName;
    else if (widgetConfig.localTitle != undefined && widgetConfig.localTitle != null && widgetConfig.localTitle == "RetailerDisplayName" || retailerName == undefined || retailerName == "")
        retailerName = currentStore.RetailerDisplayName;

	// Tmp hardcode for ATEAM-63356
	retailerName = currentStore.RetailerName;

	var stateStr = currentStore.State;
    
	if (currentStore.CountryCode.length != 2)
        return;
    else if (currentStore.CountryCode.length == 2 && currentStore.State == "")
        stateStr = "001";
    
	var returnEvent = $.extend({}, extendedEvent, {
		"Address1": currentStore.StreetLine1,
		"Address2": currentStore.StreetLine2,
		"City": currentStore.City,
		"CountryCode": currentStore.CountryCode,
		"RegionCode": stateStr,
		"RetailerType": null,
		"StoreName": currentStore.SourceLocationId,
		"LocalProductSearchGuid": null,
		"RetailerName": retailerName,
		"PostalCode": currentStore.PostalCode,
		"Latitude": currentStore.Latitude,
		"Longitude": currentStore.Longitude
	});

    return returnEvent;
}

function getExtendedLocalEvent(event) {
    eventLocalData = getLocalEvent(event);
    if(typeof(currentStore.Availability) != Boolean){
        currentStore.Availability = null;
    }
    //Object with the data for ClickLocal
	return $.extend({},eventLocalData,{
        "EventType": 'ClickLocalRetailer',
        "CurrencyCode": widgetConfig.currencySymbol,
        "InStock": currentStore.Availability,
    });
}

function addActionTypeForLocalEvent(event, type) {
    switch (type) {
        case 'LocalStoreClick':
            event["ActionType"] = 0;
            break;
        case 'LocalStorePhoneCallClick':
            event["ActionType"] = 1;
            break;
        case 'LocalStoreGetDirectionsClick':
            event["ActionType"] = 2;
            break;
    }
    return event;

}

function sendPetsV2Event(event,OnSuccess) {
    $.ajax({
        url: petsV2Call,
        type: 'POST',
        data: JSON.stringify(event),
        beforeSend: function (xhr) {
            xhr.setRequestHeader('Authorization', 'bearer ' + petsV2Auth);
        },
        success: function (data) {
            WTBLogging("sendPetsV2Event result: ", data);
			if(OnSuccess != undefined){
				OnSuccess(data);
			}
        }
    });
}

function GetWidgetParams(){
	
	var widgetType = window.location.pathname.match(".*\/(.*)\/")[1];
	var coreType = "wtbCore-CE";
	var widgetString = "Source=wtbWidget;WidgetType=" + widgetType + ";CoreType=" + coreType +";";

	var language = GetURLParameter("lang");
	if(language != null && language != ""){
		widgetString += "Language=" + language + ";";
	} 

	var type = GetURLParameter("type");

	if( type != null && type != ""){
		widgetString += "Type=" + type + ";";
	}

	if(this.innerWidth != null && this.innerWidth != "" && this.innerWidth != undefined && this.innerWidth != 0){
		widgetString += "Resolution=" + this.innerWidth + "x" + this.innerHeight + ";";
	}

	return widgetString;
}